
/Users/chipmc/Documents/Maker/Particle/Utilities/Simple-Enable-Sleep/target/1.5.1/boron/Simple-Enable-Sleep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006574  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000da590  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000c4  2003e0f4  000da594  0001e0f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000638  2003e1b8  2003e1b8  0002e1b8  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000da658  000da658  0002a658  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da680  000da680  0002a680  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000fc536  00000000  00000000  0002a684  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00013569  00000000  00000000  00126bba  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000259b0  00000000  00000000  0013a123  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002cc0  00000000  00000000  0015fad3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00005450  00000000  00000000  00162793  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036c63  00000000  00000000  00167be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002d39b  00000000  00000000  0019e846  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010b61f  00000000  00000000  001cbbe1  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000ea98  00000000  00000000  002d7200  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f004 f911 	bl	d8254 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f004 f931 	bl	d82a0 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e0f4 	.word	0x2003e0f4
   d4048:	000da594 	.word	0x000da594
   d404c:	2003e1b8 	.word	0x2003e1b8
   d4050:	2003e1b8 	.word	0x2003e1b8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f003 fae1 	bl	d7620 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000da58c 	.word	0x000da58c
   d4080:	000da550 	.word	0x000da550

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b884 	b.w	d4190 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f8c5 	bl	d4218 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f003 ba87 	b.w	d75a4 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f001 b903 	b.w	d52a0 <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f001 b901 	b.w	d52a0 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 f814 	bl	d50d4 <panic_>
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d4e15 	.word	0x000d4e15

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN5spark10LogHandler5writeEPKcj>:
    if (level >= filter_.level(category)) {
        write(data, size);
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
   d40c4:	4770      	bx	lr

000d40c6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40c6:	6a00      	ldr	r0, [r0, #32]
   d40c8:	6803      	ldr	r3, [r0, #0]
   d40ca:	68db      	ldr	r3, [r3, #12]
   d40cc:	4718      	bx	r3
	...

000d40d0 <_ZN5spark17Serial1LogHandlerD1Ev>:
            StreamLogHandler(Serial1, level, filters) {
        Serial1.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~Serial1LogHandler() {
   d40d0:	4b0a      	ldr	r3, [pc, #40]	; (d40fc <_ZN5spark17Serial1LogHandlerD1Ev+0x2c>)
   d40d2:	b510      	push	{r4, lr}
   d40d4:	4604      	mov	r4, r0
   d40d6:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d40d8:	f001 fe14 	bl	d5d04 <_ZN5spark10LogManager8instanceEv>
   d40dc:	4621      	mov	r1, r4
   d40de:	f002 f801 	bl	d60e4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial1.end();
   d40e2:	f003 f993 	bl	d740c <_Z22__fetch_global_Serial1v>
   d40e6:	f003 f98a 	bl	d73fe <_ZN11USARTSerial3endEv>
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d40ea:	4620      	mov	r0, r4
   d40ec:	4b04      	ldr	r3, [pc, #16]	; (d4100 <_ZN5spark17Serial1LogHandlerD1Ev+0x30>)
   d40ee:	f840 3b04 	str.w	r3, [r0], #4
   d40f2:	f001 fefd 	bl	d5ef0 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d40f6:	4620      	mov	r0, r4
   d40f8:	bd10      	pop	{r4, pc}
   d40fa:	bf00      	nop
   d40fc:	000d9a50 	.word	0x000d9a50
   d4100:	000d9a38 	.word	0x000d9a38

000d4104 <_ZN5spark17Serial1LogHandlerD0Ev>:
            StreamLogHandler(Serial1, level, filters) {
        Serial1.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~Serial1LogHandler() {
   d4104:	b510      	push	{r4, lr}
   d4106:	4604      	mov	r4, r0
        LogManager::instance()->removeHandler(this);
        Serial1.end();
    }
   d4108:	f7ff ffe2 	bl	d40d0 <_ZN5spark17Serial1LogHandlerD1Ev>
   d410c:	4620      	mov	r0, r4
   d410e:	2124      	movs	r1, #36	; 0x24
   d4110:	f003 fb97 	bl	d7842 <_ZdlPvj>
   d4114:	4620      	mov	r0, r4
   d4116:	bd10      	pop	{r4, pc}

000d4118 <_ZN18Serial1DebugOutputD1Ev>:
    explicit SerialDebugOutput(int baud = 9600, LogLevel level = LOG_LEVEL_ALL) :
        SerialLogHandler(level) {
    }
};

class Serial1DebugOutput: public spark::Serial1LogHandler {
   d4118:	b510      	push	{r4, lr}
   d411a:	4b03      	ldr	r3, [pc, #12]	; (d4128 <_ZN18Serial1DebugOutputD1Ev+0x10>)
   d411c:	6003      	str	r3, [r0, #0]
   d411e:	4604      	mov	r4, r0
   d4120:	f7ff ffd6 	bl	d40d0 <_ZN5spark17Serial1LogHandlerD1Ev>
   d4124:	4620      	mov	r0, r4
   d4126:	bd10      	pop	{r4, pc}
   d4128:	000d9a68 	.word	0x000d9a68

000d412c <_ZN18Serial1DebugOutputD0Ev>:
   d412c:	b510      	push	{r4, lr}
   d412e:	4604      	mov	r4, r0
   d4130:	f7ff fff2 	bl	d4118 <_ZN18Serial1DebugOutputD1Ev>
   d4134:	4620      	mov	r0, r4
   d4136:	2124      	movs	r1, #36	; 0x24
   d4138:	f003 fb83 	bl	d7842 <_ZdlPvj>
   d413c:	4620      	mov	r0, r4
   d413e:	bd10      	pop	{r4, pc}

000d4140 <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
   d4140:	b508      	push	{r3, lr}
   d4142:	ed2d 8b02 	vpush	{d8}
   d4146:	eeb0 8a40 	vmov.f32	s16, s0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d414a:	b128      	cbz	r0, d4158 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x18>
   d414c:	3801      	subs	r0, #1
   d414e:	f7ff fff7 	bl	d4140 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
   d4152:	ee28 0a00 	vmul.f32	s0, s16, s0
   d4156:	e001      	b.n	d415c <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x1c>
   d4158:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
   d415c:	ecbd 8b02 	vpop	{d8}
   d4160:	bd08      	pop	{r3, pc}

000d4162 <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d4162:	b40e      	push	{r1, r2, r3}
   d4164:	b500      	push	{lr}
   d4166:	b08c      	sub	sp, #48	; 0x30
   d4168:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d416a:	2320      	movs	r3, #32
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
   d416c:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d4170:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4172:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4176:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4178:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d417a:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d417c:	aa04      	add	r2, sp, #16
   d417e:	2001      	movs	r0, #1
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4180:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4182:	f000 ffaf 	bl	d50e4 <log_message_v>
inline void spark::Logger::trace(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}
   d4186:	b00c      	add	sp, #48	; 0x30
   d4188:	f85d eb04 	ldr.w	lr, [sp], #4
   d418c:	b003      	add	sp, #12
   d418e:	4770      	bx	lr

000d4190 <setup>:
int wakeInSeconds = 30;
unsigned long stayAwakeTime = 60 * 1000;
int blueLED = D7;

// setup() runs once, when the device is first turned on.
void setup() { 
   d4190:	b510      	push	{r4, lr}

  rtc.setup();                                                        // Start the real time clock
   d4192:	4c0d      	ldr	r4, [pc, #52]	; (d41c8 <setup+0x38>)
   d4194:	4620      	mov	r0, r4
   d4196:	f000 fc11 	bl	d49bc <_ZN8MCP794105setupEv>
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d419a:	4620      	mov	r0, r4

  pinMode(blueLED,OUTPUT);
   d419c:	4c0b      	ldr	r4, [pc, #44]	; (d41cc <setup+0x3c>)

// setup() runs once, when the device is first turned on.
void setup() { 

  rtc.setup();                                                        // Start the real time clock
  rtc.clearAlarm();                                                   // Ensures alarm is still not set from last cycle
   d419e:	2100      	movs	r1, #0
   d41a0:	f000 fd61 	bl	d4c66 <_ZN8MCP7941010clearAlarmEi>

  pinMode(blueLED,OUTPUT);
   d41a4:	8820      	ldrh	r0, [r4, #0]
   d41a6:	2101      	movs	r1, #1
   d41a8:	f003 fa9c 	bl	d76e4 <pinMode>
  digitalWrite(blueLED,HIGH);
   d41ac:	2101      	movs	r1, #1
   d41ae:	8820      	ldrh	r0, [r4, #0]
   d41b0:	f003 faa9 	bl	d7706 <digitalWrite>
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
  System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
*/
  delay(2000);
   d41b4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d41b8:	f001 f8b2 	bl	d5320 <delay>
  digitalWrite(blueLED,LOW);
   d41bc:	8820      	ldrh	r0, [r4, #0]
   d41be:	2100      	movs	r1, #0
}
   d41c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
  System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
*/
  delay(2000);
  digitalWrite(blueLED,LOW);
   d41c4:	f003 ba9f 	b.w	d7706 <digitalWrite>
   d41c8:	2003e1e0 	.word	0x2003e1e0
   d41cc:	2003e0f4 	.word	0x2003e0f4

000d41d0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>:
inline AbstractTypeDiagnosticData<UnderlyingTypeT>::AbstractTypeDiagnosticData(DiagnosticDataId id, const char* name, diag_type type) :
        AbstractDiagnosticData(id, name, type) {
}

template<typename UnderlyingTypeT>
inline int AbstractTypeDiagnosticData<UnderlyingTypeT>::get(DiagnosticDataId id, UnderlyingTypeT& val) {
   d41d0:	b530      	push	{r4, r5, lr}
   d41d2:	b085      	sub	sp, #20
   d41d4:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d41d6:	a904      	add	r1, sp, #16
   d41d8:	2200      	movs	r2, #0
   d41da:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
   d41de:	f000 ff99 	bl	d5114 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d41e2:	b9a8      	cbnz	r0, d4210 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x40>
        return ret;
    }
    return get(src, val);
   d41e4:	9c00      	ldr	r4, [sp, #0]
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
   d41e6:	b10c      	cbz	r4, d41ec <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x1c>
   d41e8:	6923      	ldr	r3, [r4, #16]
   d41ea:	b923      	cbnz	r3, d41f6 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x26>
   d41ec:	4a09      	ldr	r2, [pc, #36]	; (d4214 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl+0x44>)
   d41ee:	2100      	movs	r1, #0
   d41f0:	200a      	movs	r0, #10
   d41f2:	f000 ff6f 	bl	d50d4 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d41f6:	2300      	movs	r3, #0
   d41f8:	9301      	str	r3, [sp, #4]
   d41fa:	230c      	movs	r3, #12
   d41fc:	f8ad 3004 	strh.w	r3, [sp, #4]
   d4200:	2304      	movs	r3, #4
   d4202:	9303      	str	r3, [sp, #12]
   d4204:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d4206:	6923      	ldr	r3, [r4, #16]
   d4208:	aa01      	add	r2, sp, #4
   d420a:	2101      	movs	r1, #1
   d420c:	4620      	mov	r0, r4
   d420e:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
   d4210:	b005      	add	sp, #20
   d4212:	bd30      	pop	{r4, r5, pc}
   d4214:	000d4e15 	.word	0x000d4e15

000d4218 <loop>:
}

void loop() {
   d4218:	b5f0      	push	{r4, r5, r6, r7, lr}
   d421a:	ed2d 8b02 	vpush	{d8}
   d421e:	b08f      	sub	sp, #60	; 0x3c
    PMIC power(true);
   d4220:	2101      	movs	r1, #1
   d4222:	4668      	mov	r0, sp
   d4224:	f002 fd57 	bl	d6cd6 <_ZN4PMICC1Eb>
    Log.trace("Current PMIC settings:");
   d4228:	4951      	ldr	r1, [pc, #324]	; (d4370 <loop+0x158>)
   d422a:	4852      	ldr	r0, [pc, #328]	; (d4374 <loop+0x15c>)
   d422c:	f7ff ff99 	bl	d4162 <_ZNK5spark6Logger5traceEPKcz>
    Log.trace("VIN Vmin: %u", power.getInputVoltageLimit());
   d4230:	4668      	mov	r0, sp
   d4232:	f002 fdd1 	bl	d6dd8 <_ZN4PMIC20getInputVoltageLimitEv>
   d4236:	4950      	ldr	r1, [pc, #320]	; (d4378 <loop+0x160>)
   d4238:	4602      	mov	r2, r0
   d423a:	484e      	ldr	r0, [pc, #312]	; (d4374 <loop+0x15c>)
   d423c:	f7ff ff91 	bl	d4162 <_ZNK5spark6Logger5traceEPKcz>
    Log.trace("VIN Imax: %u", power.getInputCurrentLimit());
   d4240:	4668      	mov	r0, sp
   d4242:	f002 fd93 	bl	d6d6c <_ZN4PMIC20getInputCurrentLimitEv>
   d4246:	494d      	ldr	r1, [pc, #308]	; (d437c <loop+0x164>)
   d4248:	4602      	mov	r2, r0
   d424a:	484a      	ldr	r0, [pc, #296]	; (d4374 <loop+0x15c>)
   d424c:	f7ff ff89 	bl	d4162 <_ZNK5spark6Logger5traceEPKcz>
    Log.trace("Ichg: %u", power.getChargeCurrentValue());
   d4250:	4668      	mov	r0, sp
   d4252:	f002 fd97 	bl	d6d84 <_ZN4PMIC21getChargeCurrentValueEv>
   d4256:	494a      	ldr	r1, [pc, #296]	; (d4380 <loop+0x168>)
   d4258:	4602      	mov	r2, r0
   d425a:	4846      	ldr	r0, [pc, #280]	; (d4374 <loop+0x15c>)
   d425c:	f7ff ff81 	bl	d4162 <_ZNK5spark6Logger5traceEPKcz>
    Log.trace("Iterm: %u", power.getChargeVoltageValue());
   d4260:	4668      	mov	r0, sp
   d4262:	f002 fd9c 	bl	d6d9e <_ZN4PMIC21getChargeVoltageValueEv>
   d4266:	4947      	ldr	r1, [pc, #284]	; (d4384 <loop+0x16c>)
   d4268:	4602      	mov	r2, r0
   d426a:	4842      	ldr	r0, [pc, #264]	; (d4374 <loop+0x15c>)
   d426c:	f7ff ff79 	bl	d4162 <_ZNK5spark6Logger5traceEPKcz>
    Log.trace("Iterm: %u", power.getFault());
   d4270:	4668      	mov	r0, sp
   d4272:	f002 fdae 	bl	d6dd2 <_ZN4PMIC8getFaultEv>
   d4276:	4943      	ldr	r1, [pc, #268]	; (d4384 <loop+0x16c>)
   d4278:	4602      	mov	r2, r0
   d427a:	483e      	ldr	r0, [pc, #248]	; (d4374 <loop+0x15c>)
   d427c:	f7ff ff71 	bl	d4162 <_ZNK5spark6Logger5traceEPKcz>
    Log.trace("Iterm: %u", power.getSystemStatus());
   d4280:	4668      	mov	r0, sp
   d4282:	f002 fda3 	bl	d6dcc <_ZN4PMIC15getSystemStatusEv>
   d4286:	493f      	ldr	r1, [pc, #252]	; (d4384 <loop+0x16c>)
   d4288:	4602      	mov	r2, r0
   d428a:	483a      	ldr	r0, [pc, #232]	; (d4374 <loop+0x15c>)
   d428c:	f7ff ff69 	bl	d4162 <_ZNK5spark6Logger5traceEPKcz>
    Log.trace("Iterm: %u", power.readOpControlRegister());
   d4290:	4668      	mov	r0, sp
   d4292:	f002 fd98 	bl	d6dc6 <_ZN4PMIC21readOpControlRegisterEv>
   d4296:	493b      	ldr	r1, [pc, #236]	; (d4384 <loop+0x16c>)
   d4298:	4602      	mov	r2, r0
   d429a:	4836      	ldr	r0, [pc, #216]	; (d4374 <loop+0x15c>)
   d429c:	f7ff ff61 	bl	d4162 <_ZNK5spark6Logger5traceEPKcz>
inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractTypeDiagnosticData<int32_t>(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
    return AbstractTypeDiagnosticData<IntType>::get(id, val);
   d42a0:	a907      	add	r1, sp, #28
   d42a2:	2018      	movs	r0, #24
   d42a4:	f7ff ff94 	bl	d41d0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
   d42a8:	a907      	add	r1, sp, #28
        return system_power_management_set_config(conf.config(), nullptr);
    }

    int powerSource() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_POWER_SOURCE, val));
   d42aa:	1e07      	subs	r7, r0, #0
   d42ac:	f04f 0007 	mov.w	r0, #7
        return val;
   d42b0:	bfa8      	it	ge
   d42b2:	9f07      	ldrge	r7, [sp, #28]
   d42b4:	f7ff ff8c 	bl	d41d0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
   d42b8:	a907      	add	r1, sp, #28
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
   d42ba:	1e06      	subs	r6, r0, #0
   d42bc:	f04f 0003 	mov.w	r0, #3
        return val;
   d42c0:	bfa8      	it	ge
   d42c2:	9e07      	ldrge	r6, [sp, #28]
   d42c4:	f7ff ff84 	bl	d41d0 <_ZN8particle26AbstractTypeDiagnosticDataIlE3getEtRl>
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
        if (r) {
   d42c8:	b988      	cbnz	r0, d42ee <loop+0xd6>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d42ca:	2006      	movs	r0, #6
   d42cc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d42d0:	f7ff ff36 	bl	d4140 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d42d4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   d42d8:	ee30 0a00 	vadd.f32	s0, s0, s0
   d42dc:	ee07 3a90 	vmov	s15, r3
   d42e0:	ee30 0a00 	vadd.f32	s0, s0, s0
   d42e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d42e8:	ee87 8a80 	vdiv.f32	s16, s15, s0
   d42ec:	e001      	b.n	d42f2 <loop+0xda>
            return -1.0f;
   d42ee:	eebf 8a00 	vmov.f32	s16, #240	; 0xbf800000 -1.0
    int batteryState = System.batteryState();
    float batterySoc = System.batteryCharge();
    constexpr char const* batteryStates[] = {
        "unknown", "not charging", "charging",
        "charged", "discharging", "fault", "disconnected"
    };
   d42f2:	4c25      	ldr	r4, [pc, #148]	; (d4388 <loop+0x170>)
   d42f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d42f6:	ad07      	add	r5, sp, #28
   d42f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d42fa:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    constexpr char const* powerSources[] = {
        "unknown", "vin", "usb host", "usb adapter",
        "usb otg", "battery"
    };
   d42fe:	340c      	adds	r4, #12
    int batteryState = System.batteryState();
    float batterySoc = System.batteryCharge();
    constexpr char const* batteryStates[] = {
        "unknown", "not charging", "charging",
        "charged", "discharging", "fault", "disconnected"
    };
   d4300:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    constexpr char const* powerSources[] = {
        "unknown", "vin", "usb host", "usb adapter",
        "usb otg", "battery"
    };
   d4304:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d4306:	ad01      	add	r5, sp, #4
   d4308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d430a:	e894 0003 	ldmia.w	r4, {r0, r1}
    Log.trace("Power source: %s", powerSources[std::max(0, powerSource)]);
   d430e:	ab0e      	add	r3, sp, #56	; 0x38
        "charged", "discharging", "fault", "disconnected"
    };
    constexpr char const* powerSources[] = {
        "unknown", "vin", "usb host", "usb adapter",
        "usb otg", "battery"
    };
   d4310:	e885 0003 	stmia.w	r5, {r0, r1}
    Log.trace("Power source: %s", powerSources[std::max(0, powerSource)]);
   d4314:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
   d4318:	eb03 0787 	add.w	r7, r3, r7, lsl #2
   d431c:	491b      	ldr	r1, [pc, #108]	; (d438c <loop+0x174>)
   d431e:	f857 2c34 	ldr.w	r2, [r7, #-52]
   d4322:	4814      	ldr	r0, [pc, #80]	; (d4374 <loop+0x15c>)
   d4324:	f7ff ff1d 	bl	d4162 <_ZNK5spark6Logger5traceEPKcz>
    Log.trace("Battery state: %s", batteryStates[std::max(0, batteryState)]);
   d4328:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
   d432c:	ab0e      	add	r3, sp, #56	; 0x38
   d432e:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   d4332:	4917      	ldr	r1, [pc, #92]	; (d4390 <loop+0x178>)
   d4334:	f856 2c1c 	ldr.w	r2, [r6, #-28]
   d4338:	480e      	ldr	r0, [pc, #56]	; (d4374 <loop+0x15c>)
   d433a:	f7ff ff12 	bl	d4162 <_ZNK5spark6Logger5traceEPKcz>
    Log.trace("Battery charge: %f", batterySoc);
   d433e:	ee18 0a10 	vmov	r0, s16
   d4342:	f003 fd47 	bl	d7dd4 <__aeabi_f2d>
   d4346:	4602      	mov	r2, r0
   d4348:	460b      	mov	r3, r1
   d434a:	480a      	ldr	r0, [pc, #40]	; (d4374 <loop+0x15c>)
   d434c:	4911      	ldr	r1, [pc, #68]	; (d4394 <loop+0x17c>)
   d434e:	f7ff ff08 	bl	d4162 <_ZNK5spark6Logger5traceEPKcz>

    delay(2000);
   d4352:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
   d4356:	f000 ffe3 	bl	d5320 <delay>
/*
    if (millis() > stayAwakeTime) {                                   // Enable sleep so each time we wake we reset the device
      rtc.setAlarm(wakeInSeconds);
    }
*/
    rtc.loop();                                                         // keeps the clock up to date
   d435a:	480f      	ldr	r0, [pc, #60]	; (d4398 <loop+0x180>)
   d435c:	f000 fc46 	bl	d4bec <_ZN8MCP794104loopEv>
  delay(2000);
  digitalWrite(blueLED,LOW);
}

void loop() {
    PMIC power(true);
   d4360:	4668      	mov	r0, sp
   d4362:	f002 fcc7 	bl	d6cf4 <_ZN4PMICD1Ev>
      rtc.setAlarm(wakeInSeconds);
    }
*/
    rtc.loop();                                                         // keeps the clock up to date
  
}
   d4366:	b00f      	add	sp, #60	; 0x3c
   d4368:	ecbd 8b02 	vpop	{d8}
   d436c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d436e:	bf00      	nop
   d4370:	000d9aac 	.word	0x000d9aac
   d4374:	2003e270 	.word	0x2003e270
   d4378:	000d9ac3 	.word	0x000d9ac3
   d437c:	000d9ad0 	.word	0x000d9ad0
   d4380:	000d9add 	.word	0x000d9add
   d4384:	000d9ae6 	.word	0x000d9ae6
   d4388:	000d9a78 	.word	0x000d9a78
   d438c:	000d9af0 	.word	0x000d9af0
   d4390:	000d9b01 	.word	0x000d9b01
   d4394:	000d9b13 	.word	0x000d9b13
   d4398:	2003e1e0 	.word	0x2003e1e0

000d439c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d439c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d439e:	6804      	ldr	r4, [r0, #0]
   d43a0:	6843      	ldr	r3, [r0, #4]
   d43a2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d43a4:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d43a6:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d43aa:	42a6      	cmp	r6, r4
   d43ac:	d004      	beq.n	d43b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
    static int nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found);
};

} // namespace spark::detail

class LogCategoryFilter {
   d43ae:	4620      	mov	r0, r4
   d43b0:	f002 fded 	bl	d6f8e <_ZN6StringD1Ev>
   d43b4:	3414      	adds	r4, #20
   d43b6:	e7f8      	b.n	d43aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d43b8:	6828      	ldr	r0, [r5, #0]
   d43ba:	f000 ff71 	bl	d52a0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d43be:	4628      	mov	r0, r5
   d43c0:	bd70      	pop	{r4, r5, r6, pc}

000d43c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d43c2:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d43c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d43c6:	4606      	mov	r6, r0
   d43c8:	460c      	mov	r4, r1
   d43ca:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d43cc:	d916      	bls.n	d43fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d43ce:	4290      	cmp	r0, r2
   d43d0:	d215      	bcs.n	d43fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            // Move elements in reverse order
            --p;
            --end;
   d43d2:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d43d6:	1a6c      	subs	r4, r5, r1
   d43d8:	f1a1 0714 	sub.w	r7, r1, #20
   d43dc:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d43de:	42af      	cmp	r7, r5
   d43e0:	d01c      	beq.n	d441c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d43e2:	b12c      	cbz	r4, d43f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d43e4:	4629      	mov	r1, r5
   d43e6:	4620      	mov	r0, r4
   d43e8:	f002 fdc1 	bl	d6f6e <_ZN6StringC1EOS_>
   d43ec:	7c2b      	ldrb	r3, [r5, #16]
   d43ee:	7423      	strb	r3, [r4, #16]
   d43f0:	4628      	mov	r0, r5
   d43f2:	f002 fdcc 	bl	d6f8e <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d43f6:	3d14      	subs	r5, #20
   d43f8:	3c14      	subs	r4, #20
   d43fa:	e7f0      	b.n	d43de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d43fc:	d00e      	beq.n	d441c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d43fe:	42ac      	cmp	r4, r5
   d4400:	d00c      	beq.n	d441c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4402:	b12e      	cbz	r6, d4410 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4404:	4621      	mov	r1, r4
   d4406:	4630      	mov	r0, r6
   d4408:	f002 fdb1 	bl	d6f6e <_ZN6StringC1EOS_>
   d440c:	7c23      	ldrb	r3, [r4, #16]
   d440e:	7433      	strb	r3, [r6, #16]
   d4410:	4620      	mov	r0, r4
   d4412:	f002 fdbc 	bl	d6f8e <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d4416:	3414      	adds	r4, #20
   d4418:	3614      	adds	r6, #20
   d441a:	e7f0      	b.n	d43fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
   d441c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d441e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d441e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d4422:	2300      	movs	r3, #0
   d4424:	6003      	str	r3, [r0, #0]
   d4426:	6043      	str	r3, [r0, #4]
   d4428:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d442a:	684e      	ldr	r6, [r1, #4]
   d442c:	429e      	cmp	r6, r3
        size_ = n;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d442e:	4604      	mov	r4, r0
   d4430:	460f      	mov	r7, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4432:	dd24      	ble.n	d447e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d4434:	f04f 0814 	mov.w	r8, #20
   d4438:	fb08 f006 	mul.w	r0, r8, r6
   d443c:	f000 ff28 	bl	d5290 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d4440:	4605      	mov	r5, r0
   d4442:	b1e0      	cbz	r0, d447e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x60>
                return false;
            }
            move(d, data_, data_ + size_);
   d4444:	e894 0006 	ldmia.w	r4, {r1, r2}
   d4448:	fb08 1202 	mla	r2, r8, r2, r1
   d444c:	f7ff ffb9 	bl	d43c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d4450:	6820      	ldr	r0, [r4, #0]
   d4452:	f000 ff25 	bl	d52a0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d4456:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4458:	60a6      	str	r6, [r4, #8]
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d445a:	683e      	ldr	r6, [r7, #0]
   d445c:	687b      	ldr	r3, [r7, #4]
   d445e:	fb08 6803 	mla	r8, r8, r3, r6
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4462:	4546      	cmp	r6, r8
   d4464:	d009      	beq.n	d447a <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5c>
            new(dest) T(*it);
   d4466:	b12d      	cbz	r5, d4474 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x56>
   d4468:	4631      	mov	r1, r6
   d446a:	4628      	mov	r0, r5
   d446c:	f002 fdf8 	bl	d7060 <_ZN6StringC1ERKS_>
   d4470:	7c33      	ldrb	r3, [r6, #16]
   d4472:	742b      	strb	r3, [r5, #16]
        }
    }

    template<typename IteratorT>
    static void copy(IteratorT dest, IteratorT it, IteratorT end) {
        for (; it != end; ++it, ++dest) {
   d4474:	3614      	adds	r6, #20
   d4476:	3514      	adds	r5, #20
   d4478:	e7f3      	b.n	d4462 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
    if (vector.size_ > 0 && realloc(vector.size_)) {
        copy(data_, vector.data_, vector.data_ + vector.size_);
        size_ = vector.size_;
   d447a:	687b      	ldr	r3, [r7, #4]
   d447c:	6063      	str	r3, [r4, #4]
    }
}
   d447e:	4620      	mov	r0, r4
   d4480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4484 <_ZN18Serial1DebugOutputC1Ei8LogLevel>:
public:
    explicit Serial1DebugOutput(int baud = 9600, LogLevel level = LOG_LEVEL_ALL) :
   d4484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4488:	b08c      	sub	sp, #48	; 0x30
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d448a:	2300      	movs	r3, #0
   d448c:	4604      	mov	r4, r0
   d448e:	4690      	mov	r8, r2
   d4490:	9300      	str	r3, [sp, #0]
   d4492:	9301      	str	r3, [sp, #4]
   d4494:	9302      	str	r3, [sp, #8]
   d4496:	460e      	mov	r6, r1
    explicit Serial1LogHandler(LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            Serial1LogHandler(9600, level, filters) {
    }

    explicit Serial1LogHandler(int baud, LogLevel level = LOG_LEVEL_INFO, LogCategoryFilters filters = {}) :
            StreamLogHandler(Serial1, level, filters) {
   d4498:	f002 ffb8 	bl	d740c <_Z22__fetch_global_Serial1v>
   d449c:	4669      	mov	r1, sp
   d449e:	4607      	mov	r7, r0
   d44a0:	a803      	add	r0, sp, #12
   d44a2:	f7ff ffbc 	bl	d441e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d44a6:	4625      	mov	r5, r4
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d44a8:	a903      	add	r1, sp, #12
   d44aa:	a806      	add	r0, sp, #24
   d44ac:	f7ff ffb7 	bl	d441e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
        filter_(level, filters) {
   d44b0:	4b16      	ldr	r3, [pc, #88]	; (d450c <_ZN18Serial1DebugOutputC1Ei8LogLevel+0x88>)
   d44b2:	f845 3b04 	str.w	r3, [r5], #4
   d44b6:	a906      	add	r1, sp, #24
   d44b8:	a809      	add	r0, sp, #36	; 0x24
   d44ba:	f7ff ffb0 	bl	d441e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d44be:	aa09      	add	r2, sp, #36	; 0x24
   d44c0:	4641      	mov	r1, r8
   d44c2:	4628      	mov	r0, r5
   d44c4:	f001 ff75 	bl	d63b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d44c8:	a809      	add	r0, sp, #36	; 0x24
   d44ca:	f7ff ff67 	bl	d439c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d44ce:	a806      	add	r0, sp, #24
   d44d0:	f7ff ff64 	bl	d439c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d44d4:	4b0e      	ldr	r3, [pc, #56]	; (d4510 <_ZN18Serial1DebugOutputC1Ei8LogLevel+0x8c>)
   d44d6:	6023      	str	r3, [r4, #0]
   d44d8:	6227      	str	r7, [r4, #32]
   d44da:	a803      	add	r0, sp, #12
   d44dc:	f7ff ff5e 	bl	d439c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d44e0:	4b0c      	ldr	r3, [pc, #48]	; (d4514 <_ZN18Serial1DebugOutputC1Ei8LogLevel+0x90>)
   d44e2:	6023      	str	r3, [r4, #0]
        Serial1.begin(baud);
   d44e4:	f002 ff92 	bl	d740c <_Z22__fetch_global_Serial1v>
   d44e8:	4631      	mov	r1, r6
   d44ea:	f002 ff85 	bl	d73f8 <_ZN11USARTSerial5beginEm>
        LogManager::instance()->addHandler(this);
   d44ee:	f001 fc09 	bl	d5d04 <_ZN5spark10LogManager8instanceEv>
   d44f2:	4621      	mov	r1, r4
   d44f4:	f001 fef0 	bl	d62d8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
};

class Serial1DebugOutput: public spark::Serial1LogHandler {
public:
    explicit Serial1DebugOutput(int baud = 9600, LogLevel level = LOG_LEVEL_ALL) :
        Serial1LogHandler(baud, level) {
   d44f8:	4668      	mov	r0, sp
   d44fa:	f7ff ff4f 	bl	d439c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d44fe:	4b06      	ldr	r3, [pc, #24]	; (d4518 <_ZN18Serial1DebugOutputC1Ei8LogLevel+0x94>)
   d4500:	6023      	str	r3, [r4, #0]
    }
   d4502:	4620      	mov	r0, r4
   d4504:	b00c      	add	sp, #48	; 0x30
   d4506:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d450a:	bf00      	nop
   d450c:	000d9a38 	.word	0x000d9a38
   d4510:	000d9ecc 	.word	0x000d9ecc
   d4514:	000d9a50 	.word	0x000d9a50
   d4518:	000d9a68 	.word	0x000d9a68

000d451c <_GLOBAL__sub_I_debugOutput>:
   d451c:	b538      	push	{r3, r4, r5, lr}
* v0.10 - Initial Release
*/

#include "MCP79410RK.h"                             // Real Time Clock

Serial1DebugOutput debugOutput(57600);          // default is 9600 and log everything
   d451e:	4c0e      	ldr	r4, [pc, #56]	; (d4558 <_GLOBAL__sub_I_debugOutput+0x3c>)
   d4520:	4d0e      	ldr	r5, [pc, #56]	; (d455c <_GLOBAL__sub_I_debugOutput+0x40>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4522:	f000 fc9f 	bl	d4e64 <HAL_Pin_Map>
   d4526:	2201      	movs	r2, #1
   d4528:	f44f 4161 	mov.w	r1, #57600	; 0xe100
   d452c:	4620      	mov	r0, r4
   d452e:	f7ff ffa9 	bl	d4484 <_ZN18Serial1DebugOutputC1Ei8LogLevel>
   d4532:	462a      	mov	r2, r5
   d4534:	490a      	ldr	r1, [pc, #40]	; (d4560 <_GLOBAL__sub_I_debugOutput+0x44>)
   d4536:	4620      	mov	r0, r4
   d4538:	f003 f97e 	bl	d7838 <__aeabi_atexit>
	/**
	 * @brief Constructor for MCP79410 objects.
	 *
	 * @param wire The I2C interface to use. Optional, default is Wire. On some devices you can use Wire1.
	 */
	MCP79410(TwoWire &wire = Wire);
   d453c:	f003 f930 	bl	d77a0 <_Z19__fetch_global_Wirev>
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
   d4540:	4c08      	ldr	r4, [pc, #32]	; (d4564 <_GLOBAL__sub_I_debugOutput+0x48>)
   d4542:	4601      	mov	r1, r0
   d4544:	4620      	mov	r0, r4
   d4546:	f000 f977 	bl	d4838 <_ZN8MCP79410C1ER7TwoWire>
   d454a:	462a      	mov	r2, r5
   d454c:	4620      	mov	r0, r4
   d454e:	4906      	ldr	r1, [pc, #24]	; (d4568 <_GLOBAL__sub_I_debugOutput+0x4c>)
      rtc.setAlarm(wakeInSeconds);
    }
*/
    rtc.loop();                                                         // keeps the clock up to date
  
}
   d4550:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
*/

#include "MCP79410RK.h"                             // Real Time Clock

Serial1DebugOutput debugOutput(57600);          // default is 9600 and log everything
MCP79410 rtc;                                       // Rickkas MCP79410 libarary
   d4554:	f003 b970 	b.w	d7838 <__aeabi_atexit>
   d4558:	2003e1bc 	.word	0x2003e1bc
   d455c:	2003e1b8 	.word	0x2003e1b8
   d4560:	000d4119 	.word	0x000d4119
   d4564:	2003e1e0 	.word	0x2003e1e0
   d4568:	000d4583 	.word	0x000d4583

000d456c <_ZNK12MCP79410SRAM6lengthEv>:
	virtual ~MCP79410SRAM();

	/**
	 * @brief Returns the length (64)
	 */
	virtual size_t length() const { return 64; };
   d456c:	2040      	movs	r0, #64	; 0x40
   d456e:	4770      	bx	lr

000d4570 <_ZNK12MCP79410SRAM10eraseValueEv>:
	/**
	 * @brief Erase erases to 0
	 *
	 * Note that on cold power up, the values are random, not zero!
	 */
	virtual uint8_t eraseValue() const { return 0; };
   d4570:	2000      	movs	r0, #0
   d4572:	4770      	bx	lr

000d4574 <_ZNK14MCP79410EEPROM6lengthEv>:
	bool protectedBlockRead(uint8_t *buf);

	/**
	 * @brief Returns the length (128)
	 */
	virtual size_t length() const { return 128; };
   d4574:	2080      	movs	r0, #128	; 0x80
   d4576:	4770      	bx	lr

000d4578 <_ZNK14MCP79410EEPROM10eraseValueEv>:

	/**
	 * @brief Erased value is 0xff.
	 */
	virtual uint8_t eraseValue() const { return 0xff; };
   d4578:	20ff      	movs	r0, #255	; 0xff
   d457a:	4770      	bx	lr

000d457c <_ZN12MCP79410SRAMD1Ev>:

}

MCP79410SRAM::~MCP79410SRAM() {

}
   d457c:	4770      	bx	lr

000d457e <_ZN14MCP79410EEPROMD1Ev>:

}

MCP79410EEPROM::~MCP79410EEPROM() {

}
   d457e:	4770      	bx	lr

000d4580 <_ZN12MCP79410TimeD1Ev>:
	clear();
}

MCP79410Time::~MCP79410Time() {

}
   d4580:	4770      	bx	lr

000d4582 <_ZN8MCP79410D1Ev>:
}


MCP79410::~MCP79410() {

}
   d4582:	4770      	bx	lr

000d4584 <_ZN12MCP79410TimeD0Ev>:

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d4584:	b510      	push	{r4, lr}

}
   d4586:	2114      	movs	r1, #20

MCP79410Time::MCP79410Time() {
	clear();
}

MCP79410Time::~MCP79410Time() {
   d4588:	4604      	mov	r4, r0

}
   d458a:	f003 f95a 	bl	d7842 <_ZdlPvj>
   d458e:	4620      	mov	r0, r4
   d4590:	bd10      	pop	{r4, pc}

000d4592 <_ZN12MCP79410SRAMD0Ev>:

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d4592:	b510      	push	{r4, lr}

}
   d4594:	2108      	movs	r1, #8

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410SRAM::~MCP79410SRAM() {
   d4596:	4604      	mov	r4, r0

}
   d4598:	f003 f953 	bl	d7842 <_ZdlPvj>
   d459c:	4620      	mov	r0, r4
   d459e:	bd10      	pop	{r4, pc}

000d45a0 <_ZN14MCP79410EEPROMD0Ev>:
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d45a0:	b510      	push	{r4, lr}

}
   d45a2:	2108      	movs	r1, #8
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {

}

MCP79410EEPROM::~MCP79410EEPROM() {
   d45a4:	4604      	mov	r4, r0

}
   d45a6:	f003 f94c 	bl	d7842 <_ZdlPvj>
   d45aa:	4620      	mov	r0, r4
   d45ac:	bd10      	pop	{r4, pc}

000d45ae <_ZN8MCP79410D0Ev>:
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d45ae:	b510      	push	{r4, lr}

}
   d45b0:	211c      	movs	r1, #28
MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}


MCP79410::~MCP79410() {
   d45b2:	4604      	mov	r4, r0

}
   d45b4:	f003 f945 	bl	d7842 <_ZdlPvj>
   d45b8:	4620      	mov	r0, r4
   d45ba:	bd10      	pop	{r4, pc}

000d45bc <_ZN18MCP79410MemoryBase5eraseEv>:

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d45bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d45c0:	6803      	ldr	r3, [r0, #0]
   d45c2:	68db      	ldr	r3, [r3, #12]

MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
   d45c4:	4605      	mov	r5, r0
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));
   d45c6:	4798      	blx	r3
   d45c8:	2210      	movs	r2, #16
   d45ca:	4601      	mov	r1, r0
   d45cc:	4668      	mov	r0, sp
   d45ce:	f003 fe67 	bl	d82a0 <memset>

	size_t len = length();
   d45d2:	682b      	ldr	r3, [r5, #0]
   d45d4:	4628      	mov	r0, r5
   d45d6:	689b      	ldr	r3, [r3, #8]
   d45d8:	4798      	blx	r3
	size_t offset = 0;
   d45da:	2400      	movs	r4, #0
bool MCP79410MemoryBase::erase() {
	bool bResult = false;
	uint8_t buf[16];
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
   d45dc:	4607      	mov	r7, r0
MCP79410MemoryBase::~MCP79410MemoryBase() {

}

bool MCP79410MemoryBase::erase() {
	bool bResult = false;
   d45de:	4620      	mov	r0, r4
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d45e0:	42bc      	cmp	r4, r7
   d45e2:	d20e      	bcs.n	d4602 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
		size_t count = sizeof(buf);
		if (count > (len - offset)) {
   d45e4:	1b3e      	subs	r6, r7, r4

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d45e6:	2e10      	cmp	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d45e8:	682b      	ldr	r3, [r5, #0]

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
		size_t count = sizeof(buf);
   d45ea:	bf28      	it	cs
   d45ec:	2610      	movcs	r6, #16
		if (count > (len - offset)) {
			count = len - offset;
		}
		bResult = writeData(offset, buf, count);
   d45ee:	f8d3 8018 	ldr.w	r8, [r3, #24]
   d45f2:	466a      	mov	r2, sp
   d45f4:	4633      	mov	r3, r6
   d45f6:	4621      	mov	r1, r4
   d45f8:	4628      	mov	r0, r5
   d45fa:	47c0      	blx	r8
		if (!bResult) {
   d45fc:	b108      	cbz	r0, d4602 <_ZN18MCP79410MemoryBase5eraseEv+0x46>
			break;
		}

		offset += count;
   d45fe:	4434      	add	r4, r6
	memset(buf, eraseValue(), sizeof(buf));

	size_t len = length();
	size_t offset = 0;

	while(offset < len) {
   d4600:	e7ee      	b.n	d45e0 <_ZN18MCP79410MemoryBase5eraseEv+0x24>

		offset += count;
	}

	return bResult;
}
   d4602:	b004      	add	sp, #16
   d4604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4608 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d4608:	6803      	ldr	r3, [r0, #0]
   d460a:	b2c9      	uxtb	r1, r1
   d460c:	689b      	ldr	r3, [r3, #8]
   d460e:	4718      	bx	r3

000d4610 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4610:	b40e      	push	{r1, r2, r3}
   d4612:	b500      	push	{lr}
   d4614:	b08c      	sub	sp, #48	; 0x30
   d4616:	aa0d      	add	r2, sp, #52	; 0x34
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4618:	2320      	movs	r3, #32
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d461a:	f852 1b04 	ldr.w	r1, [r2], #4
    va_list args;
    va_start(args, fmt);
   d461e:	9203      	str	r2, [sp, #12]

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4620:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
   d4624:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4626:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4628:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d462a:	aa04      	add	r2, sp, #16
   d462c:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d462e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4630:	f000 fd58 	bl	d50e4 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
   d4634:	b00c      	add	sp, #48	; 0x30
   d4636:	f85d eb04 	ldr.w	lr, [sp], #4
   d463a:	b003      	add	sp, #12
   d463c:	4770      	bx	lr

000d463e <_ZN12MCP79410Time5clearEv>:

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d463e:	2300      	movs	r3, #0
	rawMonth = 1;
   d4640:	2201      	movs	r2, #1

	return *this;
}

void MCP79410Time::clear() {
	rawYear = 0;
   d4642:	7283      	strb	r3, [r0, #10]
	rawMonth = 1;
   d4644:	72c2      	strb	r2, [r0, #11]
	rawDayOfMonth = 1;
   d4646:	7302      	strb	r2, [r0, #12]
	rawDayOfWeek = 1;
   d4648:	7342      	strb	r2, [r0, #13]
	rawHour = 0;
   d464a:	7383      	strb	r3, [r0, #14]
	rawMinute = 0;
   d464c:	73c3      	strb	r3, [r0, #15]
	rawSecond = 0;
   d464e:	7403      	strb	r3, [r0, #16]
	alarmMode = 0;
   d4650:	7443      	strb	r3, [r0, #17]
   d4652:	4770      	bx	lr

000d4654 <_ZN12MCP79410TimeC1Ev>:
	return (stat == 0);
}



MCP79410Time::MCP79410Time() {
   d4654:	2201      	movs	r2, #1
   d4656:	b508      	push	{r3, lr}
   d4658:	7142      	strb	r2, [r0, #5]
   d465a:	2202      	movs	r2, #2
   d465c:	7182      	strb	r2, [r0, #6]
   d465e:	2203      	movs	r2, #3
   d4660:	4b06      	ldr	r3, [pc, #24]	; (d467c <_ZN12MCP79410TimeC1Ev+0x28>)
   d4662:	71c2      	strb	r2, [r0, #7]
   d4664:	2204      	movs	r2, #4
   d4666:	6003      	str	r3, [r0, #0]
   d4668:	7202      	strb	r2, [r0, #8]
   d466a:	2300      	movs	r3, #0
   d466c:	2207      	movs	r2, #7
   d466e:	7103      	strb	r3, [r0, #4]
   d4670:	7242      	strb	r2, [r0, #9]
   d4672:	7443      	strb	r3, [r0, #17]
	clear();
   d4674:	f7ff ffe3 	bl	d463e <_ZN12MCP79410Time5clearEv>
}
   d4678:	bd08      	pop	{r3, pc}
   d467a:	bf00      	nop
   d467c:	000d9cd8 	.word	0x000d9cd8

000d4680 <_ZN12MCP79410Time8bcdToIntEh>:
	return String(buf);
}

// [static]
int MCP79410Time::bcdToInt(uint8_t value) {
	return ((value >> 4) & 0xf) * 10 + (value & 0xf);
   d4680:	0903      	lsrs	r3, r0, #4
}
   d4682:	220a      	movs	r2, #10
   d4684:	f000 000f 	and.w	r0, r0, #15
   d4688:	fb02 0003 	mla	r0, r2, r3, r0
   d468c:	4770      	bx	lr

000d468e <_ZNK12MCP79410Time7getYearEv>:
	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
}

int MCP79410Time::getYear() const {
   d468e:	b508      	push	{r3, lr}
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
   d4690:	7a80      	ldrb	r0, [r0, #10]
   d4692:	f7ff fff5 	bl	d4680 <_ZN12MCP79410Time8bcdToIntEh>
}
   d4696:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
   d469a:	bd08      	pop	{r3, pc}

000d469c <_ZNK12MCP79410Time8getMonthEv>:
void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
}

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
   d469c:	7ac0      	ldrb	r0, [r0, #11]
   d469e:	f000 001f 	and.w	r0, r0, #31
   d46a2:	f7ff bfed 	b.w	d4680 <_ZN12MCP79410Time8bcdToIntEh>

000d46a6 <_ZNK12MCP79410Time13getDayOfMonthEv>:
	rawMonth = intToBcd(value);
}


int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
   d46a6:	7b00      	ldrb	r0, [r0, #12]
   d46a8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
   d46ac:	f7ff bfe8 	b.w	d4680 <_ZN12MCP79410Time8bcdToIntEh>

000d46b0 <_ZNK12MCP79410Time7getHourEv>:
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
}


int MCP79410Time::getHour() const {
   d46b0:	b508      	push	{r3, lr}
	if (rawHour & 0x40) {
   d46b2:	7b81      	ldrb	r1, [r0, #14]
   d46b4:	064a      	lsls	r2, r1, #25
   d46b6:	d50d      	bpl.n	d46d4 <_ZNK12MCP79410Time7getHourEv+0x24>
		// Bit 6 = 1 (12 hour format)
		int hour12 = bcdToInt(rawHour & 0x1f);
   d46b8:	f001 001f 	and.w	r0, r1, #31
   d46bc:	f7ff ffe0 	bl	d4680 <_ZN12MCP79410Time8bcdToIntEh>

		if (rawHour & 0x20) {
   d46c0:	068b      	lsls	r3, r1, #26
   d46c2:	d503      	bpl.n	d46cc <_ZNK12MCP79410Time7getHourEv+0x1c>
			// Bit 5 = 1 (PM)
			if (hour12 == 12) {
   d46c4:	280c      	cmp	r0, #12
   d46c6:	d00b      	beq.n	d46e0 <_ZNK12MCP79410Time7getHourEv+0x30>
				// 12 PM = 12
				return 12;
			}
			else {
				return hour12 + 12;
   d46c8:	300c      	adds	r0, #12
   d46ca:	bd08      	pop	{r3, pc}
			}
		}
		else {
			// Bit 5 = 0 (AM)
			if (hour12 == 12) {
   d46cc:	280c      	cmp	r0, #12
   d46ce:	bf08      	it	eq
   d46d0:	2000      	moveq	r0, #0
   d46d2:	bd08      	pop	{r3, pc}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d46d4:	f001 003f 	and.w	r0, r1, #63	; 0x3f
	}
}
   d46d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		}

	}
	else {
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
   d46dc:	f7ff bfd0 	b.w	d4680 <_ZN12MCP79410Time8bcdToIntEh>
	}
}
   d46e0:	bd08      	pop	{r3, pc}

000d46e2 <_ZNK12MCP79410Time9getMinuteEv>:
}



int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
   d46e2:	7bc0      	ldrb	r0, [r0, #15]
   d46e4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d46e8:	f7ff bfca 	b.w	d4680 <_ZN12MCP79410Time8bcdToIntEh>

000d46ec <_ZNK12MCP79410Time9getSecondEv>:
}


int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
   d46ec:	7c00      	ldrb	r0, [r0, #16]
   d46ee:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   d46f2:	f7ff bfc5 	b.w	d4680 <_ZN12MCP79410Time8bcdToIntEh>

000d46f6 <_ZNK12MCP79410Time10toUnixTimeEv>:
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d46f6:	b510      	push	{r4, lr}
   d46f8:	b08a      	sub	sp, #40	; 0x28
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d46fa:	2224      	movs	r2, #36	; 0x24
   d46fc:	2100      	movs	r1, #0
	setHour(tm->tm_hour); // tm_hour is 0-23
	setMinute(tm->tm_min); // tm_min is 0-59
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
}

time_t MCP79410Time::toUnixTime() const {
   d46fe:	4604      	mov	r4, r0
	struct tm tm;
	memset(&tm, 0, sizeof(struct tm));
   d4700:	a801      	add	r0, sp, #4
   d4702:	f003 fdcd 	bl	d82a0 <memset>

	tm.tm_year = getYear() - 1900; // tm_year is years since 1900
   d4706:	4620      	mov	r0, r4
   d4708:	f7ff ffc1 	bl	d468e <_ZNK12MCP79410Time7getYearEv>
   d470c:	f2a0 706c 	subw	r0, r0, #1900	; 0x76c
   d4710:	9006      	str	r0, [sp, #24]
	tm.tm_mon = getMonth() - 1; // tm_mon is 0-11!
   d4712:	4620      	mov	r0, r4
   d4714:	f7ff ffc2 	bl	d469c <_ZNK12MCP79410Time8getMonthEv>
   d4718:	3801      	subs	r0, #1
   d471a:	9005      	str	r0, [sp, #20]
	tm.tm_mday = getDayOfMonth(); // 1-31
   d471c:	4620      	mov	r0, r4
   d471e:	f7ff ffc2 	bl	d46a6 <_ZNK12MCP79410Time13getDayOfMonthEv>
   d4722:	9004      	str	r0, [sp, #16]

	tm.tm_hour = getHour();
   d4724:	4620      	mov	r0, r4
   d4726:	f7ff ffc3 	bl	d46b0 <_ZNK12MCP79410Time7getHourEv>
   d472a:	9003      	str	r0, [sp, #12]
	tm.tm_min = getMinute();
   d472c:	4620      	mov	r0, r4
   d472e:	f7ff ffd8 	bl	d46e2 <_ZNK12MCP79410Time9getMinuteEv>
   d4732:	9002      	str	r0, [sp, #8]
	tm.tm_sec = getSecond();
   d4734:	4620      	mov	r0, r4
   d4736:	f7ff ffd9 	bl	d46ec <_ZNK12MCP79410Time9getSecondEv>
   d473a:	9001      	str	r0, [sp, #4]

	// time->tm_wday and time->tm_yday are ignored by mktime

	return mktime(&tm);
   d473c:	a801      	add	r0, sp, #4
   d473e:	f003 fe93 	bl	d8468 <mktime>
}
   d4742:	b00a      	add	sp, #40	; 0x28
   d4744:	bd10      	pop	{r4, pc}

000d4746 <_ZN12MCP79410Time8intToBcdEi>:
uint8_t MCP79410Time::intToBcd(int value) {
	uint8_t result;

	result = (uint8_t) (((value / 10) % 10) << 4);

	result |= (uint8_t) (value % 10);
   d4746:	220a      	movs	r2, #10
   d4748:	fb90 f3f2 	sdiv	r3, r0, r2
   d474c:	fb93 f1f2 	sdiv	r1, r3, r2
   d4750:	fb02 3111 	mls	r1, r2, r1, r3
   d4754:	fb02 0313 	mls	r3, r2, r3, r0
   d4758:	ea43 1001 	orr.w	r0, r3, r1, lsl #4

	return result;
}
   d475c:	b2c0      	uxtb	r0, r0
   d475e:	4770      	bx	lr

000d4760 <_ZN12MCP79410Time7setYearEi>:
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
	rawYear = intToBcd(value % 100);
   d4760:	2364      	movs	r3, #100	; 0x64
int MCP79410Time::getYear() const {
	// RTC stores time as BCD 0-99. Assume 2000, this won't work in the past 1900 and I don't expect it to still be used in 2100
	return bcdToInt(rawYear) + 2000;
}

void MCP79410Time::setYear(int value) {
   d4762:	b510      	push	{r4, lr}
   d4764:	4604      	mov	r4, r0
	rawYear = intToBcd(value % 100);
   d4766:	fb91 f0f3 	sdiv	r0, r1, r3
   d476a:	fb00 1013 	mls	r0, r0, r3, r1
   d476e:	f7ff ffea 	bl	d4746 <_ZN12MCP79410Time8intToBcdEi>
   d4772:	72a0      	strb	r0, [r4, #10]
   d4774:	bd10      	pop	{r4, pc}

000d4776 <_ZN12MCP79410Time8setMonthEi>:

int MCP79410Time::getMonth() const {
	return bcdToInt(rawMonth & 0x1f);
}

void MCP79410Time::setMonth(int value) {
   d4776:	b510      	push	{r4, lr}
   d4778:	4604      	mov	r4, r0
	rawMonth = intToBcd(value);
   d477a:	4608      	mov	r0, r1
   d477c:	f7ff ffe3 	bl	d4746 <_ZN12MCP79410Time8intToBcdEi>
   d4780:	72e0      	strb	r0, [r4, #11]
   d4782:	bd10      	pop	{r4, pc}

000d4784 <_ZN12MCP79410Time13setDayOfMonthEi>:

int MCP79410Time::getDayOfMonth() const {
	return bcdToInt(rawDayOfMonth & 0x3f);
}

void MCP79410Time::setDayOfMonth(int value) {
   d4784:	b510      	push	{r4, lr}
   d4786:	4604      	mov	r4, r0
	rawDayOfMonth &= ~0x3f;
	rawDayOfMonth |= intToBcd(value);
   d4788:	4608      	mov	r0, r1
   d478a:	f7ff ffdc 	bl	d4746 <_ZN12MCP79410Time8intToBcdEi>
   d478e:	7b23      	ldrb	r3, [r4, #12]
   d4790:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d4794:	4318      	orrs	r0, r3
   d4796:	7320      	strb	r0, [r4, #12]
   d4798:	bd10      	pop	{r4, pc}

000d479a <_ZN12MCP79410Time12setDayOfWeekEi>:
	// rawDayOfWeek has the day of week 1 - 7 in the low bits. However, it does not enforce a particular day of week scheme;
	// it just keeps rolling it as time increments.
	return bcdToInt(rawDayOfWeek & 0x7) - 1;
}

void MCP79410Time::setDayOfWeek(int value) {
   d479a:	b510      	push	{r4, lr}
   d479c:	4604      	mov	r4, r0
	rawDayOfWeek &= ~0x7;
	rawDayOfWeek |= intToBcd(value + 1);
   d479e:	1c48      	adds	r0, r1, #1
   d47a0:	f7ff ffd1 	bl	d4746 <_ZN12MCP79410Time8intToBcdEi>
   d47a4:	7b63      	ldrb	r3, [r4, #13]
   d47a6:	f023 0307 	bic.w	r3, r3, #7
   d47aa:	4318      	orrs	r0, r3
   d47ac:	7360      	strb	r0, [r4, #13]
   d47ae:	bd10      	pop	{r4, pc}

000d47b0 <_ZN12MCP79410Time7setHourEi>:
		// Bit 6 = 0 (24 hour format)
		return bcdToInt(rawHour & 0x3f);
	}
}

void MCP79410Time::setHour(int value) {
   d47b0:	b510      	push	{r4, lr}
   d47b2:	4604      	mov	r4, r0
	rawHour = intToBcd(value);
   d47b4:	4608      	mov	r0, r1
   d47b6:	f7ff ffc6 	bl	d4746 <_ZN12MCP79410Time8intToBcdEi>
   d47ba:	73a0      	strb	r0, [r4, #14]
   d47bc:	bd10      	pop	{r4, pc}

000d47be <_ZN12MCP79410Time9setMinuteEi>:

int MCP79410Time::getMinute() const {
	return bcdToInt(rawMinute & 0x7f);
}

void MCP79410Time::setMinute(int value) {
   d47be:	b510      	push	{r4, lr}
   d47c0:	4604      	mov	r4, r0
	rawMinute = intToBcd(value);
   d47c2:	4608      	mov	r0, r1
   d47c4:	f7ff ffbf 	bl	d4746 <_ZN12MCP79410Time8intToBcdEi>
   d47c8:	73e0      	strb	r0, [r4, #15]
   d47ca:	bd10      	pop	{r4, pc}

000d47cc <_ZN12MCP79410Time9setSecondEi>:
int MCP79410Time::getSecond() const {
	// High bit is ST (oscillator enabled) bit.
	return bcdToInt(rawSecond & 0x7f);
}

void MCP79410Time::setSecond(int value) {
   d47cc:	b510      	push	{r4, lr}
   d47ce:	4604      	mov	r4, r0
	rawSecond &= ~0x7f;
	rawSecond |= intToBcd(value);
   d47d0:	4608      	mov	r0, r1
   d47d2:	f7ff ffb8 	bl	d4746 <_ZN12MCP79410Time8intToBcdEi>
   d47d6:	7c23      	ldrb	r3, [r4, #16]
   d47d8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d47dc:	4318      	orrs	r0, r3
   d47de:	7420      	strb	r0, [r4, #16]
   d47e0:	bd10      	pop	{r4, pc}

000d47e2 <_ZN12MCP79410Time12fromUnixTimeEl>:
	rawSecond = 0;
	alarmMode = 0;
}


void MCP79410Time::fromUnixTime(time_t time) {
   d47e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d47e4:	4604      	mov	r4, r0
   d47e6:	a802      	add	r0, sp, #8
   d47e8:	f840 1d04 	str.w	r1, [r0, #-4]!
	struct tm *tm = gmtime(&time);
   d47ec:	f003 fb90 	bl	d7f10 <gmtime>
   d47f0:	4605      	mov	r5, r0

	// Technically tm_year is years since 1900 but we can't represent dates not in 2000 - 2099
	setYear(tm->tm_year);
   d47f2:	6941      	ldr	r1, [r0, #20]
   d47f4:	4620      	mov	r0, r4
   d47f6:	f7ff ffb3 	bl	d4760 <_ZN12MCP79410Time7setYearEi>

	// 0 <= tm_mon <= 11! We use the more conventional 1-12 for getMonth/setMonth
	setMonth(tm->tm_mon + 1);
   d47fa:	6929      	ldr	r1, [r5, #16]
   d47fc:	4620      	mov	r0, r4
   d47fe:	3101      	adds	r1, #1
   d4800:	f7ff ffb9 	bl	d4776 <_ZN12MCP79410Time8setMonthEi>

	setDayOfMonth(tm->tm_mday);
   d4804:	68e9      	ldr	r1, [r5, #12]
   d4806:	4620      	mov	r0, r4
   d4808:	f7ff ffbc 	bl	d4784 <_ZN12MCP79410Time13setDayOfMonthEi>

	setDayOfWeek(tm->tm_wday);
   d480c:	69a9      	ldr	r1, [r5, #24]
   d480e:	4620      	mov	r0, r4
   d4810:	f7ff ffc3 	bl	d479a <_ZN12MCP79410Time12setDayOfWeekEi>


	// days since Sunday – [0, 6]

	setHour(tm->tm_hour); // tm_hour is 0-23
   d4814:	68a9      	ldr	r1, [r5, #8]
   d4816:	4620      	mov	r0, r4
   d4818:	f7ff ffca 	bl	d47b0 <_ZN12MCP79410Time7setHourEi>
	setMinute(tm->tm_min); // tm_min is 0-59
   d481c:	6869      	ldr	r1, [r5, #4]
   d481e:	4620      	mov	r0, r4
   d4820:	f7ff ffcd 	bl	d47be <_ZN12MCP79410Time9setMinuteEi>
	setSecond(tm->tm_sec < 60 ? tm->tm_sec : 59); // tm_sec is 0-61, inclusive, because of leap seconds.
   d4824:	6829      	ldr	r1, [r5, #0]
   d4826:	293b      	cmp	r1, #59	; 0x3b
   d4828:	bfa8      	it	ge
   d482a:	213b      	movge	r1, #59	; 0x3b
   d482c:	4620      	mov	r0, r4
   d482e:	f7ff ffcd 	bl	d47cc <_ZN12MCP79410Time9setSecondEi>
}
   d4832:	b003      	add	sp, #12
   d4834:	bd30      	pop	{r4, r5, pc}
	...

000d4838 <_ZN8MCP79410C1ER7TwoWire>:

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d4838:	4a08      	ldr	r2, [pc, #32]	; (d485c <_ZN8MCP79410C1ER7TwoWire+0x24>)
   d483a:	6002      	str	r2, [r0, #0]
   d483c:	2200      	movs	r2, #0
   d483e:	7202      	strb	r2, [r0, #8]
   d4840:	7242      	strb	r2, [r0, #9]
   d4842:	2201      	movs	r2, #1
   d4844:	7282      	strb	r2, [r0, #10]
   d4846:	4603      	mov	r3, r0
   d4848:	2203      	movs	r2, #3
   d484a:	72c2      	strb	r2, [r0, #11]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d484c:	4a04      	ldr	r2, [pc, #16]	; (d4860 <_ZN8MCP79410C1ER7TwoWire+0x28>)

//
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {
   d484e:	6041      	str	r1, [r0, #4]
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d4850:	6118      	str	r0, [r3, #16]

//
//
//

MCP79410SRAM::MCP79410SRAM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d4852:	60c2      	str	r2, [r0, #12]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d4854:	4a03      	ldr	r2, [pc, #12]	; (d4864 <_ZN8MCP79410C1ER7TwoWire+0x2c>)
#include "MCP79410RK.h"

static Logger log("app.rtc");


MCP79410MemoryBase::MCP79410MemoryBase(MCP79410 *parent) : parent(parent) {
   d4856:	6198      	str	r0, [r3, #24]


//
//
//
MCP79410EEPROM::MCP79410EEPROM(MCP79410 *parent) : MCP79410MemoryBase(parent) {
   d4858:	6142      	str	r2, [r0, #20]
//
//

MCP79410::MCP79410(TwoWire &wire) : wire(wire), sramObj(this), eepromObj(this) {

}
   d485a:	4770      	bx	lr
   d485c:	000d9ce8 	.word	0x000d9ce8
   d4860:	000d9bb8 	.word	0x000d9bb8
   d4864:	000d9b94 	.word	0x000d9b94

000d4868 <_ZNK8MCP7941010deviceReadEhhPhj>:
	return deviceWriteRegisterByte(addr, value);
}



int MCP79410::deviceRead(uint8_t i2cAddr, uint8_t addr, uint8_t *buf, size_t bufLen) const {
   d4868:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d486c:	4605      	mov	r5, r0
   d486e:	460f      	mov	r7, r1
   d4870:	4691      	mov	r9, r2
   d4872:	469a      	mov	sl, r3
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d4874:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d4876:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4878:	429c      	cmp	r4, r3
   d487a:	d230      	bcs.n	d48de <_ZNK8MCP7941010deviceReadEhhPhj+0x76>
		wire.beginTransmission(i2cAddr);
   d487c:	4639      	mov	r1, r7
   d487e:	6868      	ldr	r0, [r5, #4]
   d4880:	f000 feac 	bl	d55dc <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d4884:	eb09 0104 	add.w	r1, r9, r4
   d4888:	6868      	ldr	r0, [r5, #4]
   d488a:	f7ff febd 	bl	d4608 <_ZN7TwoWire5writeEj>
		stat = wire.endTransmission(false);
   d488e:	2100      	movs	r1, #0
   d4890:	6868      	ldr	r0, [r5, #4]
   d4892:	f000 feaa 	bl	d55ea <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d4896:	4606      	mov	r6, r0
   d4898:	b9d8      	cbnz	r0, d48d2 <_ZNK8MCP7941010deviceReadEhhPhj+0x6a>
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d489a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d489c:	6868      	ldr	r0, [r5, #4]
		wire.beginTransmission(i2cAddr);
		wire.write(addr + offset);
		stat = wire.endTransmission(false);
		if (stat == 0) {
			// Maximum read is 32 because of the limitation of the Wire implementation
			size_t count = bufLen - offset;
   d489e:	1b1a      	subs	r2, r3, r4
				count = 32;
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
   d48a0:	2a20      	cmp	r2, #32
   d48a2:	f04f 0301 	mov.w	r3, #1
   d48a6:	bf28      	it	cs
   d48a8:	2220      	movcs	r2, #32
   d48aa:	4639      	mov	r1, r7
   d48ac:	f000 fe84 	bl	d55b8 <_ZN7TwoWire11requestFromEhjh>
   d48b0:	eb0a 0804 	add.w	r8, sl, r4
   d48b4:	4683      	mov	fp, r0
   d48b6:	4646      	mov	r6, r8
			for(size_t ii = 0; ii < count; ii++) {
   d48b8:	ebc8 0306 	rsb	r3, r8, r6
   d48bc:	459b      	cmp	fp, r3
   d48be:	d906      	bls.n	d48ce <_ZNK8MCP7941010deviceReadEhhPhj+0x66>
				buf[ii + offset] = wire.read();
   d48c0:	6868      	ldr	r0, [r5, #4]
   d48c2:	6803      	ldr	r3, [r0, #0]
   d48c4:	695b      	ldr	r3, [r3, #20]
   d48c6:	4798      	blx	r3
   d48c8:	f806 0b01 	strb.w	r0, [r6], #1
			}

			// log.trace("deviceRead addr=%u count=%u", addr + offset, count);

			count = wire.requestFrom(i2cAddr, count, (uint8_t) true);
			for(size_t ii = 0; ii < count; ii++) {
   d48cc:	e7f4      	b.n	d48b8 <_ZNK8MCP7941010deviceReadEhhPhj+0x50>
				buf[ii + offset] = wire.read();
			}
			offset += count;
   d48ce:	445c      	add	r4, fp
	// log.trace("deviceRead i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d48d0:	e7d1      	b.n	d4876 <_ZNK8MCP7941010deviceReadEhhPhj+0xe>
				buf[ii + offset] = wire.read();
			}
			offset += count;
		}
		else {
			log.info("deviceRead failed stat=%d", stat);
   d48d2:	4602      	mov	r2, r0
   d48d4:	4904      	ldr	r1, [pc, #16]	; (d48e8 <_ZNK8MCP7941010deviceReadEhhPhj+0x80>)
   d48d6:	4805      	ldr	r0, [pc, #20]	; (d48ec <_ZNK8MCP7941010deviceReadEhhPhj+0x84>)
   d48d8:	f7ff fe9a 	bl	d4610 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d48dc:	e000      	b.n	d48e0 <_ZNK8MCP7941010deviceReadEhhPhj+0x78>
   d48de:	2600      	movs	r6, #0
		}
	}
	return stat;
}
   d48e0:	4630      	mov	r0, r6
   d48e2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d48e6:	bf00      	nop
   d48e8:	000d9c32 	.word	0x000d9c32
   d48ec:	2003e1fc 	.word	0x2003e1fc

000d48f0 <_ZNK8MCP7941022deviceReadRegisterByteEh>:
	buf[6] = time.rawYear;

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
}

uint8_t MCP79410::deviceReadRegisterByte(uint8_t addr) const {
   d48f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	if (deviceRead(REG_I2C_ADDR, addr, buf, 1) == 0) {
   d48f2:	2301      	movs	r3, #1
   d48f4:	9300      	str	r3, [sp, #0]
   d48f6:	460a      	mov	r2, r1
   d48f8:	ab03      	add	r3, sp, #12
   d48fa:	216f      	movs	r1, #111	; 0x6f
   d48fc:	f7ff ffb4 	bl	d4868 <_ZNK8MCP7941010deviceReadEhhPhj>
   d4900:	b910      	cbnz	r0, d4908 <_ZNK8MCP7941022deviceReadRegisterByteEh+0x18>
		// log.trace("deviceReadRegisterByte addr=%02x value=%02x", addr, buf[0]);
		return buf[0];
   d4902:	f89d 000c 	ldrb.w	r0, [sp, #12]
   d4906:	e000      	b.n	d490a <_ZNK8MCP7941022deviceReadRegisterByteEh+0x1a>
	}
	else {
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
   d4908:	2000      	movs	r0, #0
	}
}
   d490a:	b005      	add	sp, #20
   d490c:	f85d fb04 	ldr.w	pc, [sp], #4

000d4910 <_ZNK8MCP7941020getOscillatorRunningEv>:

bool MCP79410::getPowerFail() const {
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_PWRFAIL) != 0;
}

bool MCP79410::getOscillatorRunning() const {
   d4910:	b508      	push	{r3, lr}
	return (deviceReadRegisterByte(REG_RTCWKDAY) & REG_RTCWKDAY_OSCRUN) != 0;
   d4912:	2103      	movs	r1, #3
   d4914:	f7ff ffec 	bl	d48f0 <_ZNK8MCP7941022deviceReadRegisterByteEh>
}
   d4918:	f3c0 1040 	ubfx	r0, r0, #5, #1
   d491c:	bd08      	pop	{r3, pc}

000d491e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>:
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d491e:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
   d4920:	461e      	mov	r6, r3
   d4922:	2b00      	cmp	r3, #0
   d4924:	bf0c      	ite	eq
   d4926:	2307      	moveq	r3, #7
   d4928:	2306      	movne	r3, #6
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d492a:	9300      	str	r3, [sp, #0]
	}
	return deviceWriteRegisterByte(REG_OSCTRIM, value) == 0;
}


int MCP79410::deviceReadTime(uint8_t addr, MCP79410Time &time, int timeMode) const {
   d492c:	4614      	mov	r4, r2
	uint8_t buf[8];
	int stat = -1;

	if (timeMode == TIME_MODE_RTC || timeMode == TIME_MODE_ALARM) {
		size_t numBytes = (timeMode == TIME_MODE_RTC) ? 7 : 6;
		stat = deviceRead(REG_I2C_ADDR, addr, buf, numBytes);
   d492e:	ab02      	add	r3, sp, #8
   d4930:	460a      	mov	r2, r1
   d4932:	216f      	movs	r1, #111	; 0x6f
   d4934:	f7ff ff98 	bl	d4868 <_ZNK8MCP7941010deviceReadEhhPhj>
		if (stat == 0) {
   d4938:	4605      	mov	r5, r0
   d493a:	b9d8      	cbnz	r0, d4974 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			time.rawSecond = buf[0];
   d493c:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d4940:	7423      	strb	r3, [r4, #16]
			time.rawMinute = buf[1];
   d4942:	f89d 3009 	ldrb.w	r3, [sp, #9]
   d4946:	73e3      	strb	r3, [r4, #15]
			time.rawHour = buf[2];
   d4948:	f89d 300a 	ldrb.w	r3, [sp, #10]
   d494c:	73a3      	strb	r3, [r4, #14]
			time.rawDayOfWeek = buf[3];
   d494e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d4952:	7363      	strb	r3, [r4, #13]
			time.rawDayOfMonth = buf[4];
   d4954:	f89d 300c 	ldrb.w	r3, [sp, #12]
   d4958:	7323      	strb	r3, [r4, #12]
			time.rawMonth = buf[5];
   d495a:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d495e:	72e3      	strb	r3, [r4, #11]
			if (timeMode == TIME_MODE_RTC) {
   d4960:	b91e      	cbnz	r6, d496a <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x4c>
				time.rawYear = buf[6];
   d4962:	f89d 300e 	ldrb.w	r3, [sp, #14]
   d4966:	72a3      	strb	r3, [r4, #10]
   d4968:	e004      	b.n	d4974 <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18+0x56>
			}
			else {
				time.rawYear = MCP79410Time::intToBcd(Time.year());
   d496a:	f002 fcd5 	bl	d7318 <_ZN9TimeClass4yearEv>
   d496e:	f7ff feea 	bl	d4746 <_ZN12MCP79410Time8intToBcdEi>
   d4972:	72a0      	strb	r0, [r4, #10]
			time.rawYear = MCP79410Time::intToBcd(Time.year());
		}
	}

	return stat;
}
   d4974:	4628      	mov	r0, r5
   d4976:	b004      	add	sp, #16
   d4978:	bd70      	pop	{r4, r5, r6, pc}

000d497a <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>:
	else {
		return 0;
	}
}

bool MCP79410::getRTCTime(MCP79410Time &time) const {
   d497a:	b538      	push	{r3, r4, r5, lr}
   d497c:	2300      	movs	r3, #0
   d497e:	460c      	mov	r4, r1
   d4980:	460a      	mov	r2, r1
   d4982:	4619      	mov	r1, r3
   d4984:	4605      	mov	r5, r0
   d4986:	f7ff ffca 	bl	d491e <_ZNK8MCP7941014deviceReadTimeEhR12MCP79410Timei.part.7.constprop.18>
	int stat = deviceReadTime(REG_DATE_TIME, time, TIME_MODE_RTC);
	if (stat == 0) {
   d498a:	b928      	cbnz	r0, d4998 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
		if (time.rawYear > 0 && getOscillatorRunning()) {
   d498c:	7aa3      	ldrb	r3, [r4, #10]
   d498e:	b11b      	cbz	r3, d4998 <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x1e>
   d4990:	4628      	mov	r0, r5
   d4992:	f7ff ffbd 	bl	d4910 <_ZNK8MCP7941020getOscillatorRunningEv>
   d4996:	b900      	cbnz	r0, d499a <_ZNK8MCP7941010getRTCTimeER12MCP79410Time+0x20>
			return true;
		}
		else {
			return false;
   d4998:	2000      	movs	r0, #0
		}
	}
	else {
		return false;
	}
}
   d499a:	bd38      	pop	{r3, r4, r5, pc}

000d499c <_ZNK8MCP7941010getRTCTimeEv>:

bool MCP79410::isRTCValid() const {
	return getRTCTime() != 0;
}

time_t MCP79410::getRTCTime() const {
   d499c:	b510      	push	{r4, lr}
   d499e:	b086      	sub	sp, #24
   d49a0:	4604      	mov	r4, r0
	MCP79410Time time;
   d49a2:	a801      	add	r0, sp, #4
   d49a4:	f7ff fe56 	bl	d4654 <_ZN12MCP79410TimeC1Ev>

	bool bResult = getRTCTime(time);
   d49a8:	a901      	add	r1, sp, #4
   d49aa:	4620      	mov	r0, r4
   d49ac:	f7ff ffe5 	bl	d497a <_ZNK8MCP7941010getRTCTimeER12MCP79410Time>
	if (bResult) {
   d49b0:	b110      	cbz	r0, d49b8 <_ZNK8MCP7941010getRTCTimeEv+0x1c>
		return time.toUnixTime();
   d49b2:	a801      	add	r0, sp, #4
   d49b4:	f7ff fe9f 	bl	d46f6 <_ZNK12MCP79410Time10toUnixTimeEv>
	}
	else {
		return 0;
	}
}
   d49b8:	b006      	add	sp, #24
   d49ba:	bd10      	pop	{r4, pc}

000d49bc <_ZN8MCP794105setupEv>:

MCP79410::~MCP79410() {

}

void MCP79410::setup() {
   d49bc:	b530      	push	{r4, r5, lr}
   d49be:	4604      	mov	r4, r0
   d49c0:	b085      	sub	sp, #20
	wire.begin();
   d49c2:	6840      	ldr	r0, [r0, #4]
   d49c4:	f000 fdd6 	bl	d5574 <_ZN7TwoWire5beginEv>

	if (!Time.isValid()) {
   d49c8:	f002 fc7e 	bl	d72c8 <_ZN9TimeClass7isValidEv>
   d49cc:	b9c0      	cbnz	r0, d4a00 <_ZN8MCP794105setupEv+0x44>
		if ((timeSyncMode & TIME_SYNC_RTC_TO_TIME) != 0) {
   d49ce:	7ae3      	ldrb	r3, [r4, #11]
   d49d0:	079b      	lsls	r3, r3, #30
   d49d2:	d515      	bpl.n	d4a00 <_ZN8MCP794105setupEv+0x44>
			time_t rtcTime = getRTCTime();
   d49d4:	4620      	mov	r0, r4
   d49d6:	f7ff ffe1 	bl	d499c <_ZNK8MCP7941010getRTCTimeEv>
			if (rtcTime != 0) {
   d49da:	4605      	mov	r5, r0
   d49dc:	b180      	cbz	r0, d4a00 <_ZN8MCP794105setupEv+0x44>
				Time.setTime(rtcTime);
   d49de:	f002 fbb2 	bl	d7146 <_ZN9TimeClass7setTimeEl>
				log.info("set Time from RTC %s", Time.format(rtcTime, TIME_FORMAT_DEFAULT).c_str());
   d49e2:	4b09      	ldr	r3, [pc, #36]	; (d4a08 <_ZN8MCP794105setupEv+0x4c>)
   d49e4:	4909      	ldr	r1, [pc, #36]	; (d4a0c <_ZN8MCP794105setupEv+0x50>)
   d49e6:	681b      	ldr	r3, [r3, #0]
   d49e8:	462a      	mov	r2, r5
   d49ea:	4668      	mov	r0, sp
   d49ec:	f002 fc3a 	bl	d7264 <_ZN9TimeClass6formatElPKc>
   d49f0:	4807      	ldr	r0, [pc, #28]	; (d4a10 <_ZN8MCP794105setupEv+0x54>)
   d49f2:	9a00      	ldr	r2, [sp, #0]
   d49f4:	4907      	ldr	r1, [pc, #28]	; (d4a14 <_ZN8MCP794105setupEv+0x58>)
   d49f6:	f7ff fe0b 	bl	d4610 <_ZNK5spark6Logger4infoEPKcz>
   d49fa:	4668      	mov	r0, sp
   d49fc:	f002 fac7 	bl	d6f8e <_ZN6StringD1Ev>
			}
		}
	}

	setupDone = true;
   d4a00:	2301      	movs	r3, #1
   d4a02:	7223      	strb	r3, [r4, #8]
}
   d4a04:	b005      	add	sp, #20
   d4a06:	bd30      	pop	{r4, r5, pc}
   d4a08:	2003e100 	.word	0x2003e100
   d4a0c:	2003e4a0 	.word	0x2003e4a0
   d4a10:	2003e1fc 	.word	0x2003e1fc
   d4a14:	000d9c4c 	.word	0x000d9c4c

000d4a18 <_ZN14MCP79410EEPROM8readDataEjPhj>:

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4a18:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d4a1c:	eb01 0803 	add.w	r8, r1, r3

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4a20:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d4a22:	6803      	ldr	r3, [r0, #0]
   d4a24:	689b      	ldr	r3, [r3, #8]

	return (stat == 0);
}


bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4a26:	4604      	mov	r4, r0
   d4a28:	460d      	mov	r5, r1
   d4a2a:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d4a2c:	4798      	blx	r3
   d4a2e:	4580      	cmp	r8, r0
   d4a30:	d80a      	bhi.n	d4a48 <_ZN14MCP79410EEPROM8readDataEjPhj+0x30>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);
   d4a32:	9600      	str	r6, [sp, #0]
   d4a34:	463b      	mov	r3, r7
   d4a36:	b2ea      	uxtb	r2, r5
   d4a38:	2157      	movs	r1, #87	; 0x57
   d4a3a:	6860      	ldr	r0, [r4, #4]
   d4a3c:	f7ff ff14 	bl	d4868 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d4a40:	fab0 f080 	clz	r0, r0
   d4a44:	0940      	lsrs	r0, r0, #5
   d4a46:	e000      	b.n	d4a4a <_ZN14MCP79410EEPROM8readDataEjPhj+0x32>

bool MCP79410EEPROM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d4a48:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}
   d4a4a:	b002      	add	sp, #8
   d4a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4a50 <_ZN12MCP79410SRAM8readDataEjPhj>:

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4a50:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d4a54:	eb01 0803 	add.w	r8, r1, r3

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4a58:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d4a5a:	6803      	ldr	r3, [r0, #0]
   d4a5c:	689b      	ldr	r3, [r3, #8]

MCP79410SRAM::~MCP79410SRAM() {

}

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {
   d4a5e:	4605      	mov	r5, r0
   d4a60:	460c      	mov	r4, r1
   d4a62:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d4a64:	4798      	blx	r3
   d4a66:	4580      	cmp	r8, r0
   d4a68:	d80c      	bhi.n	d4a84 <_ZN12MCP79410SRAM8readDataEjPhj+0x34>
		// Attempt to read past end is an error and nothing will be read
		return false;
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d4a6a:	f104 0220 	add.w	r2, r4, #32
   d4a6e:	9600      	str	r6, [sp, #0]
   d4a70:	463b      	mov	r3, r7
   d4a72:	b2d2      	uxtb	r2, r2
   d4a74:	216f      	movs	r1, #111	; 0x6f
   d4a76:	6868      	ldr	r0, [r5, #4]
   d4a78:	f7ff fef6 	bl	d4868 <_ZNK8MCP7941010deviceReadEhhPhj>

	return (stat == 0);
   d4a7c:	fab0 f080 	clz	r0, r0
   d4a80:	0940      	lsrs	r0, r0, #5
   d4a82:	e000      	b.n	d4a86 <_ZN12MCP79410SRAM8readDataEjPhj+0x36>

bool MCP79410SRAM::readData(size_t addr, uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to read past end is an error and nothing will be read
		return false;
   d4a84:	2000      	movs	r0, #0
	}

	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d4a86:	b002      	add	sp, #8
   d4a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4a8c <_ZN8MCP7941011deviceWriteEhhPKhj>:
		}
	}
	return stat;
}

int MCP79410::deviceWrite(uint8_t i2cAddr, uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d4a8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4a90:	4607      	mov	r7, r0
   d4a92:	4689      	mov	r9, r1
   d4a94:	4692      	mov	sl, r2
   d4a96:	469b      	mov	fp, r3
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;
   d4a98:	2400      	movs	r4, #0

	while(offset < bufLen) {
   d4a9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4a9c:	429c      	cmp	r4, r3
   d4a9e:	d228      	bcs.n	d4af2 <_ZN8MCP7941011deviceWriteEhhPKhj+0x66>
		wire.beginTransmission(i2cAddr);
   d4aa0:	4649      	mov	r1, r9
   d4aa2:	6878      	ldr	r0, [r7, #4]
   d4aa4:	f000 fd9a 	bl	d55dc <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d4aa8:	eb0a 0104 	add.w	r1, sl, r4
   d4aac:	6878      	ldr	r0, [r7, #4]
   d4aae:	f7ff fdab 	bl	d4608 <_ZN7TwoWire5writeEj>

		// Maximum write is 31, not 32, because of the address byte
		size_t count = bufLen - offset;
   d4ab2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4ab4:	1b1e      	subs	r6, r3, r4
   d4ab6:	2e1f      	cmp	r6, #31
   d4ab8:	eb0b 0804 	add.w	r8, fp, r4
   d4abc:	bf28      	it	cs
   d4abe:	261f      	movcs	r6, #31
   d4ac0:	4645      	mov	r5, r8
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d4ac2:	6878      	ldr	r0, [r7, #4]
   d4ac4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4ac8:	6802      	ldr	r2, [r0, #0]
   d4aca:	6892      	ldr	r2, [r2, #8]
   d4acc:	4790      	blx	r2
			count = 31;
		}

		// log.trace("deviceWrite addr=%u count=%u", addr + offset, count);

		for(size_t ii = 0; ii < count; ii++) {
   d4ace:	ebc8 0205 	rsb	r2, r8, r5
   d4ad2:	42b2      	cmp	r2, r6
   d4ad4:	d3f5      	bcc.n	d4ac2 <_ZN8MCP7941011deviceWriteEhhPKhj+0x36>
			wire.write(buf[ii + offset]);
		}

		stat = wire.endTransmission(true);
   d4ad6:	2101      	movs	r1, #1
   d4ad8:	6878      	ldr	r0, [r7, #4]
   d4ada:	f000 fd86 	bl	d55ea <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d4ade:	4605      	mov	r5, r0
   d4ae0:	b128      	cbz	r0, d4aee <_ZN8MCP7941011deviceWriteEhhPKhj+0x62>
			log.info("deviceWrite failed stat=%d", stat);
   d4ae2:	4602      	mov	r2, r0
   d4ae4:	4905      	ldr	r1, [pc, #20]	; (d4afc <_ZN8MCP7941011deviceWriteEhhPKhj+0x70>)
   d4ae6:	4806      	ldr	r0, [pc, #24]	; (d4b00 <_ZN8MCP7941011deviceWriteEhhPKhj+0x74>)
   d4ae8:	f7ff fd92 	bl	d4610 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d4aec:	e002      	b.n	d4af4 <_ZN8MCP7941011deviceWriteEhhPKhj+0x68>
		}

		offset += count;
   d4aee:	4434      	add	r4, r6
	// log.trace("deviceWrite i2cAddr=%02x addr=%02x bufLen=%u", i2cAddr, addr, bufLen);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d4af0:	e7d3      	b.n	d4a9a <_ZN8MCP7941011deviceWriteEhhPKhj+0xe>
   d4af2:	2500      	movs	r5, #0

		offset += count;
	}

	return stat;
}
   d4af4:	4628      	mov	r0, r5
   d4af6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4afa:	bf00      	nop
   d4afc:	000d9c61 	.word	0x000d9c61
   d4b00:	2003e1fc 	.word	0x2003e1fc

000d4b04 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>:
	}

	return stat;
}

int MCP79410::deviceWriteRTCTime(uint8_t addr, const MCP79410Time &time) {
   d4b04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[7];

	buf[0] = time.rawSecond;
   d4b06:	7c13      	ldrb	r3, [r2, #16]
   d4b08:	f88d 3008 	strb.w	r3, [sp, #8]
	buf[1] = time.rawMinute;
   d4b0c:	7bd3      	ldrb	r3, [r2, #15]
   d4b0e:	f88d 3009 	strb.w	r3, [sp, #9]
	buf[2] = time.rawHour;
   d4b12:	7b93      	ldrb	r3, [r2, #14]
   d4b14:	f88d 300a 	strb.w	r3, [sp, #10]
	buf[3] = time.rawDayOfWeek;
   d4b18:	7b53      	ldrb	r3, [r2, #13]
   d4b1a:	f88d 300b 	strb.w	r3, [sp, #11]
	buf[4] = time.rawDayOfMonth;
   d4b1e:	7b13      	ldrb	r3, [r2, #12]
   d4b20:	f88d 300c 	strb.w	r3, [sp, #12]
	buf[5] = time.rawMonth;
   d4b24:	7ad3      	ldrb	r3, [r2, #11]
   d4b26:	f88d 300d 	strb.w	r3, [sp, #13]
	buf[6] = time.rawYear;
   d4b2a:	7a93      	ldrb	r3, [r2, #10]
   d4b2c:	f88d 300e 	strb.w	r3, [sp, #14]

	return deviceWrite(REG_I2C_ADDR, addr, buf, sizeof(buf));
   d4b30:	2307      	movs	r3, #7
   d4b32:	9300      	str	r3, [sp, #0]
   d4b34:	460a      	mov	r2, r1
   d4b36:	ab02      	add	r3, sp, #8
   d4b38:	216f      	movs	r1, #111	; 0x6f
   d4b3a:	f7ff ffa7 	bl	d4a8c <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d4b3e:	b005      	add	sp, #20
   d4b40:	f85d fb04 	ldr.w	pc, [sp], #4

000d4b44 <_ZN8MCP7941010setRTCTimeEl>:
		log.info("cloud time not valid");
	}
	return bResult;
}

bool MCP79410::setRTCTime(time_t unixTime) {
   d4b44:	b510      	push	{r4, lr}
   d4b46:	b086      	sub	sp, #24
   d4b48:	4604      	mov	r4, r0
	MCP79410Time time;
   d4b4a:	a801      	add	r0, sp, #4
   d4b4c:	f7ff fd82 	bl	d4654 <_ZN12MCP79410TimeC1Ev>

	time.fromUnixTime(unixTime);
   d4b50:	a801      	add	r0, sp, #4
   d4b52:	f7ff fe46 	bl	d47e2 <_ZN12MCP79410Time12fromUnixTimeEl>

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d4b56:	f89d 3014 	ldrb.w	r3, [sp, #20]

	// Default is to enable the battery
	if (batteryEnable) {
   d4b5a:	7aa2      	ldrb	r2, [r4, #10]
	MCP79410Time time;

	time.fromUnixTime(unixTime);

	// Set the oscillator start bit
	time.rawSecond |= REG_DATE_RTCSEC_ST;
   d4b5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d4b60:	f88d 3014 	strb.w	r3, [sp, #20]
   d4b64:	f89d 3011 	ldrb.w	r3, [sp, #17]

	// Default is to enable the battery
	if (batteryEnable) {
   d4b68:	b112      	cbz	r2, d4b70 <_ZN8MCP7941010setRTCTimeEl+0x2c>
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
   d4b6a:	f043 0308 	orr.w	r3, r3, #8
   d4b6e:	e001      	b.n	d4b74 <_ZN8MCP7941010setRTCTimeEl+0x30>
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d4b70:	f023 0308 	bic.w	r3, r3, #8
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d4b74:	aa01      	add	r2, sp, #4
   d4b76:	2100      	movs	r1, #0
   d4b78:	4620      	mov	r0, r4
	// Default is to enable the battery
	if (batteryEnable) {
		time.rawDayOfWeek |= REG_RTCWKDAY_VBATEN;
	}
	else {
		time.rawDayOfWeek &= ~REG_RTCWKDAY_VBATEN;
   d4b7a:	f88d 3011 	strb.w	r3, [sp, #17]
	}

	return deviceWriteRTCTime(REG_DATE_TIME, time) == 0;
   d4b7e:	f7ff ffc1 	bl	d4b04 <_ZN8MCP7941018deviceWriteRTCTimeEhRK12MCP79410Time>
}
   d4b82:	fab0 f080 	clz	r0, r0
   d4b86:	0940      	lsrs	r0, r0, #5
   d4b88:	b006      	add	sp, #24
   d4b8a:	bd10      	pop	{r4, pc}

000d4b8c <_ZN8MCP7941015setRTCFromCloudEv>:
			}
		}
	}
}

bool MCP79410::setRTCFromCloud() {
   d4b8c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d4b8e:	4606      	mov	r6, r0
	bool bResult = false;

	if (Time.isValid()) {
   d4b90:	f002 fb9a 	bl	d72c8 <_ZN9TimeClass7isValidEv>
   d4b94:	4604      	mov	r4, r0
   d4b96:	b1b8      	cbz	r0, d4bc8 <_ZN8MCP7941015setRTCFromCloudEv+0x3c>
		time_t now = Time.now();
   d4b98:	f002 fbb7 	bl	d730a <_ZN9TimeClass3nowEv>
   d4b9c:	4605      	mov	r5, r0
		bResult = setRTCTime(now);
   d4b9e:	4601      	mov	r1, r0
   d4ba0:	4630      	mov	r0, r6
   d4ba2:	f7ff ffcf 	bl	d4b44 <_ZN8MCP7941010setRTCTimeEl>

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d4ba6:	4b0c      	ldr	r3, [pc, #48]	; (d4bd8 <_ZN8MCP7941015setRTCFromCloudEv+0x4c>)
   d4ba8:	490c      	ldr	r1, [pc, #48]	; (d4bdc <_ZN8MCP7941015setRTCFromCloudEv+0x50>)
   d4baa:	681b      	ldr	r3, [r3, #0]
   d4bac:	462a      	mov	r2, r5
bool MCP79410::setRTCFromCloud() {
	bool bResult = false;

	if (Time.isValid()) {
		time_t now = Time.now();
		bResult = setRTCTime(now);
   d4bae:	4604      	mov	r4, r0

		log.info("set RTC from cloud %s", Time.format(now, TIME_FORMAT_DEFAULT).c_str());
   d4bb0:	4668      	mov	r0, sp
   d4bb2:	f002 fb57 	bl	d7264 <_ZN9TimeClass6formatElPKc>
   d4bb6:	9a00      	ldr	r2, [sp, #0]
   d4bb8:	4909      	ldr	r1, [pc, #36]	; (d4be0 <_ZN8MCP7941015setRTCFromCloudEv+0x54>)
   d4bba:	480a      	ldr	r0, [pc, #40]	; (d4be4 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d4bbc:	f7ff fd28 	bl	d4610 <_ZNK5spark6Logger4infoEPKcz>
   d4bc0:	4668      	mov	r0, sp
   d4bc2:	f002 f9e4 	bl	d6f8e <_ZN6StringD1Ev>
   d4bc6:	e003      	b.n	d4bd0 <_ZN8MCP7941015setRTCFromCloudEv+0x44>
	}
	else {
		log.info("cloud time not valid");
   d4bc8:	4907      	ldr	r1, [pc, #28]	; (d4be8 <_ZN8MCP7941015setRTCFromCloudEv+0x5c>)
   d4bca:	4806      	ldr	r0, [pc, #24]	; (d4be4 <_ZN8MCP7941015setRTCFromCloudEv+0x58>)
   d4bcc:	f7ff fd20 	bl	d4610 <_ZNK5spark6Logger4infoEPKcz>
	}
	return bResult;
}
   d4bd0:	4620      	mov	r0, r4
   d4bd2:	b004      	add	sp, #16
   d4bd4:	bd70      	pop	{r4, r5, r6, pc}
   d4bd6:	bf00      	nop
   d4bd8:	2003e100 	.word	0x2003e100
   d4bdc:	2003e4a0 	.word	0x2003e4a0
   d4be0:	000d9c7c 	.word	0x000d9c7c
   d4be4:	2003e1fc 	.word	0x2003e1fc
   d4be8:	000d9c92 	.word	0x000d9c92

000d4bec <_ZN8MCP794104loopEv>:
	}

	setupDone = true;
}

void MCP79410::loop() {
   d4bec:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (!timeSet) {
   d4bee:	7a45      	ldrb	r5, [r0, #9]
	}

	setupDone = true;
}

void MCP79410::loop() {
   d4bf0:	4604      	mov	r4, r0
	if (!timeSet) {
   d4bf2:	b98d      	cbnz	r5, d4c18 <_ZN8MCP794104loopEv+0x2c>
		// Time has not been synchronized from the cloud
		if (Time.isValid()) {
   d4bf4:	f002 fb68 	bl	d72c8 <_ZN9TimeClass7isValidEv>
   d4bf8:	b170      	cbz	r0, d4c18 <_ZN8MCP794104loopEv+0x2c>
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d4bfa:	a802      	add	r0, sp, #8
        return spark_sync_time_last(&tm, nullptr);
   d4bfc:	4629      	mov	r1, r5
        return timeSyncedLast(dummy);
    }

    system_tick_t timeSyncedLast(time_t& tm)
    {
        tm = 0;
   d4bfe:	f840 5d04 	str.w	r5, [r0, #-4]!
        return spark_sync_time_last(&tm, nullptr);
   d4c02:	f000 fae5 	bl	d51d0 <spark_sync_time_last>
			// Also check timeSyncedLast, because if we set Time from RTC, then Time will
			// be valid, but not synchronized yet
			unsigned long lastSync = Particle.timeSyncedLast();
			if (lastSync != 0) {
   d4c06:	b138      	cbz	r0, d4c18 <_ZN8MCP794104loopEv+0x2c>
				// Time is valid and synchronized
				if ((timeSyncMode & TIME_SYNC_CLOUD_TO_RTC) != 0) {
   d4c08:	7ae3      	ldrb	r3, [r4, #11]
   d4c0a:	07db      	lsls	r3, r3, #31
   d4c0c:	d502      	bpl.n	d4c14 <_ZN8MCP794104loopEv+0x28>
					setRTCFromCloud();
   d4c0e:	4620      	mov	r0, r4
   d4c10:	f7ff ffbc 	bl	d4b8c <_ZN8MCP7941015setRTCFromCloudEv>
				}
				timeSet = true;
   d4c14:	2301      	movs	r3, #1
   d4c16:	7263      	strb	r3, [r4, #9]
			}
		}
	}
}
   d4c18:	b003      	add	sp, #12
   d4c1a:	bd30      	pop	{r4, r5, pc}

000d4c1c <_ZN8MCP7941023deviceWriteRegisterByteEhh>:
		// log.trace("deviceReadRegisterByte addr=%02x failed", addr);
		return 0;
	}
}

int MCP79410::deviceWriteRegisterByte(uint8_t addr, uint8_t value) {
   d4c1c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t buf[1];

	// log.trace("deviceWriteRegisterByte addr=%02x value=%02x", addr, value);

	buf[0] = value;
   d4c1e:	ab04      	add	r3, sp, #16
   d4c20:	f803 2d04 	strb.w	r2, [r3, #-4]!

	return deviceWrite(REG_I2C_ADDR, addr, buf, 1);
   d4c24:	2201      	movs	r2, #1
   d4c26:	9200      	str	r2, [sp, #0]
   d4c28:	460a      	mov	r2, r1
   d4c2a:	216f      	movs	r1, #111	; 0x6f
   d4c2c:	f7ff ff2e 	bl	d4a8c <_ZN8MCP7941011deviceWriteEhhPKhj>
}
   d4c30:	b005      	add	sp, #20
   d4c32:	f85d fb04 	ldr.w	pc, [sp], #4

000d4c36 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>:
		return deviceWriteRegisterByteMask(addr, ~value, 0);
	}
}


int MCP79410::deviceWriteRegisterByteMask(uint8_t addr, uint8_t andMask, uint8_t orMask) {
   d4c36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4c38:	4614      	mov	r4, r2
   d4c3a:	4605      	mov	r5, r0
   d4c3c:	460e      	mov	r6, r1
   d4c3e:	461f      	mov	r7, r3
	uint8_t value = deviceReadRegisterByte(addr);
   d4c40:	f7ff fe56 	bl	d48f0 <_ZNK8MCP7941022deviceReadRegisterByteEh>

	value &= andMask;
   d4c44:	4020      	ands	r0, r4
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d4c46:	ea40 0207 	orr.w	r2, r0, r7
   d4c4a:	4631      	mov	r1, r6
   d4c4c:	4628      	mov	r0, r5
}
   d4c4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	value &= andMask;
	value |= orMask;

	// log.trace("deviceWriteRegisterByteMask addr=%02x value=%02x andMask=%02x orMask=%02x", addr, value, andMask, orMask);

	return deviceWriteRegisterByte(addr, value);
   d4c52:	f7ff bfe3 	b.w	d4c1c <_ZN8MCP7941023deviceWriteRegisterByteEhh>

000d4c56 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>:

int MCP79410::deviceWriteRegisterFlag(uint8_t addr, uint8_t value, bool set) {

	// log.trace("deviceWriteRegisterFlag addr=%02x value=%02x set=%d", addr, value, set);

	if (set) {
   d4c56:	b113      	cbz	r3, d4c5e <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0x8>
		return deviceWriteRegisterByteMask(addr, 0xff, value);
   d4c58:	4613      	mov	r3, r2
   d4c5a:	22ff      	movs	r2, #255	; 0xff
   d4c5c:	e001      	b.n	d4c62 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb+0xc>
	}
	else {
		return deviceWriteRegisterByteMask(addr, ~value, 0);
   d4c5e:	43d2      	mvns	r2, r2
   d4c60:	b2d2      	uxtb	r2, r2
   d4c62:	f7ff bfe8 	b.w	d4c36 <_ZN8MCP7941027deviceWriteRegisterByteMaskEhhh>

000d4c66 <_ZN8MCP7941010clearAlarmEi>:
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
   d4c66:	2901      	cmp	r1, #1
		return true;
	}
}


bool MCP79410::clearAlarm(int alarmNum) {
   d4c68:	b508      	push	{r3, lr}
	if (alarmNum < 0 || alarmNum > 1) {
   d4c6a:	d80c      	bhi.n	d4c86 <_ZN8MCP7941010clearAlarmEi+0x20>
	 *
	 * @param alarmNum Default is 0 if this parameter is omitted. Otherwise, must be 0 or 1.
	 *
	 * To enable an alarm, use setAlarm(). To disable an alarm, use clearAlarm().
	 */
	uint8_t getAlarmEnableBit(int alarmNum) { return (alarmNum == 0) ? REG_CONTROL_ALM0EN : REG_CONTROL_ALM1EN; };
   d4c6c:	2900      	cmp	r1, #0
		// Invalid alarmNum, must be 0 or 1
		return false;
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
   d4c6e:	f04f 0300 	mov.w	r3, #0
   d4c72:	bf0c      	ite	eq
   d4c74:	2210      	moveq	r2, #16
   d4c76:	2220      	movne	r2, #32
   d4c78:	2107      	movs	r1, #7
   d4c7a:	f7ff ffec 	bl	d4c56 <_ZN8MCP7941023deviceWriteRegisterFlagEhhb>
   d4c7e:	fab0 f080 	clz	r0, r0
   d4c82:	0940      	lsrs	r0, r0, #5
   d4c84:	bd08      	pop	{r3, pc}


bool MCP79410::clearAlarm(int alarmNum) {
	if (alarmNum < 0 || alarmNum > 1) {
		// Invalid alarmNum, must be 0 or 1
		return false;
   d4c86:	2000      	movs	r0, #0
	}

	return deviceWriteRegisterFlag(REG_CONTROL, getAlarmEnableBit(alarmNum), false) == 0;
}
   d4c88:	bd08      	pop	{r3, pc}

000d4c8a <_ZN12MCP79410SRAM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d4c8a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d4c8e:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d4c92:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d4c94:	6803      	ldr	r3, [r0, #0]
   d4c96:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d4c98:	4605      	mov	r5, r0
   d4c9a:	460c      	mov	r4, r1
   d4c9c:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d4c9e:	4798      	blx	r3
   d4ca0:	4580      	cmp	r8, r0
   d4ca2:	d80c      	bhi.n	d4cbe <_ZN12MCP79410SRAM9writeDataEjPKhj+0x34>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);
   d4ca4:	f104 0220 	add.w	r2, r4, #32
   d4ca8:	9600      	str	r6, [sp, #0]
   d4caa:	463b      	mov	r3, r7
   d4cac:	b2d2      	uxtb	r2, r2
   d4cae:	216f      	movs	r1, #111	; 0x6f
   d4cb0:	6868      	ldr	r0, [r5, #4]
   d4cb2:	f7ff feeb 	bl	d4a8c <_ZN8MCP7941011deviceWriteEhhPKhj>

	return (stat == 0);
   d4cb6:	fab0 f080 	clz	r0, r0
   d4cba:	0940      	lsrs	r0, r0, #5
   d4cbc:	e000      	b.n	d4cc0 <_ZN12MCP79410SRAM9writeDataEjPKhj+0x36>

bool MCP79410SRAM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d4cbe:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWrite(MCP79410::REG_I2C_ADDR, MCP79410::REG_SRAM + addr, data, dataLen);

	return (stat == 0);
}
   d4cc0:	b002      	add	sp, #8
   d4cc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4cc6 <_ZN8MCP7941013waitForEEPROMEv>:
	}

	return stat;
}

void MCP79410::waitForEEPROM() {
   d4cc6:	b538      	push	{r3, r4, r5, lr}
   d4cc8:	4605      	mov	r5, r0
   d4cca:	2432      	movs	r4, #50	; 0x32
	for(size_t tries = 0; tries < 50; tries++) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d4ccc:	2157      	movs	r1, #87	; 0x57
   d4cce:	6868      	ldr	r0, [r5, #4]
   d4cd0:	f000 fc84 	bl	d55dc <_ZN7TwoWire17beginTransmissionEh>
		int stat = wire.endTransmission(true);
   d4cd4:	2101      	movs	r1, #1
   d4cd6:	6868      	ldr	r0, [r5, #4]
   d4cd8:	f000 fc87 	bl	d55ea <_ZN7TwoWire15endTransmissionEh>
		if (stat == 0) {
   d4cdc:	b108      	cbz	r0, d4ce2 <_ZN8MCP7941013waitForEEPROMEv+0x1c>

	return stat;
}

void MCP79410::waitForEEPROM() {
	for(size_t tries = 0; tries < 50; tries++) {
   d4cde:	3c01      	subs	r4, #1
   d4ce0:	d1f4      	bne.n	d4ccc <_ZN8MCP7941013waitForEEPROMEv+0x6>
   d4ce2:	bd38      	pop	{r3, r4, r5, pc}

000d4ce4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>:
	}

	return stat;
}

int MCP79410::deviceWriteEEPROM(uint8_t addr, const uint8_t *buf, size_t bufLen) {
   d4ce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4ce8:	4605      	mov	r5, r0
   d4cea:	18d7      	adds	r7, r2, r3
   d4cec:	4614      	mov	r4, r2
	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
		wire.beginTransmission(EEPROM_I2C_ADDR);
		wire.write(addr + offset);
   d4cee:	ebc2 0801 	rsb	r8, r2, r1
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d4cf2:	42bc      	cmp	r4, r7
   d4cf4:	d01e      	beq.n	d4d34 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x50>
		wire.beginTransmission(EEPROM_I2C_ADDR);
   d4cf6:	2157      	movs	r1, #87	; 0x57
   d4cf8:	6868      	ldr	r0, [r5, #4]
   d4cfa:	f000 fc6f 	bl	d55dc <_ZN7TwoWire17beginTransmissionEh>
		wire.write(addr + offset);
   d4cfe:	eb08 0104 	add.w	r1, r8, r4
   d4d02:	6868      	ldr	r0, [r5, #4]
   d4d04:	f7ff fc80 	bl	d4608 <_ZN7TwoWire5writeEj>
		// if (bufLen != 1) {
		//	log.trace("deviceWriteEEPROM addr=%02x count=%u", addr + offset, count);
		// }

		for(size_t ii = 0; ii < count; ii++) {
			wire.write(buf[ii + offset]);
   d4d08:	6868      	ldr	r0, [r5, #4]
   d4d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d4d0e:	6803      	ldr	r3, [r0, #0]
   d4d10:	689b      	ldr	r3, [r3, #8]
   d4d12:	4798      	blx	r3
		}

		stat = wire.endTransmission(true);
   d4d14:	2101      	movs	r1, #1
   d4d16:	6868      	ldr	r0, [r5, #4]
   d4d18:	f000 fc67 	bl	d55ea <_ZN7TwoWire15endTransmissionEh>
		if (stat != 0) {
   d4d1c:	4606      	mov	r6, r0
   d4d1e:	b128      	cbz	r0, d4d2c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x48>
			log.info("deviceWriteEEPROM failed stat=%d", stat);
   d4d20:	4602      	mov	r2, r0
   d4d22:	4906      	ldr	r1, [pc, #24]	; (d4d3c <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x58>)
   d4d24:	4806      	ldr	r0, [pc, #24]	; (d4d40 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x5c>)
   d4d26:	f7ff fc73 	bl	d4610 <_ZNK5spark6Logger4infoEPKcz>
			break;
   d4d2a:	e004      	b.n	d4d36 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0x52>
		}

		waitForEEPROM();
   d4d2c:	4628      	mov	r0, r5
   d4d2e:	f7ff ffca 	bl	d4cc6 <_ZN8MCP7941013waitForEEPROMEv>
	// log.trace("deviceWriteEEPROM addr=%02x bufLen=%u buf[0]=%02x", addr, bufLen, buf[0]);

	int stat = 0;
	size_t offset = 0;

	while(offset < bufLen) {
   d4d32:	e7de      	b.n	d4cf2 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj+0xe>
   d4d34:	2600      	movs	r6, #0

		offset += count;
	}

	return stat;
}
   d4d36:	4630      	mov	r0, r6
   d4d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4d3c:	000d9ca7 	.word	0x000d9ca7
   d4d40:	2003e1fc 	.word	0x2003e1fc

000d4d44 <_ZN14MCP79410EEPROM9writeDataEjPKhj>:
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d4d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	if ((addr + dataLen) > length()) {
   d4d48:	eb01 0803 	add.w	r8, r1, r3
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d4d4c:	461e      	mov	r6, r3

	if ((addr + dataLen) > length()) {
   d4d4e:	6803      	ldr	r3, [r0, #0]
   d4d50:	689b      	ldr	r3, [r3, #8]
	int stat = parent->deviceRead(MCP79410::EEPROM_I2C_ADDR, addr, data, dataLen);

	return (stat == 0);
}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {
   d4d52:	4604      	mov	r4, r0
   d4d54:	460d      	mov	r5, r1
   d4d56:	4617      	mov	r7, r2

	if ((addr + dataLen) > length()) {
   d4d58:	4798      	blx	r3
   d4d5a:	4580      	cmp	r8, r0
   d4d5c:	d80a      	bhi.n	d4d74 <_ZN14MCP79410EEPROM9writeDataEjPKhj+0x30>
		// Attempt to write past end is an error and nothing will be writen
		return false;
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);
   d4d5e:	4633      	mov	r3, r6
   d4d60:	463a      	mov	r2, r7
   d4d62:	b2e9      	uxtb	r1, r5
   d4d64:	6860      	ldr	r0, [r4, #4]
   d4d66:	f7ff ffbd 	bl	d4ce4 <_ZN8MCP7941017deviceWriteEEPROMEhPKhj>

	return (stat == 0);
   d4d6a:	fab0 f080 	clz	r0, r0
   d4d6e:	0940      	lsrs	r0, r0, #5
   d4d70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

bool MCP79410EEPROM::writeData(size_t addr, const uint8_t *data, size_t dataLen) {

	if ((addr + dataLen) > length()) {
		// Attempt to write past end is an error and nothing will be writen
		return false;
   d4d74:	2000      	movs	r0, #0
	}

	int stat = parent->deviceWriteEEPROM(addr, data, dataLen);

	return (stat == 0);
}
   d4d76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4d7c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
		if (stat == 0) {
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	f000 f871 	bl	d4e64 <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4d82:	4b02      	ldr	r3, [pc, #8]	; (d4d8c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x10>)
   d4d84:	4a02      	ldr	r2, [pc, #8]	; (d4d90 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x14>)
   d4d86:	601a      	str	r2, [r3, #0]
   d4d88:	bd08      	pop	{r3, pc}
   d4d8a:	bf00      	nop
   d4d8c:	2003e1fc 	.word	0x2003e1fc
   d4d90:	000d9cc8 	.word	0x000d9cc8

000d4d94 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4d94:	b508      	push	{r3, lr}
   d4d96:	4b02      	ldr	r3, [pc, #8]	; (d4da0 <os_thread_is_current+0xc>)
   d4d98:	681b      	ldr	r3, [r3, #0]
   d4d9a:	689b      	ldr	r3, [r3, #8]
   d4d9c:	9301      	str	r3, [sp, #4]
   d4d9e:	bd08      	pop	{r3, pc}
   d4da0:	00030248 	.word	0x00030248

000d4da4 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4da4:	b508      	push	{r3, lr}
   d4da6:	4b02      	ldr	r3, [pc, #8]	; (d4db0 <os_thread_join+0xc>)
   d4da8:	681b      	ldr	r3, [r3, #0]
   d4daa:	691b      	ldr	r3, [r3, #16]
   d4dac:	9301      	str	r3, [sp, #4]
   d4dae:	bd08      	pop	{r3, pc}
   d4db0:	00030248 	.word	0x00030248

000d4db4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4db4:	b508      	push	{r3, lr}
   d4db6:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <os_thread_cleanup+0xc>)
   d4db8:	681b      	ldr	r3, [r3, #0]
   d4dba:	695b      	ldr	r3, [r3, #20]
   d4dbc:	9301      	str	r3, [sp, #4]
   d4dbe:	bd08      	pop	{r3, pc}
   d4dc0:	00030248 	.word	0x00030248

000d4dc4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4dc4:	b508      	push	{r3, lr}
   d4dc6:	4b02      	ldr	r3, [pc, #8]	; (d4dd0 <os_mutex_recursive_create+0xc>)
   d4dc8:	681b      	ldr	r3, [r3, #0]
   d4dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4dcc:	9301      	str	r3, [sp, #4]
   d4dce:	bd08      	pop	{r3, pc}
   d4dd0:	00030248 	.word	0x00030248

000d4dd4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4dd4:	b508      	push	{r3, lr}
   d4dd6:	4b02      	ldr	r3, [pc, #8]	; (d4de0 <os_mutex_recursive_destroy+0xc>)
   d4dd8:	681b      	ldr	r3, [r3, #0]
   d4dda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4ddc:	9301      	str	r3, [sp, #4]
   d4dde:	bd08      	pop	{r3, pc}
   d4de0:	00030248 	.word	0x00030248

000d4de4 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4de4:	b508      	push	{r3, lr}
   d4de6:	4b02      	ldr	r3, [pc, #8]	; (d4df0 <os_mutex_recursive_lock+0xc>)
   d4de8:	681b      	ldr	r3, [r3, #0]
   d4dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4dec:	9301      	str	r3, [sp, #4]
   d4dee:	bd08      	pop	{r3, pc}
   d4df0:	00030248 	.word	0x00030248

000d4df4 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4df4:	b508      	push	{r3, lr}
   d4df6:	4b02      	ldr	r3, [pc, #8]	; (d4e00 <os_mutex_recursive_unlock+0xc>)
   d4df8:	681b      	ldr	r3, [r3, #0]
   d4dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4dfc:	9301      	str	r3, [sp, #4]
   d4dfe:	bd08      	pop	{r3, pc}
   d4e00:	00030248 	.word	0x00030248

000d4e04 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4e04:	b508      	push	{r3, lr}
   d4e06:	4b02      	ldr	r3, [pc, #8]	; (d4e10 <HAL_RNG_GetRandomNumber+0xc>)
   d4e08:	681b      	ldr	r3, [r3, #0]
   d4e0a:	685b      	ldr	r3, [r3, #4]
   d4e0c:	9301      	str	r3, [sp, #4]
   d4e0e:	bd08      	pop	{r3, pc}
   d4e10:	00030218 	.word	0x00030218

000d4e14 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d4e14:	b508      	push	{r3, lr}
   d4e16:	4b02      	ldr	r3, [pc, #8]	; (d4e20 <HAL_Delay_Microseconds+0xc>)
   d4e18:	681b      	ldr	r3, [r3, #0]
   d4e1a:	68db      	ldr	r3, [r3, #12]
   d4e1c:	9301      	str	r3, [sp, #4]
   d4e1e:	bd08      	pop	{r3, pc}
   d4e20:	00030218 	.word	0x00030218

000d4e24 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4e24:	b508      	push	{r3, lr}
   d4e26:	4b02      	ldr	r3, [pc, #8]	; (d4e30 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4e28:	681b      	ldr	r3, [r3, #0]
   d4e2a:	695b      	ldr	r3, [r3, #20]
   d4e2c:	9301      	str	r3, [sp, #4]
   d4e2e:	bd08      	pop	{r3, pc}
   d4e30:	00030218 	.word	0x00030218

000d4e34 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
   d4e34:	b508      	push	{r3, lr}
   d4e36:	4b02      	ldr	r3, [pc, #8]	; (d4e40 <HAL_RTC_Get_UnixTime+0xc>)
   d4e38:	681b      	ldr	r3, [r3, #0]
   d4e3a:	69db      	ldr	r3, [r3, #28]
   d4e3c:	9301      	str	r3, [sp, #4]
   d4e3e:	bd08      	pop	{r3, pc}
   d4e40:	00030218 	.word	0x00030218

000d4e44 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
   d4e44:	b508      	push	{r3, lr}
   d4e46:	4b02      	ldr	r3, [pc, #8]	; (d4e50 <HAL_RTC_Set_UnixTime+0xc>)
   d4e48:	681b      	ldr	r3, [r3, #0]
   d4e4a:	6a1b      	ldr	r3, [r3, #32]
   d4e4c:	9301      	str	r3, [sp, #4]
   d4e4e:	bd08      	pop	{r3, pc}
   d4e50:	00030218 	.word	0x00030218

000d4e54 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
   d4e54:	b508      	push	{r3, lr}
   d4e56:	4b02      	ldr	r3, [pc, #8]	; (d4e60 <HAL_RTC_Time_Is_Valid+0xc>)
   d4e58:	681b      	ldr	r3, [r3, #0]
   d4e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4e5c:	9301      	str	r3, [sp, #4]
   d4e5e:	bd08      	pop	{r3, pc}
   d4e60:	00030218 	.word	0x00030218

000d4e64 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4e64:	b508      	push	{r3, lr}
   d4e66:	4b02      	ldr	r3, [pc, #8]	; (d4e70 <HAL_Pin_Map+0xc>)
   d4e68:	681b      	ldr	r3, [r3, #0]
   d4e6a:	681b      	ldr	r3, [r3, #0]
   d4e6c:	9301      	str	r3, [sp, #4]
   d4e6e:	bd08      	pop	{r3, pc}
   d4e70:	0003022c 	.word	0x0003022c

000d4e74 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4e74:	b508      	push	{r3, lr}
   d4e76:	4b02      	ldr	r3, [pc, #8]	; (d4e80 <HAL_Pin_Mode+0xc>)
   d4e78:	681b      	ldr	r3, [r3, #0]
   d4e7a:	689b      	ldr	r3, [r3, #8]
   d4e7c:	9301      	str	r3, [sp, #4]
   d4e7e:	bd08      	pop	{r3, pc}
   d4e80:	0003022c 	.word	0x0003022c

000d4e84 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4e84:	b508      	push	{r3, lr}
   d4e86:	4b02      	ldr	r3, [pc, #8]	; (d4e90 <HAL_Get_Pin_Mode+0xc>)
   d4e88:	681b      	ldr	r3, [r3, #0]
   d4e8a:	68db      	ldr	r3, [r3, #12]
   d4e8c:	9301      	str	r3, [sp, #4]
   d4e8e:	bd08      	pop	{r3, pc}
   d4e90:	0003022c 	.word	0x0003022c

000d4e94 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4e94:	b508      	push	{r3, lr}
   d4e96:	4b02      	ldr	r3, [pc, #8]	; (d4ea0 <HAL_GPIO_Write+0xc>)
   d4e98:	681b      	ldr	r3, [r3, #0]
   d4e9a:	691b      	ldr	r3, [r3, #16]
   d4e9c:	9301      	str	r3, [sp, #4]
   d4e9e:	bd08      	pop	{r3, pc}
   d4ea0:	0003022c 	.word	0x0003022c

000d4ea4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4ea4:	b508      	push	{r3, lr}
   d4ea6:	4b02      	ldr	r3, [pc, #8]	; (d4eb0 <HAL_I2C_Begin+0xc>)
   d4ea8:	681b      	ldr	r3, [r3, #0]
   d4eaa:	68db      	ldr	r3, [r3, #12]
   d4eac:	9301      	str	r3, [sp, #4]
   d4eae:	bd08      	pop	{r3, pc}
   d4eb0:	00030228 	.word	0x00030228

000d4eb4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4eb4:	b508      	push	{r3, lr}
   d4eb6:	4b02      	ldr	r3, [pc, #8]	; (d4ec0 <HAL_I2C_Begin_Transmission+0xc>)
   d4eb8:	681b      	ldr	r3, [r3, #0]
   d4eba:	699b      	ldr	r3, [r3, #24]
   d4ebc:	9301      	str	r3, [sp, #4]
   d4ebe:	bd08      	pop	{r3, pc}
   d4ec0:	00030228 	.word	0x00030228

000d4ec4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4ec4:	b508      	push	{r3, lr}
   d4ec6:	4b02      	ldr	r3, [pc, #8]	; (d4ed0 <HAL_I2C_End_Transmission+0xc>)
   d4ec8:	681b      	ldr	r3, [r3, #0]
   d4eca:	69db      	ldr	r3, [r3, #28]
   d4ecc:	9301      	str	r3, [sp, #4]
   d4ece:	bd08      	pop	{r3, pc}
   d4ed0:	00030228 	.word	0x00030228

000d4ed4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4ed4:	b508      	push	{r3, lr}
   d4ed6:	4b02      	ldr	r3, [pc, #8]	; (d4ee0 <HAL_I2C_Write_Data+0xc>)
   d4ed8:	681b      	ldr	r3, [r3, #0]
   d4eda:	6a1b      	ldr	r3, [r3, #32]
   d4edc:	9301      	str	r3, [sp, #4]
   d4ede:	bd08      	pop	{r3, pc}
   d4ee0:	00030228 	.word	0x00030228

000d4ee4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4ee4:	b508      	push	{r3, lr}
   d4ee6:	4b02      	ldr	r3, [pc, #8]	; (d4ef0 <HAL_I2C_Available_Data+0xc>)
   d4ee8:	681b      	ldr	r3, [r3, #0]
   d4eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4eec:	9301      	str	r3, [sp, #4]
   d4eee:	bd08      	pop	{r3, pc}
   d4ef0:	00030228 	.word	0x00030228

000d4ef4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4ef4:	b508      	push	{r3, lr}
   d4ef6:	4b02      	ldr	r3, [pc, #8]	; (d4f00 <HAL_I2C_Read_Data+0xc>)
   d4ef8:	681b      	ldr	r3, [r3, #0]
   d4efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4efc:	9301      	str	r3, [sp, #4]
   d4efe:	bd08      	pop	{r3, pc}
   d4f00:	00030228 	.word	0x00030228

000d4f04 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4f04:	b508      	push	{r3, lr}
   d4f06:	4b02      	ldr	r3, [pc, #8]	; (d4f10 <HAL_I2C_Peek_Data+0xc>)
   d4f08:	681b      	ldr	r3, [r3, #0]
   d4f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4f0c:	9301      	str	r3, [sp, #4]
   d4f0e:	bd08      	pop	{r3, pc}
   d4f10:	00030228 	.word	0x00030228

000d4f14 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4f14:	b508      	push	{r3, lr}
   d4f16:	4b02      	ldr	r3, [pc, #8]	; (d4f20 <HAL_I2C_Flush_Data+0xc>)
   d4f18:	681b      	ldr	r3, [r3, #0]
   d4f1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4f1c:	9301      	str	r3, [sp, #4]
   d4f1e:	bd08      	pop	{r3, pc}
   d4f20:	00030228 	.word	0x00030228

000d4f24 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4f24:	b508      	push	{r3, lr}
   d4f26:	4b02      	ldr	r3, [pc, #8]	; (d4f30 <HAL_I2C_Is_Enabled+0xc>)
   d4f28:	681b      	ldr	r3, [r3, #0]
   d4f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4f2c:	9301      	str	r3, [sp, #4]
   d4f2e:	bd08      	pop	{r3, pc}
   d4f30:	00030228 	.word	0x00030228

000d4f34 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4f34:	b508      	push	{r3, lr}
   d4f36:	4b02      	ldr	r3, [pc, #8]	; (d4f40 <HAL_I2C_Init+0xc>)
   d4f38:	681b      	ldr	r3, [r3, #0]
   d4f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4f3c:	9301      	str	r3, [sp, #4]
   d4f3e:	bd08      	pop	{r3, pc}
   d4f40:	00030228 	.word	0x00030228

000d4f44 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
   d4f44:	b508      	push	{r3, lr}
   d4f46:	4b02      	ldr	r3, [pc, #8]	; (d4f50 <HAL_I2C_Acquire+0xc>)
   d4f48:	681b      	ldr	r3, [r3, #0]
   d4f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4f4c:	9301      	str	r3, [sp, #4]
   d4f4e:	bd08      	pop	{r3, pc}
   d4f50:	00030228 	.word	0x00030228

000d4f54 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
   d4f54:	b508      	push	{r3, lr}
   d4f56:	4b02      	ldr	r3, [pc, #8]	; (d4f60 <HAL_I2C_Release+0xc>)
   d4f58:	681b      	ldr	r3, [r3, #0]
   d4f5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4f5c:	9301      	str	r3, [sp, #4]
   d4f5e:	bd08      	pop	{r3, pc}
   d4f60:	00030228 	.word	0x00030228

000d4f64 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4f64:	b508      	push	{r3, lr}
   d4f66:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <HAL_I2C_Request_Data_Ex+0xc>)
   d4f68:	681b      	ldr	r3, [r3, #0]
   d4f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4f6c:	9301      	str	r3, [sp, #4]
   d4f6e:	bd08      	pop	{r3, pc}
   d4f70:	00030228 	.word	0x00030228

000d4f74 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4f74:	b508      	push	{r3, lr}
   d4f76:	4b02      	ldr	r3, [pc, #8]	; (d4f80 <inet_inet_ntop+0xc>)
   d4f78:	681b      	ldr	r3, [r3, #0]
   d4f7a:	695b      	ldr	r3, [r3, #20]
   d4f7c:	9301      	str	r3, [sp, #4]
   d4f7e:	bd08      	pop	{r3, pc}
   d4f80:	00030264 	.word	0x00030264

000d4f84 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4f84:	b508      	push	{r3, lr}
   d4f86:	4b02      	ldr	r3, [pc, #8]	; (d4f90 <netdb_freeaddrinfo+0xc>)
   d4f88:	681b      	ldr	r3, [r3, #0]
   d4f8a:	689b      	ldr	r3, [r3, #8]
   d4f8c:	9301      	str	r3, [sp, #4]
   d4f8e:	bd08      	pop	{r3, pc}
   d4f90:	00030268 	.word	0x00030268

000d4f94 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4f94:	b508      	push	{r3, lr}
   d4f96:	4b02      	ldr	r3, [pc, #8]	; (d4fa0 <netdb_getaddrinfo+0xc>)
   d4f98:	681b      	ldr	r3, [r3, #0]
   d4f9a:	68db      	ldr	r3, [r3, #12]
   d4f9c:	9301      	str	r3, [sp, #4]
   d4f9e:	bd08      	pop	{r3, pc}
   d4fa0:	00030268 	.word	0x00030268

000d4fa4 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4fa4:	b508      	push	{r3, lr}
   d4fa6:	4b02      	ldr	r3, [pc, #8]	; (d4fb0 <HAL_SPI_Init+0xc>)
   d4fa8:	681b      	ldr	r3, [r3, #0]
   d4faa:	69db      	ldr	r3, [r3, #28]
   d4fac:	9301      	str	r3, [sp, #4]
   d4fae:	bd08      	pop	{r3, pc}
   d4fb0:	00030230 	.word	0x00030230

000d4fb4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4fb4:	b508      	push	{r3, lr}
   d4fb6:	4b02      	ldr	r3, [pc, #8]	; (d4fc0 <HAL_SPI_Is_Enabled+0xc>)
   d4fb8:	681b      	ldr	r3, [r3, #0]
   d4fba:	6a1b      	ldr	r3, [r3, #32]
   d4fbc:	9301      	str	r3, [sp, #4]
   d4fbe:	bd08      	pop	{r3, pc}
   d4fc0:	00030230 	.word	0x00030230

000d4fc4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <HAL_USART_Init+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	681b      	ldr	r3, [r3, #0]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	0003023c 	.word	0x0003023c

000d4fd4 <HAL_USART_End>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <HAL_USART_End+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	689b      	ldr	r3, [r3, #8]
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	0003023c 	.word	0x0003023c

000d4fe4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <HAL_USART_Write_Data+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	68db      	ldr	r3, [r3, #12]
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	0003023c 	.word	0x0003023c

000d4ff4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <HAL_USART_Available_Data+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	691b      	ldr	r3, [r3, #16]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	0003023c 	.word	0x0003023c

000d5004 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <HAL_USART_Read_Data+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	695b      	ldr	r3, [r3, #20]
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	0003023c 	.word	0x0003023c

000d5014 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <HAL_USART_Peek_Data+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	699b      	ldr	r3, [r3, #24]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	0003023c 	.word	0x0003023c

000d5024 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <HAL_USART_Flush_Data+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	69db      	ldr	r3, [r3, #28]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	0003023c 	.word	0x0003023c

000d5034 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <HAL_USART_Is_Enabled+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	6a1b      	ldr	r3, [r3, #32]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	0003023c 	.word	0x0003023c

000d5044 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <HAL_USART_Available_Data_For_Write+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	0003023c 	.word	0x0003023c

000d5054 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <HAL_USART_BeginConfig+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	0003023c 	.word	0x0003023c

000d5064 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <HAL_USB_USART_Init+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	681b      	ldr	r3, [r3, #0]
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	0003024c 	.word	0x0003024c

000d5074 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <HAL_USB_USART_Begin+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	685b      	ldr	r3, [r3, #4]
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	0003024c 	.word	0x0003024c

000d5084 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <HAL_USB_USART_Available_Data+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	691b      	ldr	r3, [r3, #16]
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	0003024c 	.word	0x0003024c

000d5094 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	695b      	ldr	r3, [r3, #20]
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	0003024c 	.word	0x0003024c

000d50a4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <HAL_USB_USART_Receive_Data+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	699b      	ldr	r3, [r3, #24]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	0003024c 	.word	0x0003024c

000d50b4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <HAL_USB_USART_Send_Data+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	69db      	ldr	r3, [r3, #28]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	0003024c 	.word	0x0003024c

000d50c4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <HAL_USB_USART_Flush_Data+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	6a1b      	ldr	r3, [r3, #32]
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	0003024c 	.word	0x0003024c

000d50d4 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <panic_+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	00030260 	.word	0x00030260

000d50e4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d50e4:	b508      	push	{r3, lr}
   d50e6:	4b02      	ldr	r3, [pc, #8]	; (d50f0 <log_message_v+0xc>)
   d50e8:	681b      	ldr	r3, [r3, #0]
   d50ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d50ec:	9301      	str	r3, [sp, #4]
   d50ee:	bd08      	pop	{r3, pc}
   d50f0:	00030260 	.word	0x00030260

000d50f4 <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d50f4:	b508      	push	{r3, lr}
   d50f6:	4b02      	ldr	r3, [pc, #8]	; (d5100 <log_level_name+0xc>)
   d50f8:	681b      	ldr	r3, [r3, #0]
   d50fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d50fc:	9301      	str	r3, [sp, #4]
   d50fe:	bd08      	pop	{r3, pc}
   d5100:	00030260 	.word	0x00030260

000d5104 <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d5104:	b508      	push	{r3, lr}
   d5106:	4b02      	ldr	r3, [pc, #8]	; (d5110 <log_set_callbacks+0xc>)
   d5108:	681b      	ldr	r3, [r3, #0]
   d510a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d510c:	9301      	str	r3, [sp, #4]
   d510e:	bd08      	pop	{r3, pc}
   d5110:	00030260 	.word	0x00030260

000d5114 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d5114:	b508      	push	{r3, lr}
   d5116:	4b03      	ldr	r3, [pc, #12]	; (d5124 <diag_get_source+0x10>)
   d5118:	681b      	ldr	r3, [r3, #0]
   d511a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d511e:	9301      	str	r3, [sp, #4]
   d5120:	bd08      	pop	{r3, pc}
   d5122:	0000      	.short	0x0000
   d5124:	00030260 	.word	0x00030260

000d5128 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5128:	b508      	push	{r3, lr}
   d512a:	4b02      	ldr	r3, [pc, #8]	; (d5134 <system_mode+0xc>)
   d512c:	681b      	ldr	r3, [r3, #0]
   d512e:	681b      	ldr	r3, [r3, #0]
   d5130:	9301      	str	r3, [sp, #4]
   d5132:	bd08      	pop	{r3, pc}
   d5134:	00030220 	.word	0x00030220

000d5138 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5138:	b508      	push	{r3, lr}
   d513a:	4b02      	ldr	r3, [pc, #8]	; (d5144 <set_system_mode+0xc>)
   d513c:	681b      	ldr	r3, [r3, #0]
   d513e:	685b      	ldr	r3, [r3, #4]
   d5140:	9301      	str	r3, [sp, #4]
   d5142:	bd08      	pop	{r3, pc}
   d5144:	00030220 	.word	0x00030220

000d5148 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5148:	b508      	push	{r3, lr}
   d514a:	4b02      	ldr	r3, [pc, #8]	; (d5154 <system_delay_ms+0xc>)
   d514c:	681b      	ldr	r3, [r3, #0]
   d514e:	695b      	ldr	r3, [r3, #20]
   d5150:	9301      	str	r3, [sp, #4]
   d5152:	bd08      	pop	{r3, pc}
   d5154:	00030220 	.word	0x00030220

000d5158 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5158:	b508      	push	{r3, lr}
   d515a:	4b02      	ldr	r3, [pc, #8]	; (d5164 <system_thread_get_state+0xc>)
   d515c:	681b      	ldr	r3, [r3, #0]
   d515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5160:	9301      	str	r3, [sp, #4]
   d5162:	bd08      	pop	{r3, pc}
   d5164:	00030220 	.word	0x00030220

000d5168 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d5168:	b508      	push	{r3, lr}
   d516a:	4b02      	ldr	r3, [pc, #8]	; (d5174 <system_notify_time_changed+0xc>)
   d516c:	681b      	ldr	r3, [r3, #0]
   d516e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5170:	9301      	str	r3, [sp, #4]
   d5172:	bd08      	pop	{r3, pc}
   d5174:	00030220 	.word	0x00030220

000d5178 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5178:	b508      	push	{r3, lr}
   d517a:	4b03      	ldr	r3, [pc, #12]	; (d5188 <system_ctrl_set_app_request_handler+0x10>)
   d517c:	681b      	ldr	r3, [r3, #0]
   d517e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5182:	9301      	str	r3, [sp, #4]
   d5184:	bd08      	pop	{r3, pc}
   d5186:	0000      	.short	0x0000
   d5188:	00030220 	.word	0x00030220

000d518c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d518c:	b508      	push	{r3, lr}
   d518e:	4b03      	ldr	r3, [pc, #12]	; (d519c <system_ctrl_set_result+0x10>)
   d5190:	681b      	ldr	r3, [r3, #0]
   d5192:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5196:	9301      	str	r3, [sp, #4]
   d5198:	bd08      	pop	{r3, pc}
   d519a:	0000      	.short	0x0000
   d519c:	00030220 	.word	0x00030220

000d51a0 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d51a0:	b508      	push	{r3, lr}
   d51a2:	4b02      	ldr	r3, [pc, #8]	; (d51ac <spark_process+0xc>)
   d51a4:	681b      	ldr	r3, [r3, #0]
   d51a6:	689b      	ldr	r3, [r3, #8]
   d51a8:	9301      	str	r3, [sp, #4]
   d51aa:	bd08      	pop	{r3, pc}
   d51ac:	00030244 	.word	0x00030244

000d51b0 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d51b0:	b508      	push	{r3, lr}
   d51b2:	4b02      	ldr	r3, [pc, #8]	; (d51bc <spark_cloud_flag_connected+0xc>)
   d51b4:	681b      	ldr	r3, [r3, #0]
   d51b6:	695b      	ldr	r3, [r3, #20]
   d51b8:	9301      	str	r3, [sp, #4]
   d51ba:	bd08      	pop	{r3, pc}
   d51bc:	00030244 	.word	0x00030244

000d51c0 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d51c0:	b508      	push	{r3, lr}
   d51c2:	4b02      	ldr	r3, [pc, #8]	; (d51cc <spark_sync_time_pending+0xc>)
   d51c4:	681b      	ldr	r3, [r3, #0]
   d51c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d51c8:	9301      	str	r3, [sp, #4]
   d51ca:	bd08      	pop	{r3, pc}
   d51cc:	00030244 	.word	0x00030244

000d51d0 <spark_sync_time_last>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
   d51d0:	b508      	push	{r3, lr}
   d51d2:	4b02      	ldr	r3, [pc, #8]	; (d51dc <spark_sync_time_last+0xc>)
   d51d4:	681b      	ldr	r3, [r3, #0]
   d51d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d51d8:	9301      	str	r3, [sp, #4]
   d51da:	bd08      	pop	{r3, pc}
   d51dc:	00030244 	.word	0x00030244

000d51e0 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d51e0:	b508      	push	{r3, lr}
   d51e2:	4b02      	ldr	r3, [pc, #8]	; (d51ec <spark_set_random_seed_from_cloud_handler+0xc>)
   d51e4:	681b      	ldr	r3, [r3, #0]
   d51e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d51e8:	9301      	str	r3, [sp, #4]
   d51ea:	bd08      	pop	{r3, pc}
   d51ec:	00030244 	.word	0x00030244

000d51f0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d51f0:	b508      	push	{r3, lr}
   d51f2:	4b02      	ldr	r3, [pc, #8]	; (d51fc <network_connect+0xc>)
   d51f4:	681b      	ldr	r3, [r3, #0]
   d51f6:	685b      	ldr	r3, [r3, #4]
   d51f8:	9301      	str	r3, [sp, #4]
   d51fa:	bd08      	pop	{r3, pc}
   d51fc:	00030240 	.word	0x00030240

000d5200 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5200:	b508      	push	{r3, lr}
   d5202:	4b02      	ldr	r3, [pc, #8]	; (d520c <network_connecting+0xc>)
   d5204:	681b      	ldr	r3, [r3, #0]
   d5206:	689b      	ldr	r3, [r3, #8]
   d5208:	9301      	str	r3, [sp, #4]
   d520a:	bd08      	pop	{r3, pc}
   d520c:	00030240 	.word	0x00030240

000d5210 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5210:	b508      	push	{r3, lr}
   d5212:	4b02      	ldr	r3, [pc, #8]	; (d521c <network_disconnect+0xc>)
   d5214:	681b      	ldr	r3, [r3, #0]
   d5216:	68db      	ldr	r3, [r3, #12]
   d5218:	9301      	str	r3, [sp, #4]
   d521a:	bd08      	pop	{r3, pc}
   d521c:	00030240 	.word	0x00030240

000d5220 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5220:	b508      	push	{r3, lr}
   d5222:	4b02      	ldr	r3, [pc, #8]	; (d522c <network_ready+0xc>)
   d5224:	681b      	ldr	r3, [r3, #0]
   d5226:	691b      	ldr	r3, [r3, #16]
   d5228:	9301      	str	r3, [sp, #4]
   d522a:	bd08      	pop	{r3, pc}
   d522c:	00030240 	.word	0x00030240

000d5230 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5230:	b508      	push	{r3, lr}
   d5232:	4b02      	ldr	r3, [pc, #8]	; (d523c <network_on+0xc>)
   d5234:	681b      	ldr	r3, [r3, #0]
   d5236:	695b      	ldr	r3, [r3, #20]
   d5238:	9301      	str	r3, [sp, #4]
   d523a:	bd08      	pop	{r3, pc}
   d523c:	00030240 	.word	0x00030240

000d5240 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5240:	b508      	push	{r3, lr}
   d5242:	4b02      	ldr	r3, [pc, #8]	; (d524c <network_off+0xc>)
   d5244:	681b      	ldr	r3, [r3, #0]
   d5246:	699b      	ldr	r3, [r3, #24]
   d5248:	9301      	str	r3, [sp, #4]
   d524a:	bd08      	pop	{r3, pc}
   d524c:	00030240 	.word	0x00030240

000d5250 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5250:	b508      	push	{r3, lr}
   d5252:	4b02      	ldr	r3, [pc, #8]	; (d525c <network_listen+0xc>)
   d5254:	681b      	ldr	r3, [r3, #0]
   d5256:	69db      	ldr	r3, [r3, #28]
   d5258:	9301      	str	r3, [sp, #4]
   d525a:	bd08      	pop	{r3, pc}
   d525c:	00030240 	.word	0x00030240

000d5260 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5260:	b508      	push	{r3, lr}
   d5262:	4b02      	ldr	r3, [pc, #8]	; (d526c <network_listening+0xc>)
   d5264:	681b      	ldr	r3, [r3, #0]
   d5266:	6a1b      	ldr	r3, [r3, #32]
   d5268:	9301      	str	r3, [sp, #4]
   d526a:	bd08      	pop	{r3, pc}
   d526c:	00030240 	.word	0x00030240

000d5270 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5270:	b508      	push	{r3, lr}
   d5272:	4b02      	ldr	r3, [pc, #8]	; (d527c <network_set_listen_timeout+0xc>)
   d5274:	681b      	ldr	r3, [r3, #0]
   d5276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5278:	9301      	str	r3, [sp, #4]
   d527a:	bd08      	pop	{r3, pc}
   d527c:	00030240 	.word	0x00030240

000d5280 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5280:	b508      	push	{r3, lr}
   d5282:	4b02      	ldr	r3, [pc, #8]	; (d528c <network_get_listen_timeout+0xc>)
   d5284:	681b      	ldr	r3, [r3, #0]
   d5286:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5288:	9301      	str	r3, [sp, #4]
   d528a:	bd08      	pop	{r3, pc}
   d528c:	00030240 	.word	0x00030240

000d5290 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5290:	b508      	push	{r3, lr}
   d5292:	4b02      	ldr	r3, [pc, #8]	; (d529c <malloc+0xc>)
   d5294:	681b      	ldr	r3, [r3, #0]
   d5296:	681b      	ldr	r3, [r3, #0]
   d5298:	9301      	str	r3, [sp, #4]
   d529a:	bd08      	pop	{r3, pc}
   d529c:	0003021c 	.word	0x0003021c

000d52a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d52a0:	b508      	push	{r3, lr}
   d52a2:	4b02      	ldr	r3, [pc, #8]	; (d52ac <free+0xc>)
   d52a4:	681b      	ldr	r3, [r3, #0]
   d52a6:	685b      	ldr	r3, [r3, #4]
   d52a8:	9301      	str	r3, [sp, #4]
   d52aa:	bd08      	pop	{r3, pc}
   d52ac:	0003021c 	.word	0x0003021c

000d52b0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d52b0:	b508      	push	{r3, lr}
   d52b2:	4b02      	ldr	r3, [pc, #8]	; (d52bc <realloc+0xc>)
   d52b4:	681b      	ldr	r3, [r3, #0]
   d52b6:	689b      	ldr	r3, [r3, #8]
   d52b8:	9301      	str	r3, [sp, #4]
   d52ba:	bd08      	pop	{r3, pc}
   d52bc:	0003021c 	.word	0x0003021c

000d52c0 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d52c0:	b508      	push	{r3, lr}
   d52c2:	4b02      	ldr	r3, [pc, #8]	; (d52cc <siprintf+0xc>)
   d52c4:	681b      	ldr	r3, [r3, #0]
   d52c6:	691b      	ldr	r3, [r3, #16]
   d52c8:	9301      	str	r3, [sp, #4]
   d52ca:	bd08      	pop	{r3, pc}
   d52cc:	0003021c 	.word	0x0003021c

000d52d0 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
   d52d0:	b508      	push	{r3, lr}
   d52d2:	4b02      	ldr	r3, [pc, #8]	; (d52dc <siscanf+0xc>)
   d52d4:	681b      	ldr	r3, [r3, #0]
   d52d6:	699b      	ldr	r3, [r3, #24]
   d52d8:	9301      	str	r3, [sp, #4]
   d52da:	bd08      	pop	{r3, pc}
   d52dc:	0003021c 	.word	0x0003021c

000d52e0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d52e0:	b508      	push	{r3, lr}
   d52e2:	4b02      	ldr	r3, [pc, #8]	; (d52ec <snprintf+0xc>)
   d52e4:	681b      	ldr	r3, [r3, #0]
   d52e6:	69db      	ldr	r3, [r3, #28]
   d52e8:	9301      	str	r3, [sp, #4]
   d52ea:	bd08      	pop	{r3, pc}
   d52ec:	0003021c 	.word	0x0003021c

000d52f0 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
   d52f0:	b508      	push	{r3, lr}
   d52f2:	4b02      	ldr	r3, [pc, #8]	; (d52fc <sniprintf+0xc>)
   d52f4:	681b      	ldr	r3, [r3, #0]
   d52f6:	6a1b      	ldr	r3, [r3, #32]
   d52f8:	9301      	str	r3, [sp, #4]
   d52fa:	bd08      	pop	{r3, pc}
   d52fc:	0003021c 	.word	0x0003021c

000d5300 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5300:	b508      	push	{r3, lr}
   d5302:	4b02      	ldr	r3, [pc, #8]	; (d530c <vsnprintf+0xc>)
   d5304:	681b      	ldr	r3, [r3, #0]
   d5306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5308:	9301      	str	r3, [sp, #4]
   d530a:	bd08      	pop	{r3, pc}
   d530c:	0003021c 	.word	0x0003021c

000d5310 <_malloc_r>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d5310:	b508      	push	{r3, lr}
   d5312:	4b02      	ldr	r3, [pc, #8]	; (d531c <_malloc_r+0xc>)
   d5314:	681b      	ldr	r3, [r3, #0]
   d5316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5318:	9301      	str	r3, [sp, #4]
   d531a:	bd08      	pop	{r3, pc}
   d531c:	0003021c 	.word	0x0003021c

000d5320 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5320:	2100      	movs	r1, #0
   d5322:	f7ff bf11 	b.w	d5148 <system_delay_ms>

000d5326 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d5326:	b510      	push	{r4, lr}
   d5328:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d532a:	6800      	ldr	r0, [r0, #0]
   d532c:	b108      	cbz	r0, d5332 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d532e:	f7ff fd51 	bl	d4dd4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d5332:	4620      	mov	r0, r4
   d5334:	bd10      	pop	{r4, pc}

000d5336 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5336:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5338:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d533a:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d533c:	689b      	ldr	r3, [r3, #8]
   d533e:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5340:	68a3      	ldr	r3, [r4, #8]
   d5342:	3b01      	subs	r3, #1
   d5344:	60a3      	str	r3, [r4, #8]
   d5346:	b92b      	cbnz	r3, d5354 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d5348:	6823      	ldr	r3, [r4, #0]
   d534a:	4620      	mov	r0, r4
   d534c:	68db      	ldr	r3, [r3, #12]
        }
    }
   d534e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d5352:	4718      	bx	r3
   d5354:	bd10      	pop	{r4, pc}

000d5356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5356:	680b      	ldr	r3, [r1, #0]
   d5358:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d535a:	b113      	cbz	r3, d5362 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d535c:	685a      	ldr	r2, [r3, #4]
   d535e:	3201      	adds	r2, #1
   d5360:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d5362:	4770      	bx	lr

000d5364 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5364:	b510      	push	{r4, lr}
   d5366:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d5368:	6800      	ldr	r0, [r0, #0]
   d536a:	b128      	cbz	r0, d5378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d536c:	6843      	ldr	r3, [r0, #4]
   d536e:	3b01      	subs	r3, #1
   d5370:	6043      	str	r3, [r0, #4]
   d5372:	b90b      	cbnz	r3, d5378 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5374:	f7ff ffdf 	bl	d5336 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d5378:	4620      	mov	r0, r4
   d537a:	bd10      	pop	{r4, pc}

000d537c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>:
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d537c:	b538      	push	{r3, r4, r5, lr}
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d537e:	680c      	ldr	r4, [r1, #0]
	if (__tmp != _M_pi)
   d5380:	6803      	ldr	r3, [r0, #0]
   d5382:	429c      	cmp	r4, r3
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }

      __shared_count&
      operator=(const __shared_count& __r) noexcept
   d5384:	4605      	mov	r5, r0
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
   d5386:	d00c      	beq.n	d53a2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x26>
	  {
	    if (__tmp != 0)
   d5388:	b114      	cbz	r4, d5390 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x14>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d538a:	6863      	ldr	r3, [r4, #4]
   d538c:	3301      	adds	r3, #1
   d538e:	6063      	str	r3, [r4, #4]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	if (__tmp != _M_pi)
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
   d5390:	6828      	ldr	r0, [r5, #0]
   d5392:	b128      	cbz	r0, d53a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d5394:	6843      	ldr	r3, [r0, #4]
   d5396:	3b01      	subs	r3, #1
   d5398:	6043      	str	r3, [r0, #4]
   d539a:	b90b      	cbnz	r3, d53a0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_+0x24>
   d539c:	f7ff ffcb 	bl	d5336 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>
	  {
	    if (__tmp != 0)
	      __tmp->_M_add_ref_copy();
	    if (_M_pi != 0)
	      _M_pi->_M_release();
	    _M_pi = __tmp;
   d53a0:	602c      	str	r4, [r5, #0]
	  }
	return *this;
      }
   d53a2:	4628      	mov	r0, r5
   d53a4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d53a8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d53a8:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d53aa:	4c06      	ldr	r4, [pc, #24]	; (d53c4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d53ac:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d53ae:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d53b0:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d53b2:	f7ff fd07 	bl	d4dc4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d53b6:	4620      	mov	r0, r4
   d53b8:	4a03      	ldr	r2, [pc, #12]	; (d53c8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d53ba:	4904      	ldr	r1, [pc, #16]	; (d53cc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d53bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d53c0:	f002 ba3a 	b.w	d7838 <__aeabi_atexit>
   d53c4:	2003e200 	.word	0x2003e200
   d53c8:	2003e1b8 	.word	0x2003e1b8
   d53cc:	000d5327 	.word	0x000d5327

000d53d0 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d53d0:	2200      	movs	r2, #0
   d53d2:	4611      	mov	r1, r2
   d53d4:	6840      	ldr	r0, [r0, #4]
   d53d6:	f7ff bf23 	b.w	d5220 <network_ready>

000d53da <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d53da:	2200      	movs	r2, #0
   d53dc:	4611      	mov	r1, r2
   d53de:	6840      	ldr	r0, [r0, #4]
   d53e0:	f7ff bf3e 	b.w	d5260 <network_listening>

000d53e4 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d53e4:	2200      	movs	r2, #0
   d53e6:	4611      	mov	r1, r2
   d53e8:	6840      	ldr	r0, [r0, #4]
   d53ea:	f7ff bf49 	b.w	d5280 <network_get_listen_timeout>

000d53ee <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d53ee:	2200      	movs	r2, #0
   d53f0:	6840      	ldr	r0, [r0, #4]
   d53f2:	f7ff bf3d 	b.w	d5270 <network_set_listen_timeout>

000d53f6 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d53f6:	2200      	movs	r2, #0
   d53f8:	f081 0101 	eor.w	r1, r1, #1
   d53fc:	6840      	ldr	r0, [r0, #4]
   d53fe:	f7ff bf27 	b.w	d5250 <network_listen>

000d5402 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d5402:	2300      	movs	r3, #0
   d5404:	461a      	mov	r2, r3
   d5406:	4619      	mov	r1, r3
   d5408:	6840      	ldr	r0, [r0, #4]
   d540a:	f7ff bf19 	b.w	d5240 <network_off>

000d540e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d540e:	2300      	movs	r3, #0
   d5410:	461a      	mov	r2, r3
   d5412:	4619      	mov	r1, r3
   d5414:	6840      	ldr	r0, [r0, #4]
   d5416:	f7ff bf0b 	b.w	d5230 <network_on>

000d541a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d541a:	2200      	movs	r2, #0
   d541c:	4611      	mov	r1, r2
   d541e:	6840      	ldr	r0, [r0, #4]
   d5420:	f7ff beee 	b.w	d5200 <network_connecting>

000d5424 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5424:	2200      	movs	r2, #0
   d5426:	2102      	movs	r1, #2
   d5428:	6840      	ldr	r0, [r0, #4]
   d542a:	f7ff bef1 	b.w	d5210 <network_disconnect>

000d542e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d542e:	2300      	movs	r3, #0
   d5430:	461a      	mov	r2, r3
   d5432:	6840      	ldr	r0, [r0, #4]
   d5434:	f7ff bedc 	b.w	d51f0 <network_connect>

000d5438 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5438:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d543a:	4c08      	ldr	r4, [pc, #32]	; (d545c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d543c:	2528      	movs	r5, #40	; 0x28
   d543e:	462a      	mov	r2, r5
   d5440:	2100      	movs	r1, #0
   d5442:	4620      	mov	r0, r4
   d5444:	f002 ff2c 	bl	d82a0 <memset>
        cid = -1;
   d5448:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d544c:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d544e:	4b04      	ldr	r3, [pc, #16]	; (d5460 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d5450:	8025      	strh	r5, [r4, #0]
   d5452:	2204      	movs	r2, #4
   d5454:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5456:	4a03      	ldr	r2, [pc, #12]	; (d5464 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5458:	601a      	str	r2, [r3, #0]
   d545a:	bd38      	pop	{r3, r4, r5, pc}
   d545c:	2003e20c 	.word	0x2003e20c
   d5460:	2003e204 	.word	0x2003e204
   d5464:	000d9cf8 	.word	0x000d9cf8

000d5468 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5468:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d546a:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d546c:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d546e:	b113      	cbz	r3, d5476 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d5470:	2203      	movs	r2, #3
   d5472:	4601      	mov	r1, r0
   d5474:	4798      	blx	r3
    }
   d5476:	4620      	mov	r0, r4
   d5478:	bd10      	pop	{r4, pc}

000d547a <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d547a:	2200      	movs	r2, #0
   d547c:	4611      	mov	r1, r2
   d547e:	6840      	ldr	r0, [r0, #4]
   d5480:	f7ff beee 	b.w	d5260 <network_listening>

000d5484 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5484:	2200      	movs	r2, #0
   d5486:	4611      	mov	r1, r2
   d5488:	6840      	ldr	r0, [r0, #4]
   d548a:	f7ff bef9 	b.w	d5280 <network_get_listen_timeout>

000d548e <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d548e:	2200      	movs	r2, #0
   d5490:	6840      	ldr	r0, [r0, #4]
   d5492:	f7ff beed 	b.w	d5270 <network_set_listen_timeout>

000d5496 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5496:	2200      	movs	r2, #0
   d5498:	f081 0101 	eor.w	r1, r1, #1
   d549c:	6840      	ldr	r0, [r0, #4]
   d549e:	f7ff bed7 	b.w	d5250 <network_listen>

000d54a2 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d54a2:	2300      	movs	r3, #0
   d54a4:	461a      	mov	r2, r3
   d54a6:	4619      	mov	r1, r3
   d54a8:	6840      	ldr	r0, [r0, #4]
   d54aa:	f7ff bec9 	b.w	d5240 <network_off>

000d54ae <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d54ae:	2300      	movs	r3, #0
   d54b0:	461a      	mov	r2, r3
   d54b2:	4619      	mov	r1, r3
   d54b4:	6840      	ldr	r0, [r0, #4]
   d54b6:	f7ff bebb 	b.w	d5230 <network_on>

000d54ba <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d54ba:	2200      	movs	r2, #0
   d54bc:	4611      	mov	r1, r2
   d54be:	6840      	ldr	r0, [r0, #4]
   d54c0:	f7ff beae 	b.w	d5220 <network_ready>

000d54c4 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d54c4:	2200      	movs	r2, #0
   d54c6:	4611      	mov	r1, r2
   d54c8:	6840      	ldr	r0, [r0, #4]
   d54ca:	f7ff be99 	b.w	d5200 <network_connecting>

000d54ce <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d54ce:	2200      	movs	r2, #0
   d54d0:	2102      	movs	r1, #2
   d54d2:	6840      	ldr	r0, [r0, #4]
   d54d4:	f7ff be9c 	b.w	d5210 <network_disconnect>

000d54d8 <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d54d8:	2300      	movs	r3, #0
   d54da:	461a      	mov	r2, r3
   d54dc:	6840      	ldr	r0, [r0, #4]
   d54de:	f7ff be87 	b.w	d51f0 <network_connect>
	...

000d54e4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d54e4:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d54e6:	2203      	movs	r2, #3
   d54e8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d54ea:	4a02      	ldr	r2, [pc, #8]	; (d54f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d54ec:	601a      	str	r2, [r3, #0]
   d54ee:	4770      	bx	lr
   d54f0:	2003e234 	.word	0x2003e234
   d54f4:	000d9d2c 	.word	0x000d9d2c

000d54f8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d54f8:	4770      	bx	lr

000d54fa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d54fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54fc:	4606      	mov	r6, r0
   d54fe:	4615      	mov	r5, r2
   d5500:	460c      	mov	r4, r1
   d5502:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5504:	42bc      	cmp	r4, r7
   d5506:	d006      	beq.n	d5516 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5508:	6833      	ldr	r3, [r6, #0]
   d550a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d550e:	689b      	ldr	r3, [r3, #8]
   d5510:	4630      	mov	r0, r6
   d5512:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5514:	e7f6      	b.n	d5504 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5516:	4628      	mov	r0, r5
   d5518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d551a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d551a:	2200      	movs	r2, #0
   d551c:	7c00      	ldrb	r0, [r0, #16]
   d551e:	f7ff bcd9 	b.w	d4ed4 <HAL_I2C_Write_Data>

000d5522 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5522:	2100      	movs	r1, #0
   d5524:	7c00      	ldrb	r0, [r0, #16]
   d5526:	f7ff bcdd 	b.w	d4ee4 <HAL_I2C_Available_Data>

000d552a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d552a:	2100      	movs	r1, #0
   d552c:	7c00      	ldrb	r0, [r0, #16]
   d552e:	f7ff bce1 	b.w	d4ef4 <HAL_I2C_Read_Data>

000d5532 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5532:	2100      	movs	r1, #0
   d5534:	7c00      	ldrb	r0, [r0, #16]
   d5536:	f7ff bce5 	b.w	d4f04 <HAL_I2C_Peek_Data>

000d553a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d553a:	2100      	movs	r1, #0
   d553c:	7c00      	ldrb	r0, [r0, #16]
   d553e:	f7ff bce9 	b.w	d4f14 <HAL_I2C_Flush_Data>

000d5542 <_ZN7TwoWireD0Ev>:
   d5542:	b510      	push	{r4, lr}
   d5544:	2114      	movs	r1, #20
   d5546:	4604      	mov	r4, r0
   d5548:	f002 f97b 	bl	d7842 <_ZdlPvj>
   d554c:	4620      	mov	r0, r4
   d554e:	bd10      	pop	{r4, pc}

000d5550 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5550:	b510      	push	{r4, lr}
   d5552:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d5554:	2300      	movs	r3, #0
   d5556:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d555c:	60a3      	str	r3, [r4, #8]
   d555e:	4b04      	ldr	r3, [pc, #16]	; (d5570 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5560:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5562:	4608      	mov	r0, r1
   d5564:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d5566:	4611      	mov	r1, r2
   d5568:	f7ff fce4 	bl	d4f34 <HAL_I2C_Init>
}
   d556c:	4620      	mov	r0, r4
   d556e:	bd10      	pop	{r4, pc}
   d5570:	000d9d60 	.word	0x000d9d60

000d5574 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5574:	2300      	movs	r3, #0
   d5576:	461a      	mov	r2, r3
   d5578:	4619      	mov	r1, r3
   d557a:	7c00      	ldrb	r0, [r0, #16]
   d557c:	f7ff bc92 	b.w	d4ea4 <HAL_I2C_Begin>

000d5580 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5580:	b570      	push	{r4, r5, r6, lr}
   d5582:	460c      	mov	r4, r1
   d5584:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d5586:	2514      	movs	r5, #20
   d5588:	4606      	mov	r6, r0
   d558a:	462a      	mov	r2, r5
   d558c:	2100      	movs	r1, #0
   d558e:	a801      	add	r0, sp, #4
   d5590:	f002 fe86 	bl	d82a0 <memset>
   d5594:	7823      	ldrb	r3, [r4, #0]
   d5596:	f88d 3008 	strb.w	r3, [sp, #8]
   d559a:	6863      	ldr	r3, [r4, #4]
   d559c:	9303      	str	r3, [sp, #12]
   d559e:	68e3      	ldr	r3, [r4, #12]
   d55a0:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d55a2:	2200      	movs	r2, #0
   d55a4:	7a23      	ldrb	r3, [r4, #8]
   d55a6:	7c30      	ldrb	r0, [r6, #16]
   d55a8:	f8ad 5004 	strh.w	r5, [sp, #4]
   d55ac:	a901      	add	r1, sp, #4
   d55ae:	9305      	str	r3, [sp, #20]
   d55b0:	f7ff fcd8 	bl	d4f64 <HAL_I2C_Request_Data_Ex>
}
   d55b4:	b006      	add	sp, #24
   d55b6:	bd70      	pop	{r4, r5, r6, pc}

000d55b8 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d55b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d55ba:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d55bc:	f88d 1000 	strb.w	r1, [sp]
   d55c0:	f04f 0164 	mov.w	r1, #100	; 0x64
   d55c4:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d55c6:	bf18      	it	ne
   d55c8:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d55ca:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d55cc:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d55ce:	f88d 3008 	strb.w	r3, [sp, #8]
   d55d2:	f7ff ffd5 	bl	d5580 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d55d6:	b005      	add	sp, #20
   d55d8:	f85d fb04 	ldr.w	pc, [sp], #4

000d55dc <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d55dc:	2200      	movs	r2, #0
   d55de:	7c00      	ldrb	r0, [r0, #16]
   d55e0:	f7ff bc68 	b.w	d4eb4 <HAL_I2C_Begin_Transmission>

000d55e4 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d55e4:	b2c9      	uxtb	r1, r1
   d55e6:	f7ff bff9 	b.w	d55dc <_ZN7TwoWire17beginTransmissionEh>

000d55ea <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d55ea:	2200      	movs	r2, #0
   d55ec:	7c00      	ldrb	r0, [r0, #16]
   d55ee:	f7ff bc69 	b.w	d4ec4 <HAL_I2C_End_Transmission>

000d55f2 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d55f2:	2100      	movs	r1, #0
   d55f4:	7c00      	ldrb	r0, [r0, #16]
   d55f6:	f7ff bc95 	b.w	d4f24 <HAL_I2C_Is_Enabled>

000d55fa <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d55fa:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
   d55fc:	2100      	movs	r1, #0
   d55fe:	7c00      	ldrb	r0, [r0, #16]
   d5600:	f7ff fca0 	bl	d4f44 <HAL_I2C_Acquire>
}
   d5604:	fab0 f080 	clz	r0, r0
   d5608:	0940      	lsrs	r0, r0, #5
   d560a:	bd08      	pop	{r3, pc}

000d560c <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d560c:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
   d560e:	2100      	movs	r1, #0
   d5610:	7c00      	ldrb	r0, [r0, #16]
   d5612:	f7ff fc9f 	bl	d4f54 <HAL_I2C_Release>
}
   d5616:	fab0 f080 	clz	r0, r0
   d561a:	0940      	lsrs	r0, r0, #5
   d561c:	bd08      	pop	{r3, pc}

000d561e <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d561e:	4770      	bx	lr

000d5620 <_ZN9IPAddressD0Ev>:
   d5620:	b510      	push	{r4, lr}
   d5622:	2118      	movs	r1, #24
   d5624:	4604      	mov	r4, r0
   d5626:	f002 f90c 	bl	d7842 <_ZdlPvj>
   d562a:	4620      	mov	r0, r4
   d562c:	bd10      	pop	{r4, pc}

000d562e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d562e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5630:	7d03      	ldrb	r3, [r0, #20]
   d5632:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5634:	b08d      	sub	sp, #52	; 0x34
   d5636:	460e      	mov	r6, r1
   d5638:	f100 0704 	add.w	r7, r0, #4
   d563c:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5640:	d002      	beq.n	d5648 <_ZNK9IPAddress7printToER5Print+0x1a>
   d5642:	f100 0508 	add.w	r5, r0, #8
   d5646:	e018      	b.n	d567a <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5648:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d564a:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d564c:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5650:	232f      	movs	r3, #47	; 0x2f
   d5652:	462a      	mov	r2, r5
   d5654:	200a      	movs	r0, #10
   d5656:	f7ff fc8d 	bl	d4f74 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d565a:	4628      	mov	r0, r5
   d565c:	f003 fddc 	bl	d9218 <strlen>
   d5660:	6833      	ldr	r3, [r6, #0]
   d5662:	4602      	mov	r2, r0
   d5664:	68db      	ldr	r3, [r3, #12]
   d5666:	4629      	mov	r1, r5
   d5668:	4630      	mov	r0, r6
   d566a:	4798      	blx	r3
   d566c:	e00f      	b.n	d568e <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d566e:	b124      	cbz	r4, d567a <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d5670:	212e      	movs	r1, #46	; 0x2e
   d5672:	4630      	mov	r0, r6
   d5674:	f001 fbf0 	bl	d6e58 <_ZN5Print5printEc>
   d5678:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d567a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d567e:	220a      	movs	r2, #10
   d5680:	4630      	mov	r0, r6
   d5682:	f001 fbf8 	bl	d6e76 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5686:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5688:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d568a:	d1f0      	bne.n	d566e <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d568c:	4620      	mov	r0, r4
    }
    return n;
}
   d568e:	b00d      	add	sp, #52	; 0x34
   d5690:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d5694 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d5694:	b510      	push	{r4, lr}
   d5696:	4b05      	ldr	r3, [pc, #20]	; (d56ac <_ZN9IPAddressC1Ev+0x18>)
   d5698:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d569a:	2211      	movs	r2, #17
   d569c:	f840 3b04 	str.w	r3, [r0], #4
   d56a0:	2100      	movs	r1, #0
   d56a2:	f002 fdfd 	bl	d82a0 <memset>
{
    clear();
}
   d56a6:	4620      	mov	r0, r4
   d56a8:	bd10      	pop	{r4, pc}
   d56aa:	bf00      	nop
   d56ac:	000d9d88 	.word	0x000d9d88

000d56b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d56b0:	4603      	mov	r3, r0
   d56b2:	4a07      	ldr	r2, [pc, #28]	; (d56d0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d56b4:	b510      	push	{r4, lr}
   d56b6:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d56ba:	f101 0210 	add.w	r2, r1, #16
   d56be:	f851 4b04 	ldr.w	r4, [r1], #4
   d56c2:	f843 4b04 	str.w	r4, [r3], #4
   d56c6:	4291      	cmp	r1, r2
   d56c8:	d1f9      	bne.n	d56be <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d56ca:	780a      	ldrb	r2, [r1, #0]
   d56cc:	701a      	strb	r2, [r3, #0]
}
   d56ce:	bd10      	pop	{r4, pc}
   d56d0:	000d9d88 	.word	0x000d9d88

000d56d4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d56d4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d56d6:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d56da:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d56de:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d56e2:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d56e6:	2304      	movs	r3, #4
   d56e8:	6041      	str	r1, [r0, #4]
   d56ea:	7503      	strb	r3, [r0, #20]
   d56ec:	bd10      	pop	{r4, pc}

000d56ee <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d56ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d56f0:	780d      	ldrb	r5, [r1, #0]
   d56f2:	788b      	ldrb	r3, [r1, #2]
   d56f4:	784a      	ldrb	r2, [r1, #1]
   d56f6:	78c9      	ldrb	r1, [r1, #3]
   d56f8:	9100      	str	r1, [sp, #0]
   d56fa:	4629      	mov	r1, r5
   d56fc:	f7ff ffea 	bl	d56d4 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5700:	b003      	add	sp, #12
   d5702:	bd30      	pop	{r4, r5, pc}

000d5704 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:
#include <cstdarg>

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
   d5704:	f100 0210 	add.w	r2, r0, #16
    size_t n = 1;
   d5708:	2301      	movs	r3, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d570a:	f812 1c10 	ldrb.w	r1, [r2, #-16]
   d570e:	2901      	cmp	r1, #1
   d5710:	4610      	mov	r0, r2
   d5712:	d104      	bne.n	d571e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x1a>
            n += t->size * 2; // Number of name and value tokens
   d5714:	f852 1c04 	ldr.w	r1, [r2, #-4]
   d5718:	eb03 0341 	add.w	r3, r3, r1, lsl #1
   d571c:	e004      	b.n	d5728 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x24>
        } else if (t->type == JSMN_ARRAY) {
   d571e:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d5720:	bf04      	itt	eq
   d5722:	f852 1c04 	ldreq.w	r1, [r2, #-4]
   d5726:	185b      	addeq	r3, r3, r1
namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
    do {
   d5728:	3b01      	subs	r3, #1
   d572a:	f102 0210 	add.w	r2, r2, #16
   d572e:	d1ec      	bne.n	d570a <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
        }
        ++t;
        --n;
    } while (n);
    return t;
}
   d5730:	4770      	bx	lr

000d5732 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d5732:	b40e      	push	{r1, r2, r3}
   d5734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5738:	b087      	sub	sp, #28
   d573a:	af00      	add	r7, sp, #0
   d573c:	f107 0434 	add.w	r4, r7, #52	; 0x34
   d5740:	4605      	mov	r5, r0
   d5742:	f854 6b04 	ldr.w	r6, [r4], #4
    char buf[16];
    va_list args;
    va_start(args, fmt);
   d5746:	607c      	str	r4, [r7, #4]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5748:	4623      	mov	r3, r4
   d574a:	4632      	mov	r2, r6
   d574c:	2110      	movs	r1, #16
   d574e:	f107 0008 	add.w	r0, r7, #8
   d5752:	f7ff fdd5 	bl	d5300 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d5756:	280f      	cmp	r0, #15
   d5758:	d916      	bls.n	d5788 <_ZN5spark10JSONWriter6printfEPKcz+0x56>
        char buf[n + 1]; // Use larger buffer
   d575a:	f100 0308 	add.w	r3, r0, #8
   d575e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d5762:	46e8      	mov	r8, sp
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
   d5764:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5768:	4632      	mov	r2, r6
   d576a:	1c41      	adds	r1, r0, #1
   d576c:	4623      	mov	r3, r4
   d576e:	4668      	mov	r0, sp
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
        char buf[n + 1]; // Use larger buffer
        va_start(args, fmt);
   d5770:	607c      	str	r4, [r7, #4]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d5772:	f7ff fdc5 	bl	d5300 <vsnprintf>
        va_end(args);
        if (n > 0) {
   d5776:	1e02      	subs	r2, r0, #0
   d5778:	dd04      	ble.n	d5784 <_ZN5spark10JSONWriter6printfEPKcz+0x52>
            write(buf, n);
   d577a:	682b      	ldr	r3, [r5, #0]
   d577c:	4669      	mov	r1, sp
   d577e:	689b      	ldr	r3, [r3, #8]
   d5780:	4628      	mov	r0, r5
   d5782:	4798      	blx	r3
   d5784:	46c5      	mov	sp, r8
   d5786:	e007      	b.n	d5798 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        }
    } else if (n > 0) {
   d5788:	b130      	cbz	r0, d5798 <_ZN5spark10JSONWriter6printfEPKcz+0x66>
        write(buf, n);
   d578a:	682b      	ldr	r3, [r5, #0]
   d578c:	4602      	mov	r2, r0
   d578e:	689b      	ldr	r3, [r3, #8]
   d5790:	f107 0108 	add.w	r1, r7, #8
   d5794:	4628      	mov	r0, r5
   d5796:	4798      	blx	r3
    }
}
   d5798:	371c      	adds	r7, #28
   d579a:	46bd      	mov	sp, r7
   d579c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d57a0:	b003      	add	sp, #12
   d57a2:	4770      	bx	lr

000d57a4 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d57a4:	b513      	push	{r0, r1, r4, lr}
   d57a6:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d57a8:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d57aa:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d57ae:	6894      	ldr	r4, [r2, #8]
   d57b0:	4619      	mov	r1, r3
   d57b2:	2201      	movs	r2, #1
   d57b4:	47a0      	blx	r4
}
   d57b6:	b002      	add	sp, #8
   d57b8:	bd10      	pop	{r4, pc}

000d57ba <_ZNK5spark9JSONValue4typeEv>:
        return 0.0;
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
   d57ba:	6883      	ldr	r3, [r0, #8]
   d57bc:	b1fb      	cbz	r3, d57fe <_ZNK5spark9JSONValue4typeEv+0x44>
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
   d57be:	781a      	ldrb	r2, [r3, #0]
   d57c0:	2a03      	cmp	r2, #3
   d57c2:	d81a      	bhi.n	d57fa <_ZNK5spark9JSONValue4typeEv+0x40>
   d57c4:	e8df f002 	tbb	[pc, r2]
   d57c8:	1d021704 	.word	0x1d021704
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
   d57cc:	2005      	movs	r0, #5
   d57ce:	4770      	bx	lr
    if (!t_) {
        return JSON_TYPE_INVALID;
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
   d57d0:	6802      	ldr	r2, [r0, #0]
   d57d2:	685b      	ldr	r3, [r3, #4]
   d57d4:	6852      	ldr	r2, [r2, #4]
   d57d6:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d57d8:	282d      	cmp	r0, #45	; 0x2d
   d57da:	d014      	beq.n	d5806 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d57dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d57e0:	2b09      	cmp	r3, #9
   d57e2:	d910      	bls.n	d5806 <_ZNK5spark9JSONValue4typeEv+0x4c>
            return JSON_TYPE_NUMBER;
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d57e4:	2874      	cmp	r0, #116	; 0x74
   d57e6:	d010      	beq.n	d580a <_ZNK5spark9JSONValue4typeEv+0x50>
   d57e8:	2866      	cmp	r0, #102	; 0x66
   d57ea:	d00e      	beq.n	d580a <_ZNK5spark9JSONValue4typeEv+0x50>
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d57ec:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d57f0:	4258      	negs	r0, r3
   d57f2:	4158      	adcs	r0, r3
   d57f4:	4770      	bx	lr
    case JSMN_STRING:
        return JSON_TYPE_STRING;
    case JSMN_ARRAY:
        return JSON_TYPE_ARRAY;
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
   d57f6:	2006      	movs	r0, #6
   d57f8:	4770      	bx	lr
    default:
        return JSON_TYPE_INVALID;
   d57fa:	2000      	movs	r0, #0
   d57fc:	4770      	bx	lr
    }
}

spark::JSONType spark::JSONValue::type() const {
    if (!t_) {
        return JSON_TYPE_INVALID;
   d57fe:	4618      	mov	r0, r3
   d5800:	4770      	bx	lr
            return JSON_TYPE_NULL;
        }
        return JSON_TYPE_INVALID;
    }
    case JSMN_STRING:
        return JSON_TYPE_STRING;
   d5802:	2004      	movs	r0, #4
   d5804:	4770      	bx	lr
    }
    switch (t_->type) {
    case JSMN_PRIMITIVE: {
        const char c = d_->json[t_->start];
        if (c == '-' || (c >= '0' && c <= '9')) {
            return JSON_TYPE_NUMBER;
   d5806:	2003      	movs	r0, #3
   d5808:	4770      	bx	lr
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
            return JSON_TYPE_BOOL;
   d580a:	2002      	movs	r0, #2
    case JSMN_OBJECT:
        return JSON_TYPE_OBJECT;
    default:
        return JSON_TYPE_INVALID;
    }
}
   d580c:	4770      	bx	lr

000d580e <_ZNK5spark9JSONValue5toIntEv>:
    default:
        return false;
    }
}

int spark::JSONValue::toInt() const {
   d580e:	b510      	push	{r4, lr}
   d5810:	4604      	mov	r4, r0
    switch (type()) {
   d5812:	f7ff ffd2 	bl	d57ba <_ZNK5spark9JSONValue4typeEv>
   d5816:	2802      	cmp	r0, #2
   d5818:	d00d      	beq.n	d5836 <_ZNK5spark9JSONValue5toIntEv+0x28>
   d581a:	d316      	bcc.n	d584a <_ZNK5spark9JSONValue5toIntEv+0x3c>
   d581c:	2804      	cmp	r0, #4
   d581e:	d814      	bhi.n	d584a <_ZNK5spark9JSONValue5toIntEv+0x3c>
    }
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
   d5820:	6822      	ldr	r2, [r4, #0]
   d5822:	68a3      	ldr	r3, [r4, #8]
        return strtol(s, nullptr, 10);
   d5824:	6850      	ldr	r0, [r2, #4]
   d5826:	685b      	ldr	r3, [r3, #4]
   d5828:	220a      	movs	r2, #10
   d582a:	2100      	movs	r1, #0
   d582c:	4418      	add	r0, r3
    }
    default:
        return 0;
    }
}
   d582e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    case JSON_TYPE_NUMBER:
    case JSON_TYPE_STRING: {
        // toInt() may produce incorrect results for floating point numbers, since we want to keep
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
   d5832:	f003 bdbb 	b.w	d93ac <strtol>
}

int spark::JSONValue::toInt() const {
    switch (type()) {
    case JSON_TYPE_BOOL: {
        const char* const s = d_->json + t_->start;
   d5836:	6822      	ldr	r2, [r4, #0]
   d5838:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d583a:	6852      	ldr	r2, [r2, #4]
   d583c:	685b      	ldr	r3, [r3, #4]
   d583e:	5cd0      	ldrb	r0, [r2, r3]
   d5840:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d5844:	4258      	negs	r0, r3
   d5846:	4158      	adcs	r0, r3
   d5848:	bd10      	pop	{r4, pc}
        // compile-time dependency on strtod() optional
        const char* const s = d_->json + t_->start;
        return strtol(s, nullptr, 10);
    }
    default:
        return 0;
   d584a:	2000      	movs	r0, #0
    }
}
   d584c:	bd10      	pop	{r4, pc}

000d584e <_ZN5spark18JSONObjectIterator4nextEv>:
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d584e:	b510      	push	{r4, lr}
    if (!n_) {
   d5850:	6943      	ldr	r3, [r0, #20]
        n_ = t->size; // Number of properties
        d_ = d;
    }
}

bool spark::JSONObjectIterator::next() {
   d5852:	4604      	mov	r4, r0
    if (!n_) {
   d5854:	b15b      	cbz	r3, d586e <_ZN5spark18JSONObjectIterator4nextEv+0x20>
        return false;
    }
    k_ = t_; // Name
   d5856:	6880      	ldr	r0, [r0, #8]
   d5858:	60e0      	str	r0, [r4, #12]
    ++t_;
    v_ = t_; // Value
    --n_;
   d585a:	3b01      	subs	r3, #1
bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
    }
    k_ = t_; // Name
    ++t_;
   d585c:	3010      	adds	r0, #16
   d585e:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d5860:	6120      	str	r0, [r4, #16]
    --n_;
   d5862:	6163      	str	r3, [r4, #20]
    if (n_) {
   d5864:	b12b      	cbz	r3, d5872 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        t_ = skipToken(t_);
   d5866:	f7ff ff4d 	bl	d5704 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d586a:	60a0      	str	r0, [r4, #8]
   d586c:	e001      	b.n	d5872 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
    }
}

bool spark::JSONObjectIterator::next() {
    if (!n_) {
        return false;
   d586e:	4618      	mov	r0, r3
   d5870:	bd10      	pop	{r4, pc}
    v_ = t_; // Value
    --n_;
    if (n_) {
        t_ = skipToken(t_);
    }
    return true;
   d5872:	2001      	movs	r0, #1
}
   d5874:	bd10      	pop	{r4, pc}

000d5876 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d5876:	b510      	push	{r4, lr}
    write('}');
   d5878:	217d      	movs	r1, #125	; 0x7d
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
   d587a:	4604      	mov	r4, r0
    write('}');
   d587c:	f7ff ff92 	bl	d57a4 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d5880:	2301      	movs	r3, #1
   d5882:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d5884:	4620      	mov	r0, r4
   d5886:	bd10      	pop	{r4, pc}

000d5888 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
   d5888:	b508      	push	{r3, lr}
    switch (state_) {
   d588a:	7903      	ldrb	r3, [r0, #4]
   d588c:	2b01      	cmp	r3, #1
   d588e:	d002      	beq.n	d5896 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d5890:	2b02      	cmp	r3, #2
   d5892:	d002      	beq.n	d589a <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
   d5894:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
   d5896:	212c      	movs	r1, #44	; 0x2c
   d5898:	e000      	b.n	d589c <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
   d589a:	213a      	movs	r1, #58	; 0x3a
   d589c:	f7ff ff82 	bl	d57a4 <_ZN5spark10JSONWriter5writeEc>
   d58a0:	bd08      	pop	{r3, pc}

000d58a2 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
   d58a2:	b510      	push	{r4, lr}
   d58a4:	4604      	mov	r4, r0
    writeSeparator();
   d58a6:	f7ff ffef 	bl	d5888 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d58aa:	4620      	mov	r0, r4
   d58ac:	217b      	movs	r1, #123	; 0x7b
   d58ae:	f7ff ff79 	bl	d57a4 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d58b2:	2300      	movs	r3, #0
   d58b4:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d58b6:	4620      	mov	r0, r4
   d58b8:	bd10      	pop	{r4, pc}
	...

000d58bc <_ZN5spark10JSONWriter5valueEi>:
    }
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(int val) {
   d58bc:	b538      	push	{r3, r4, r5, lr}
   d58be:	4604      	mov	r4, r0
   d58c0:	460d      	mov	r5, r1
    writeSeparator();
   d58c2:	f7ff ffe1 	bl	d5888 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d58c6:	6823      	ldr	r3, [r4, #0]
   d58c8:	4904      	ldr	r1, [pc, #16]	; (d58dc <_ZN5spark10JSONWriter5valueEi+0x20>)
   d58ca:	68db      	ldr	r3, [r3, #12]
   d58cc:	4620      	mov	r0, r4
   d58ce:	462a      	mov	r2, r5
   d58d0:	4798      	blx	r3
    state_ = NEXT;
   d58d2:	2301      	movs	r3, #1
   d58d4:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d58d6:	4620      	mov	r0, r4
   d58d8:	bd38      	pop	{r3, r4, r5, pc}
   d58da:	bf00      	nop
   d58dc:	000da2bb 	.word	0x000da2bb

000d58e0 <_ZN5spark10JSONWriter5valueEj>:

spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d58e0:	b538      	push	{r3, r4, r5, lr}
   d58e2:	4604      	mov	r4, r0
   d58e4:	460d      	mov	r5, r1
    writeSeparator();
   d58e6:	f7ff ffcf 	bl	d5888 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d58ea:	6823      	ldr	r3, [r4, #0]
   d58ec:	4904      	ldr	r1, [pc, #16]	; (d5900 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d58ee:	68db      	ldr	r3, [r3, #12]
   d58f0:	4620      	mov	r0, r4
   d58f2:	462a      	mov	r2, r5
   d58f4:	4798      	blx	r3
    state_ = NEXT;
   d58f6:	2301      	movs	r3, #1
   d58f8:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d58fa:	4620      	mov	r0, r4
   d58fc:	bd38      	pop	{r3, r4, r5, pc}
   d58fe:	bf00      	nop
   d5900:	000d9ae3 	.word	0x000d9ae3

000d5904 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d5904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5906:	460d      	mov	r5, r1
   d5908:	4617      	mov	r7, r2
    write('"');
   d590a:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d590c:	4604      	mov	r4, r0
   d590e:	442f      	add	r7, r5
    write('"');
   d5910:	f7ff ff48 	bl	d57a4 <_ZN5spark10JSONWriter5writeEc>
   d5914:	462a      	mov	r2, r5
    const char* const end = str + size;
   d5916:	4629      	mov	r1, r5
    const char *s = str;
    while (s != end) {
   d5918:	42ba      	cmp	r2, r7
   d591a:	d038      	beq.n	d598e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
   d591c:	4616      	mov	r6, r2
   d591e:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d5922:	2d22      	cmp	r5, #34	; 0x22
   d5924:	d003      	beq.n	d592e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d5926:	2d5c      	cmp	r5, #92	; 0x5c
   d5928:	d001      	beq.n	d592e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
   d592a:	2d1f      	cmp	r5, #31
   d592c:	d82d      	bhi.n	d598a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
   d592e:	6823      	ldr	r3, [r4, #0]
   d5930:	1a52      	subs	r2, r2, r1
   d5932:	689b      	ldr	r3, [r3, #8]
   d5934:	4620      	mov	r0, r4
   d5936:	4798      	blx	r3
            write('\\');
   d5938:	215c      	movs	r1, #92	; 0x5c
   d593a:	4620      	mov	r0, r4
   d593c:	f7ff ff32 	bl	d57a4 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d5940:	2d0c      	cmp	r5, #12
   d5942:	d019      	beq.n	d5978 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
   d5944:	d807      	bhi.n	d5956 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
   d5946:	2d09      	cmp	r5, #9
   d5948:	d00f      	beq.n	d596a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
   d594a:	2d0a      	cmp	r5, #10
   d594c:	d012      	beq.n	d5974 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
   d594e:	2d08      	cmp	r5, #8
   d5950:	d114      	bne.n	d597c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d5952:	2162      	movs	r1, #98	; 0x62
   d5954:	e00a      	b.n	d596c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
   d5956:	2d22      	cmp	r5, #34	; 0x22
   d5958:	d005      	beq.n	d5966 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d595a:	2d5c      	cmp	r5, #92	; 0x5c
   d595c:	d003      	beq.n	d5966 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d595e:	2d0d      	cmp	r5, #13
   d5960:	d10c      	bne.n	d597c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
   d5962:	2172      	movs	r1, #114	; 0x72
   d5964:	e002      	b.n	d596c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
   d5966:	4629      	mov	r1, r5
   d5968:	e000      	b.n	d596c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
   d596a:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
   d596c:	4620      	mov	r0, r4
   d596e:	f7ff ff19 	bl	d57a4 <_ZN5spark10JSONWriter5writeEc>
                break;
   d5972:	e009      	b.n	d5988 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
   d5974:	216e      	movs	r1, #110	; 0x6e
   d5976:	e7f9      	b.n	d596c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
   d5978:	2166      	movs	r1, #102	; 0x66
   d597a:	e7f7      	b.n	d596c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d597c:	6823      	ldr	r3, [r4, #0]
   d597e:	490a      	ldr	r1, [pc, #40]	; (d59a8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
   d5980:	68db      	ldr	r3, [r3, #12]
   d5982:	462a      	mov	r2, r5
   d5984:	4620      	mov	r0, r4
   d5986:	4798      	blx	r3
                break;
            }
            str = s + 1;
   d5988:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
   d598a:	4632      	mov	r2, r6
   d598c:	e7c4      	b.n	d5918 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
   d598e:	4291      	cmp	r1, r2
   d5990:	d004      	beq.n	d599c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
   d5992:	6823      	ldr	r3, [r4, #0]
   d5994:	1a52      	subs	r2, r2, r1
   d5996:	689d      	ldr	r5, [r3, #8]
   d5998:	4620      	mov	r0, r4
   d599a:	47a8      	blx	r5
    }
    write('"');
   d599c:	2122      	movs	r1, #34	; 0x22
   d599e:	4620      	mov	r0, r4
   d59a0:	f7ff ff00 	bl	d57a4 <_ZN5spark10JSONWriter5writeEc>
   d59a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d59a6:	bf00      	nop
   d59a8:	000d9db1 	.word	0x000d9db1

000d59ac <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d59ac:	b570      	push	{r4, r5, r6, lr}
   d59ae:	4604      	mov	r4, r0
   d59b0:	460d      	mov	r5, r1
   d59b2:	4616      	mov	r6, r2
    writeSeparator();
   d59b4:	f7ff ff68 	bl	d5888 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d59b8:	4620      	mov	r0, r4
   d59ba:	4632      	mov	r2, r6
   d59bc:	4629      	mov	r1, r5
   d59be:	f7ff ffa1 	bl	d5904 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d59c2:	2302      	movs	r3, #2
   d59c4:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d59c6:	4620      	mov	r0, r4
   d59c8:	bd70      	pop	{r4, r5, r6, pc}

000d59ca <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d59ca:	b570      	push	{r4, r5, r6, lr}
   d59cc:	4604      	mov	r4, r0
   d59ce:	460d      	mov	r5, r1
   d59d0:	4616      	mov	r6, r2
    writeSeparator();
   d59d2:	f7ff ff59 	bl	d5888 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d59d6:	4620      	mov	r0, r4
   d59d8:	4632      	mov	r2, r6
   d59da:	4629      	mov	r1, r5
   d59dc:	f7ff ff92 	bl	d5904 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d59e0:	2301      	movs	r3, #1
   d59e2:	7123      	strb	r3, [r4, #4]
    return *this;
}
   d59e4:	4620      	mov	r0, r4
   d59e6:	bd70      	pop	{r4, r5, r6, pc}

000d59e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
    t->end = str - json; // Update string length
    return true;
}

// spark::JSONString
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d59e8:	b510      	push	{r4, lr}

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d59ea:	2300      	movs	r3, #0
   d59ec:	4604      	mov	r4, r0
   d59ee:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d59f0:	6043      	str	r3, [r0, #4]
}

// spark::JSONString
inline spark::JSONString::JSONString() :
        s_(""),
        n_(0) {
   d59f2:	4810      	ldr	r0, [pc, #64]	; (d5a34 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x4c>)
   d59f4:	60a0      	str	r0, [r4, #8]
   d59f6:	60e3      	str	r3, [r4, #12]
        JSONString() {
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d59f8:	b1d1      	cbz	r1, d5a30 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
   d59fa:	780b      	ldrb	r3, [r1, #0]
   d59fc:	2b03      	cmp	r3, #3
   d59fe:	d006      	beq.n	d5a0e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d5a00:	b9b3      	cbnz	r3, d5a30 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x48>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d5a02:	6813      	ldr	r3, [r2, #0]
   d5a04:	6858      	ldr	r0, [r3, #4]
   d5a06:	684b      	ldr	r3, [r1, #4]
   d5a08:	5cc3      	ldrb	r3, [r0, r3]
   d5a0a:	2b6e      	cmp	r3, #110	; 0x6e
   d5a0c:	d008      	beq.n	d5a20 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x38>
            s_ = d->json + t->start;
   d5a0e:	6813      	ldr	r3, [r2, #0]
   d5a10:	6858      	ldr	r0, [r3, #4]
   d5a12:	684b      	ldr	r3, [r1, #4]
   d5a14:	4403      	add	r3, r0
   d5a16:	60a3      	str	r3, [r4, #8]
            n_ = t->end - t->start;
   d5a18:	688b      	ldr	r3, [r1, #8]
   d5a1a:	6849      	ldr	r1, [r1, #4]
   d5a1c:	1a5b      	subs	r3, r3, r1
   d5a1e:	60e3      	str	r3, [r4, #12]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5a20:	4611      	mov	r1, r2
   d5a22:	4620      	mov	r0, r4
   d5a24:	f851 3b04 	ldr.w	r3, [r1], #4
   d5a28:	f840 3b04 	str.w	r3, [r0], #4
   d5a2c:	f7ff fca6 	bl	d537c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        }
        d_ = d;
    }
}
   d5a30:	4620      	mov	r0, r4
   d5a32:	bd10      	pop	{r4, pc}
   d5a34:	000d9e89 	.word	0x000d9e89

000d5a38 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5a38:	2300      	movs	r3, #0
bool spark::JSONString::operator==(const JSONString &str) const {
    return n_ == str.n_ && strncmp(s_, str.s_, n_) == 0;
}

// spark::JSONObjectIterator
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5a3a:	b510      	push	{r4, lr}
   d5a3c:	4604      	mov	r4, r0
   d5a3e:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a40:	6043      	str	r3, [r0, #4]
// spark::JSONObjectIterator
inline spark::JSONObjectIterator::JSONObjectIterator() :
        t_(nullptr),
        k_(nullptr),
        v_(nullptr),
        n_(0) {
   d5a42:	6083      	str	r3, [r0, #8]
   d5a44:	60c3      	str	r3, [r0, #12]
   d5a46:	6103      	str	r3, [r0, #16]
   d5a48:	6143      	str	r3, [r0, #20]
        JSONObjectIterator() {
    if (t && t->type == JSMN_OBJECT) {
   d5a4a:	b171      	cbz	r1, d5a6a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
   d5a4c:	780b      	ldrb	r3, [r1, #0]
   d5a4e:	2b01      	cmp	r3, #1
   d5a50:	d10b      	bne.n	d5a6a <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x32>
        t_ = t + 1; // First property's name
   d5a52:	f101 0310 	add.w	r3, r1, #16
   d5a56:	6083      	str	r3, [r0, #8]
        n_ = t->size; // Number of properties
   d5a58:	68cb      	ldr	r3, [r1, #12]
   d5a5a:	6143      	str	r3, [r0, #20]
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5a5c:	4611      	mov	r1, r2
   d5a5e:	f851 3b04 	ldr.w	r3, [r1], #4
   d5a62:	f840 3b04 	str.w	r3, [r0], #4
   d5a66:	f7ff fc89 	bl	d537c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        d_ = d;
    }
}
   d5a6a:	4620      	mov	r0, r4
   d5a6c:	bd10      	pop	{r4, pc}

000d5a6e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:

    public:
      typedef _Tp   element_type;

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d5a6e:	2300      	movs	r3, #0
        }
    }
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d5a70:	b510      	push	{r4, lr}
   d5a72:	4604      	mov	r4, r0
   d5a74:	6003      	str	r3, [r0, #0]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d5a76:	6043      	str	r3, [r0, #4]
        JSONValue() {
    if (t) {
        t_ = t;
   d5a78:	6081      	str	r1, [r0, #8]
};

// spark::JSONValue
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
        JSONValue() {
    if (t) {
   d5a7a:	b131      	cbz	r1, d5a8a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x1c>
    __enable_shared_from_this_helper(const __shared_count<_Lp>&, ...) noexcept
    { }


  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d5a7c:	4611      	mov	r1, r2
   d5a7e:	f851 3b04 	ldr.w	r3, [r1], #4
   d5a82:	f840 3b04 	str.w	r3, [r0], #4
   d5a86:	f7ff fc79 	bl	d537c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEaSERKS2_>
        t_ = t;
        d_ = d;
    }
}
   d5a8a:	4620      	mov	r0, r4
   d5a8c:	bd10      	pop	{r4, pc}

000d5a8e <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d5a8e:	6880      	ldr	r0, [r0, #8]
   d5a90:	6803      	ldr	r3, [r0, #0]
   d5a92:	68db      	ldr	r3, [r3, #12]
   d5a94:	4718      	bx	r3

000d5a96 <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
inline void spark::StreamLogHandler::printf(const char *fmt, ArgsT... args) {
    stream_->printf(fmt, args...);
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
   d5a96:	4770      	bx	lr

000d5a98 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d5a98:	b119      	cbz	r1, d5aa2 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d5a9a:	680b      	ldr	r3, [r1, #0]
   d5a9c:	4608      	mov	r0, r1
   d5a9e:	685b      	ldr	r3, [r3, #4]
   d5aa0:	4718      	bx	r3
   d5aa2:	4770      	bx	lr

000d5aa4 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>:
}

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d5aa4:	b119      	cbz	r1, d5aae <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print+0xa>
   d5aa6:	680b      	ldr	r3, [r1, #0]
   d5aa8:	4608      	mov	r0, r1
   d5aaa:	685b      	ldr	r3, [r3, #4]
   d5aac:	4718      	bx	r3
   d5aae:	4770      	bx	lr

000d5ab0 <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5ab0:	4770      	bx	lr

000d5ab2 <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
    virtual LogHandler* createHandler(const char *type, LogLevel level, LogCategoryFilters filters, Print *stream,
            const JSONValue &params) = 0; // TODO: Use some generic container or a buffer instead of JSONValue
    virtual void destroyHandler(LogHandler *handler);
};

class DefaultLogHandlerFactory: public LogHandlerFactory {
   d5ab2:	4770      	bx	lr

000d5ab4 <_ZN5spark16JSONStreamWriterD1Ev>:
    void writeSeparator();
    void writeEscaped(const char *data, size_t size);
    void write(char c);
};

class JSONStreamWriter: public JSONWriter {
   d5ab4:	4770      	bx	lr

000d5ab6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
    return s;
}
#endif

// Iterates over subcategory names separated by '.' character
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d5ab6:	b538      	push	{r3, r4, r5, lr}
   d5ab8:	4604      	mov	r4, r0
   d5aba:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d5abc:	6800      	ldr	r0, [r0, #0]
   d5abe:	212e      	movs	r1, #46	; 0x2e
   d5ac0:	f002 fe7a 	bl	d87b8 <strchrnul>
    size = s - category;
   d5ac4:	6823      	ldr	r3, [r4, #0]
   d5ac6:	1ac3      	subs	r3, r0, r3
   d5ac8:	602b      	str	r3, [r5, #0]
    if (size) {
   d5aca:	b123      	cbz	r3, d5ad6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d5acc:	7803      	ldrb	r3, [r0, #0]
   d5ace:	b103      	cbz	r3, d5ad2 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d5ad0:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5ad2:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d5ad4:	6020      	str	r0, [r4, #0]
        }
        std::swap(s, category);
        return s;
    }
    return nullptr;
   d5ad6:	4618      	mov	r0, r3
}
   d5ad8:	bd38      	pop	{r3, r4, r5, pc}

000d5ada <_ZN5spark16JSONStreamWriterD0Ev>:
   d5ada:	b510      	push	{r4, lr}
   d5adc:	210c      	movs	r1, #12
   d5ade:	4604      	mov	r4, r0
   d5ae0:	f001 feaf 	bl	d7842 <_ZdlPvj>
   d5ae4:	4620      	mov	r0, r4
   d5ae6:	bd10      	pop	{r4, pc}

000d5ae8 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d5ae8:	b510      	push	{r4, lr}
   d5aea:	2104      	movs	r1, #4
   d5aec:	4604      	mov	r4, r0
   d5aee:	f001 fea8 	bl	d7842 <_ZdlPvj>
   d5af2:	4620      	mov	r0, r4
   d5af4:	bd10      	pop	{r4, pc}

000d5af6 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:

    virtual Print* createStream(const char *type, const JSONValue &params) = 0;
    virtual void destroyStream(Print *stream);
};

class DefaultOutputStreamFactory: public OutputStreamFactory {
   d5af6:	b510      	push	{r4, lr}
   d5af8:	2104      	movs	r1, #4
   d5afa:	4604      	mov	r4, r0
   d5afc:	f001 fea1 	bl	d7842 <_ZdlPvj>
   d5b00:	4620      	mov	r0, r4
   d5b02:	bd10      	pop	{r4, pc}

000d5b04 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d5b04:	b538      	push	{r3, r4, r5, lr}
   d5b06:	460c      	mov	r4, r1
   d5b08:	4605      	mov	r5, r0
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d5b0a:	f001 fd07 	bl	d751c <_Z16_fetch_usbserialv>
   d5b0e:	4284      	cmp	r4, r0
   d5b10:	d00d      	beq.n	d5b2e <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2a>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d5b12:	f001 fc7b 	bl	d740c <_Z22__fetch_global_Serial1v>
   d5b16:	4284      	cmp	r4, r0
   d5b18:	d105      	bne.n	d5b26 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x22>
        Serial1.end();
   d5b1a:	f001 fc77 	bl	d740c <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d5b1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
        Serial1.end();
   d5b22:	f001 bc6c 	b.w	d73fe <_ZN11USARTSerial3endEv>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
   d5b26:	4621      	mov	r1, r4
   d5b28:	4628      	mov	r0, r5
   d5b2a:	f7ff ffbb 	bl	d5aa4 <_ZN5spark19OutputStreamFactory13destroyStreamEP5Print>
   d5b2e:	bd38      	pop	{r3, r4, r5, pc}

000d5b30 <_ZNK5spark10JSONStringeqEPKc.isra.7>:

inline bool spark::JSONString::isEmpty() const {
    return !n_;
}

inline bool spark::JSONString::operator==(const char *str) const {
   d5b30:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d5b32:	f002 fe4b 	bl	d87cc <strcmp>
}
   d5b36:	fab0 f080 	clz	r0, r0
   d5b3a:	0940      	lsrs	r0, r0, #5
   d5b3c:	bd08      	pop	{r3, pc}

000d5b3e <_ZN5spark10JSONWriter5valueEPKc>:

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5b3e:	b538      	push	{r3, r4, r5, lr}
   d5b40:	4605      	mov	r5, r0
    return value(val, strlen(val));
   d5b42:	4608      	mov	r0, r1

inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d5b44:	460c      	mov	r4, r1
    return value(val, strlen(val));
   d5b46:	f003 fb67 	bl	d9218 <strlen>
   d5b4a:	4621      	mov	r1, r4
   d5b4c:	4602      	mov	r2, r0
   d5b4e:	4628      	mov	r0, r5
}
   d5b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter& spark::JSONWriter::name(const String &name) {
    return this->name(name.c_str(), name.length());
}

inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
   d5b54:	f7ff bf39 	b.w	d59ca <_ZN5spark10JSONWriter5valueEPKcj>

000d5b58 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d5b58:	6800      	ldr	r0, [r0, #0]
   d5b5a:	f7ff b943 	b.w	d4de4 <os_mutex_recursive_lock>

000d5b5e <_ZN5spark16StreamLogHandler5writeEPKc>:

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5b5e:	b570      	push	{r4, r5, r6, lr}
   d5b60:	4604      	mov	r4, r0
    write(str, strlen(str));
   d5b62:	4608      	mov	r0, r1

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
   d5b64:	460d      	mov	r5, r1
    write(str, strlen(str));
   d5b66:	f003 fb57 	bl	d9218 <strlen>
   d5b6a:	6823      	ldr	r3, [r4, #0]
   d5b6c:	4602      	mov	r2, r0
   d5b6e:	4629      	mov	r1, r5
   d5b70:	4620      	mov	r0, r4
   d5b72:	68db      	ldr	r3, [r3, #12]
}
   d5b74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
}

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
   d5b78:	4718      	bx	r3

000d5b7a <_ZN5spark16StreamLogHandler5writeEc>:
}

inline void spark::StreamLogHandler::write(char c) {
   d5b7a:	b513      	push	{r0, r1, r4, lr}
   d5b7c:	ab02      	add	r3, sp, #8
    write(&c, 1);
   d5b7e:	6802      	ldr	r2, [r0, #0]

inline void spark::StreamLogHandler::write(const char *str) {
    write(str, strlen(str));
}

inline void spark::StreamLogHandler::write(char c) {
   d5b80:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
   d5b84:	68d4      	ldr	r4, [r2, #12]
   d5b86:	4619      	mov	r1, r3
   d5b88:	2201      	movs	r2, #1
   d5b8a:	47a0      	blx	r4
}
   d5b8c:	b002      	add	sp, #8
   d5b8e:	bd10      	pop	{r4, pc}

000d5b90 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5b94:	6845      	ldr	r5, [r0, #4]
   d5b96:	6807      	ldr	r7, [r0, #0]
   d5b98:	b085      	sub	sp, #20
   d5b9a:	4691      	mov	r9, r2
   d5b9c:	2214      	movs	r2, #20
   d5b9e:	4355      	muls	r5, r2
   d5ba0:	9301      	str	r3, [sp, #4]
   d5ba2:	10ab      	asrs	r3, r5, #2
   d5ba4:	4d19      	ldr	r5, [pc, #100]	; (d5c0c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d5ba6:	9202      	str	r2, [sp, #8]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d5ba8:	435d      	muls	r5, r3
   d5baa:	468b      	mov	fp, r1
   d5bac:	463c      	mov	r4, r7
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5bae:	2301      	movs	r3, #1
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d5bb0:	2d00      	cmp	r5, #0
   d5bb2:	9303      	str	r3, [sp, #12]
   d5bb4:	dd23      	ble.n	d5bfe <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x6e>
              random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      __i += __n;
   d5bb6:	9b02      	ldr	r3, [sp, #8]
	{
	  _DistanceType __half = __len >> 1;
   d5bb8:	106e      	asrs	r6, r5, #1
   d5bba:	fb03 f006 	mul.w	r0, r3, r6
   d5bbe:	eb04 0800 	add.w	r8, r4, r0

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
    // Using binary search to find existent node or suitable position for new node
    return std::distance(nodes.begin(), std::lower_bound(nodes.begin(), nodes.end(), std::make_pair(name, size),
            [&found](const Node &node, const std::pair<const char*, size_t> &value) {
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d5bc2:	464a      	mov	r2, r9
   d5bc4:	f8b8 a004 	ldrh.w	sl, [r8, #4]
   d5bc8:	5820      	ldr	r0, [r4, r0]
   d5bca:	45d1      	cmp	r9, sl
   d5bcc:	bf28      	it	cs
   d5bce:	4652      	movcs	r2, sl
   d5bd0:	4659      	mov	r1, fp
   d5bd2:	f003 fb29 	bl	d9228 <strncmp>
                if (cmp == 0) {
   d5bd6:	9b03      	ldr	r3, [sp, #12]
   d5bd8:	b948      	cbnz	r0, d5bee <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x5e>
                    if (node.size == value.second) { // Lengths are equal
   d5bda:	45d1      	cmp	r9, sl
   d5bdc:	d103      	bne.n	d5be6 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d5bde:	9a01      	ldr	r2, [sp, #4]
   d5be0:	7013      	strb	r3, [r2, #0]
        }
    }
    return level;
}

int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d5be2:	4635      	mov	r5, r6
   d5be4:	e7e4      	b.n	d5bb0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x20>
                if (cmp == 0) {
                    if (node.size == value.second) { // Lengths are equal
                        found = true; // Allows caller code to avoid extra call to strncmp()
                        return false;
                    }
                    return node.size < value.second;
   d5be6:	bf8c      	ite	hi
   d5be8:	2001      	movhi	r0, #1
   d5bea:	2000      	movls	r0, #0
   d5bec:	e000      	b.n	d5bf0 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x60>
                }
                return cmp < 0;
   d5bee:	0fc0      	lsrs	r0, r0, #31
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d5bf0:	2800      	cmp	r0, #0
   d5bf2:	d0f6      	beq.n	d5be2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d5bf4:	1bae      	subs	r6, r5, r6
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
	    {
	      __first = __middle;
	      ++__first;
   d5bf6:	f108 0414 	add.w	r4, r8, #20
	      __len = __len - __half - 1;
   d5bfa:	3e01      	subs	r6, #1
   d5bfc:	e7f1      	b.n	d5be2 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x52>
            }));
   d5bfe:	1be4      	subs	r4, r4, r7
}
   d5c00:	4802      	ldr	r0, [pc, #8]	; (d5c0c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x7c>)
                        return false;
                    }
                    return node.size < value.second;
                }
                return cmp < 0;
            }));
   d5c02:	10a4      	asrs	r4, r4, #2
}
   d5c04:	4360      	muls	r0, r4
   d5c06:	b005      	add	sp, #20
   d5c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5c0c:	cccccccd 	.word	0xcccccccd

000d5c10 <_ZNK5spark6detail9LogFilter5levelEPKc>:
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5c10:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5c12:	b085      	sub	sp, #20
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
   d5c14:	6903      	ldr	r3, [r0, #16]
}

spark::detail::LogFilter::~LogFilter() {
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
   d5c16:	9101      	str	r1, [sp, #4]
    LogLevel level = level_; // Default level
   d5c18:	7e06      	ldrb	r6, [r0, #24]
    if (!nodes_.isEmpty() && category) {
   d5c1a:	b313      	cbz	r3, d5c62 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
   d5c1c:	b309      	cbz	r1, d5c62 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d5c1e:	af04      	add	r7, sp, #16
   d5c20:	2300      	movs	r3, #0
   d5c22:	f847 3d04 	str.w	r3, [r7, #-4]!
}

LogLevel spark::detail::LogFilter::level(const char *category) const {
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d5c26:	f100 040c 	add.w	r4, r0, #12
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d5c2a:	461d      	mov	r5, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5c2c:	4639      	mov	r1, r7
   d5c2e:	a801      	add	r0, sp, #4
   d5c30:	f7ff ff41 	bl	d5ab6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d5c34:	4601      	mov	r1, r0
   d5c36:	b1a0      	cbz	r0, d5c62 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
            bool found = false;
   d5c38:	ab04      	add	r3, sp, #16
            const int index = nodeIndex(*pNodes, name, size, found);
   d5c3a:	9a03      	ldr	r2, [sp, #12]
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d5c3c:	f803 5d05 	strb.w	r5, [r3, #-5]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d5c40:	4620      	mov	r0, r4
   d5c42:	f7ff ffa5 	bl	d5b90 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d5c46:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d5c4a:	b153      	cbz	r3, d5c62 <_ZNK5spark6detail9LogFilter5levelEPKc+0x52>
    return data_[i];
}

template<typename T, typename AllocatorT>
inline const T& spark::Vector<T, AllocatorT>::at(int i) const {
    return data_[i];
   d5c4c:	6823      	ldr	r3, [r4, #0]
   d5c4e:	2414      	movs	r4, #20
   d5c50:	fb04 3400 	mla	r4, r4, r0, r3
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
                level = (LogLevel)node.level;
            }
            pNodes = &node.nodes;
   d5c54:	3408      	adds	r4, #8
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found) {
                break;
            }
            const Node &node = pNodes->at(index);
            if (node.level >= 0) {
   d5c56:	f934 3c02 	ldrsh.w	r3, [r4, #-2]
   d5c5a:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d5c5c:	bfa8      	it	ge
   d5c5e:	b2de      	uxtbge	r6, r3
    LogLevel level = level_; // Default level
    if (!nodes_.isEmpty() && category) {
        const Vector<Node> *pNodes = &nodes_; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d5c60:	e7e4      	b.n	d5c2c <_ZNK5spark6detail9LogFilter5levelEPKc+0x1c>
            }
            pNodes = &node.nodes;
        }
    }
    return level;
}
   d5c62:	4630      	mov	r0, r6
   d5c64:	b005      	add	sp, #20
   d5c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5c68 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d5c68:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d5c6a:	4c09      	ldr	r4, [pc, #36]	; (d5c90 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d5c6c:	6823      	ldr	r3, [r4, #0]
   d5c6e:	07db      	lsls	r3, r3, #31
   d5c70:	d40b      	bmi.n	d5c8a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d5c72:	4620      	mov	r0, r4
   d5c74:	f7fe fa1e 	bl	d40b4 <__cxa_guard_acquire>
   d5c78:	b138      	cbz	r0, d5c8a <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d5c7a:	4620      	mov	r0, r4
   d5c7c:	f7fe fa1f 	bl	d40be <__cxa_guard_release>
   d5c80:	4a04      	ldr	r2, [pc, #16]	; (d5c94 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d5c82:	4905      	ldr	r1, [pc, #20]	; (d5c98 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d5c84:	4805      	ldr	r0, [pc, #20]	; (d5c9c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5c86:	f001 fdd7 	bl	d7838 <__aeabi_atexit>
    return &factory;
}
   d5c8a:	4804      	ldr	r0, [pc, #16]	; (d5c9c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x34>)
   d5c8c:	bd10      	pop	{r4, pc}
   d5c8e:	bf00      	nop
   d5c90:	2003e23c 	.word	0x2003e23c
   d5c94:	2003e1b8 	.word	0x2003e1b8
   d5c98:	000d5ab3 	.word	0x000d5ab3
   d5c9c:	2003e0fc 	.word	0x2003e0fc

000d5ca0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d5ca0:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d5ca2:	4c09      	ldr	r4, [pc, #36]	; (d5cc8 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d5ca4:	6823      	ldr	r3, [r4, #0]
   d5ca6:	07db      	lsls	r3, r3, #31
   d5ca8:	d40b      	bmi.n	d5cc2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d5caa:	4620      	mov	r0, r4
   d5cac:	f7fe fa02 	bl	d40b4 <__cxa_guard_acquire>
   d5cb0:	b138      	cbz	r0, d5cc2 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d5cb2:	4620      	mov	r0, r4
   d5cb4:	f7fe fa03 	bl	d40be <__cxa_guard_release>
   d5cb8:	4a04      	ldr	r2, [pc, #16]	; (d5ccc <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d5cba:	4905      	ldr	r1, [pc, #20]	; (d5cd0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d5cbc:	4805      	ldr	r0, [pc, #20]	; (d5cd4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5cbe:	f001 fdbb 	bl	d7838 <__aeabi_atexit>
    return &factory;
}
   d5cc2:	4804      	ldr	r0, [pc, #16]	; (d5cd4 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x34>)
   d5cc4:	bd10      	pop	{r4, pc}
   d5cc6:	bf00      	nop
   d5cc8:	2003e26c 	.word	0x2003e26c
   d5ccc:	2003e1b8 	.word	0x2003e1b8
   d5cd0:	000d5ab1 	.word	0x000d5ab1
   d5cd4:	2003e0f8 	.word	0x2003e0f8

000d5cd8 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d5cd8:	b538      	push	{r3, r4, r5, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d5cda:	2500      	movs	r5, #0
   d5cdc:	4604      	mov	r4, r0
   d5cde:	6005      	str	r5, [r0, #0]
   d5ce0:	6045      	str	r5, [r0, #4]
   d5ce2:	6085      	str	r5, [r0, #8]
   d5ce4:	6105      	str	r5, [r0, #16]
   d5ce6:	6145      	str	r5, [r0, #20]
   d5ce8:	6185      	str	r5, [r0, #24]
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5cea:	f840 5f24 	str.w	r5, [r0, #36]!
    {
        os_mutex_recursive_create(&handle_);
   d5cee:	f7ff f869 	bl	d4dc4 <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d5cf2:	f7ff ffb9 	bl	d5c68 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d5cf6:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5cf8:	f7ff ffd2 	bl	d5ca0 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d5cfc:	7325      	strb	r5, [r4, #12]
#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d5cfe:	6220      	str	r0, [r4, #32]
#endif
    outputActive_ = false;
}
   d5d00:	4620      	mov	r0, r4
   d5d02:	bd38      	pop	{r3, r4, r5, pc}

000d5d04 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d5d04:	b510      	push	{r4, lr}
    static LogManager mgr;
   d5d06:	4c0a      	ldr	r4, [pc, #40]	; (d5d30 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d5d08:	6823      	ldr	r3, [r4, #0]
   d5d0a:	07db      	lsls	r3, r3, #31
   d5d0c:	d40e      	bmi.n	d5d2c <_ZN5spark10LogManager8instanceEv+0x28>
   d5d0e:	4620      	mov	r0, r4
   d5d10:	f7fe f9d0 	bl	d40b4 <__cxa_guard_acquire>
   d5d14:	b150      	cbz	r0, d5d2c <_ZN5spark10LogManager8instanceEv+0x28>
   d5d16:	4807      	ldr	r0, [pc, #28]	; (d5d34 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5d18:	f7ff ffde 	bl	d5cd8 <_ZN5spark10LogManagerC1Ev>
   d5d1c:	4620      	mov	r0, r4
   d5d1e:	f7fe f9ce 	bl	d40be <__cxa_guard_release>
   d5d22:	4a05      	ldr	r2, [pc, #20]	; (d5d38 <_ZN5spark10LogManager8instanceEv+0x34>)
   d5d24:	4905      	ldr	r1, [pc, #20]	; (d5d3c <_ZN5spark10LogManager8instanceEv+0x38>)
   d5d26:	4803      	ldr	r0, [pc, #12]	; (d5d34 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5d28:	f001 fd86 	bl	d7838 <__aeabi_atexit>
    return &mgr;
}
   d5d2c:	4801      	ldr	r0, [pc, #4]	; (d5d34 <_ZN5spark10LogManager8instanceEv+0x30>)
   d5d2e:	bd10      	pop	{r4, pc}
   d5d30:	2003e240 	.word	0x2003e240
   d5d34:	2003e244 	.word	0x2003e244
   d5d38:	2003e1b8 	.word	0x2003e1b8
   d5d3c:	000d616f 	.word	0x000d616f

000d5d40 <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d5d40:	2300      	movs	r3, #0
   d5d42:	4a02      	ldr	r2, [pc, #8]	; (d5d4c <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d5d44:	4902      	ldr	r1, [pc, #8]	; (d5d50 <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d5d46:	4803      	ldr	r0, [pc, #12]	; (d5d54 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d5d48:	f7ff b9dc 	b.w	d5104 <log_set_callbacks>
   d5d4c:	000d6051 	.word	0x000d6051
   d5d50:	000d5fe1 	.word	0x000d5fe1
   d5d54:	000d5f69 	.word	0x000d5f69

000d5d58 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d5d58:	2300      	movs	r3, #0
   d5d5a:	461a      	mov	r2, r3
   d5d5c:	4619      	mov	r1, r3
   d5d5e:	4618      	mov	r0, r3
   d5d60:	f7ff b9d0 	b.w	d5104 <log_set_callbacks>

000d5d64 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5d64:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d66:	ac02      	add	r4, sp, #8
        JSONObjectIterator(value.t_, value.d_) {
   d5d68:	688e      	ldr	r6, [r1, #8]
   d5d6a:	f851 3b04 	ldr.w	r3, [r1], #4
   d5d6e:	f844 3d08 	str.w	r3, [r4, #-8]!
        k_(nullptr),
        v_(nullptr),
        n_(0) {
}

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d5d72:	4605      	mov	r5, r0
   d5d74:	a801      	add	r0, sp, #4
   d5d76:	f7ff faee 	bl	d5356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d5d7a:	4622      	mov	r2, r4
   d5d7c:	4631      	mov	r1, r6
   d5d7e:	4628      	mov	r0, r5
   d5d80:	f7ff fe5a 	bl	d5a38 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5d84:	a801      	add	r0, sp, #4
   d5d86:	f7ff faed 	bl	d5364 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5d8a:	4628      	mov	r0, r5
   d5d8c:	b002      	add	sp, #8
   d5d8e:	bd70      	pop	{r4, r5, r6, pc}

000d5d90 <_ZNK5spark18JSONObjectIterator5valueEv>:

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5d90:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5d92:	ac02      	add	r4, sp, #8
    return JSONValue(v_, d_);
   d5d94:	690e      	ldr	r6, [r1, #16]
   d5d96:	f851 3b04 	ldr.w	r3, [r1], #4
   d5d9a:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONString spark::JSONObjectIterator::name() const {
    return JSONString(k_, d_);
}

inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d5d9e:	4605      	mov	r5, r0
   d5da0:	a801      	add	r0, sp, #4
   d5da2:	f7ff fad8 	bl	d5356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d5da6:	4622      	mov	r2, r4
   d5da8:	4631      	mov	r1, r6
   d5daa:	4628      	mov	r0, r5
   d5dac:	f7ff fe5f 	bl	d5a6e <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5db0:	a801      	add	r0, sp, #4
   d5db2:	f7ff fad7 	bl	d5364 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5db6:	4628      	mov	r0, r5
   d5db8:	b002      	add	sp, #8
   d5dba:	bd70      	pop	{r4, r5, r6, pc}

000d5dbc <_ZNK5spark18JSONObjectIterator4nameEv>:

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5dbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d5dbe:	ac02      	add	r4, sp, #8
    return JSONString(k_, d_);
   d5dc0:	68ce      	ldr	r6, [r1, #12]
   d5dc2:	f851 3b04 	ldr.w	r3, [r1], #4
   d5dc6:	f844 3d08 	str.w	r3, [r4, #-8]!

inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
        JSONObjectIterator(value.t_, value.d_) {
}

inline spark::JSONString spark::JSONObjectIterator::name() const {
   d5dca:	4605      	mov	r5, r0
   d5dcc:	a801      	add	r0, sp, #4
   d5dce:	f7ff fac2 	bl	d5356 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d5dd2:	4622      	mov	r2, r4
   d5dd4:	4631      	mov	r1, r6
   d5dd6:	4628      	mov	r0, r5
   d5dd8:	f7ff fe06 	bl	d59e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5ddc:	a801      	add	r0, sp, #4
   d5dde:	f7ff fac1 	bl	d5364 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d5de2:	4628      	mov	r0, r5
   d5de4:	b002      	add	sp, #8
   d5de6:	bd70      	pop	{r4, r5, r6, pc}

000d5de8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
    static DefaultOutputStreamFactory factory;
    return &factory;
}

void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d5de8:	b530      	push	{r4, r5, lr}
   d5dea:	b08b      	sub	sp, #44	; 0x2c
   d5dec:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d5dee:	4601      	mov	r1, r0
   d5df0:	a804      	add	r0, sp, #16
   d5df2:	f7ff ffb7 	bl	d5d64 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
    while (it.next()) {
   d5df6:	a804      	add	r0, sp, #16
   d5df8:	f7ff fd29 	bl	d584e <_ZN5spark18JSONObjectIterator4nextEv>
   d5dfc:	b1e8      	cbz	r0, d5e3a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x52>
        if (it.name() == "baud" && baudRate) {
   d5dfe:	a904      	add	r1, sp, #16
   d5e00:	4668      	mov	r0, sp
   d5e02:	f7ff ffdb 	bl	d5dbc <_ZNK5spark18JSONObjectIterator4nameEv>
   d5e06:	490f      	ldr	r1, [pc, #60]	; (d5e44 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x5c>)
   d5e08:	9802      	ldr	r0, [sp, #8]
   d5e0a:	f7ff fe91 	bl	d5b30 <_ZNK5spark10JSONStringeqEPKc.isra.7>
   d5e0e:	4604      	mov	r4, r0
   d5e10:	b110      	cbz	r0, d5e18 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x30>
   d5e12:	1c2c      	adds	r4, r5, #0
   d5e14:	bf18      	it	ne
   d5e16:	2401      	movne	r4, #1
   d5e18:	a801      	add	r0, sp, #4
   d5e1a:	f7ff faa3 	bl	d5364 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e1e:	2c00      	cmp	r4, #0
   d5e20:	d0e9      	beq.n	d5df6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
            *baudRate = it.value().toInt();
   d5e22:	a904      	add	r1, sp, #16
   d5e24:	4668      	mov	r0, sp
   d5e26:	f7ff ffb3 	bl	d5d90 <_ZNK5spark18JSONObjectIterator5valueEv>
   d5e2a:	4668      	mov	r0, sp
   d5e2c:	f7ff fcef 	bl	d580e <_ZNK5spark9JSONValue5toIntEv>
   d5e30:	6028      	str	r0, [r5, #0]
   d5e32:	a801      	add	r0, sp, #4
   d5e34:	f7ff fa96 	bl	d5364 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5e38:	e7dd      	b.n	d5df6 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0xe>
   d5e3a:	a805      	add	r0, sp, #20
   d5e3c:	f7ff fa92 	bl	d5364 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
    }
}
   d5e40:	b00b      	add	sp, #44	; 0x2c
   d5e42:	bd30      	pop	{r4, r5, pc}
   d5e44:	000d9de8 	.word	0x000d9de8

000d5e48 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5e4a:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d5e4c:	4620      	mov	r0, r4
   d5e4e:	4913      	ldr	r1, [pc, #76]	; (d5e9c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
    static DefaultLogHandlerFactory factory;
    return &factory;
}

// spark::DefaultOutputStreamFactory
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d5e50:	4615      	mov	r5, r2
#if PLATFORM_ID != 3
    if (strcmp(type, "Serial") == 0) {
   d5e52:	f002 fcbb 	bl	d87cc <strcmp>
   d5e56:	b940      	cbnz	r0, d5e6a <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x22>
        Serial.begin();
   d5e58:	f001 fb60 	bl	d751c <_Z16_fetch_usbserialv>
   d5e5c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d5e60:	f001 fb50 	bl	d7504 <_ZN9USBSerial5beginEl>
        return &Serial;
   d5e64:	f001 fb5a 	bl	d751c <_Z16_fetch_usbserialv>
   d5e68:	e015      	b.n	d5e96 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    if (strcmp(type, "USBSerial1") == 0) {
        USBSerial1.begin();
        return &USBSerial1;
    }
#endif
    if (strcmp(type, "Serial1") == 0) {
   d5e6a:	490d      	ldr	r1, [pc, #52]	; (d5ea0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x58>)
   d5e6c:	4620      	mov	r0, r4
   d5e6e:	f002 fcad 	bl	d87cc <strcmp>
   d5e72:	b978      	cbnz	r0, d5e94 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d5e74:	a902      	add	r1, sp, #8
   d5e76:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   d5e7a:	f841 3d04 	str.w	r3, [r1, #-4]!
        getParams(params, &baud);
   d5e7e:	4628      	mov	r0, r5
   d5e80:	f7ff ffb2 	bl	d5de8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d5e84:	f001 fac2 	bl	d740c <_Z22__fetch_global_Serial1v>
   d5e88:	9901      	ldr	r1, [sp, #4]
   d5e8a:	f001 fab5 	bl	d73f8 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d5e8e:	f001 fabd 	bl	d740c <_Z22__fetch_global_Serial1v>
   d5e92:	e000      	b.n	d5e96 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4e>
    }
#endif // PLATFORM_ID != 3
    return nullptr;
   d5e94:	2000      	movs	r0, #0
}
   d5e96:	b003      	add	sp, #12
   d5e98:	bd30      	pop	{r4, r5, pc}
   d5e9a:	bf00      	nop
   d5e9c:	000d9ded 	.word	0x000d9ded
   d5ea0:	000d9df4 	.word	0x000d9df4

000d5ea4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ea4:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5ea6:	6804      	ldr	r4, [r0, #0]
   d5ea8:	6843      	ldr	r3, [r0, #4]
   d5eaa:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5eac:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5eae:	fb06 4603 	mla	r6, r6, r3, r4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5eb2:	42a6      	cmp	r6, r4
   d5eb4:	d005      	beq.n	d5ec2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d5eb6:	f104 0008 	add.w	r0, r4, #8
   d5eba:	f7ff fff3 	bl	d5ea4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5ebe:	3414      	adds	r4, #20
   d5ec0:	e7f7      	b.n	d5eb2 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5ec2:	6828      	ldr	r0, [r5, #0]
   d5ec4:	f7ff f9ec 	bl	d52a0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5ec8:	4628      	mov	r0, r5
   d5eca:	bd70      	pop	{r4, r5, r6, pc}

000d5ecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ecc:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d5ece:	6804      	ldr	r4, [r0, #0]
   d5ed0:	6843      	ldr	r3, [r0, #4]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d5ed2:	4605      	mov	r5, r0
    destruct(data_, data_ + size_);
   d5ed4:	eb04 1603 	add.w	r6, r4, r3, lsl #4
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5ed8:	42a6      	cmp	r6, r4
   d5eda:	d004      	beq.n	d5ee6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d5edc:	4620      	mov	r0, r4
   d5ede:	f001 f856 	bl	d6f8e <_ZN6StringD1Ev>
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d5ee2:	3410      	adds	r4, #16
   d5ee4:	e7f8      	b.n	d5ed8 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d5ee6:	6828      	ldr	r0, [r5, #0]
   d5ee8:	f7ff f9da 	bl	d52a0 <free>

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
    AllocatorT::free(data_);
}
   d5eec:	4628      	mov	r0, r5
   d5eee:	bd70      	pop	{r4, r5, r6, pc}

000d5ef0 <_ZN5spark6detail9LogFilterD1Ev>:
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}

spark::detail::LogFilter::~LogFilter() {
   d5ef0:	b510      	push	{r4, lr}
   d5ef2:	4604      	mov	r4, r0
   d5ef4:	300c      	adds	r0, #12
   d5ef6:	f7ff ffd5 	bl	d5ea4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d5efa:	4620      	mov	r0, r4
   d5efc:	f7ff ffe6 	bl	d5ecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d5f00:	4620      	mov	r0, r4
   d5f02:	bd10      	pop	{r4, pc}

000d5f04 <_ZN5spark16StreamLogHandlerD1Ev>:
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5f04:	b510      	push	{r4, lr}
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d5f06:	4b04      	ldr	r3, [pc, #16]	; (d5f18 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5f08:	4604      	mov	r4, r0
    */
    LogHandler(LogLevel level, LogCategoryFilters filters);
    /*!
        \brief Destructor.
    */
    virtual ~LogHandler() = default;
   d5f0a:	f840 3b04 	str.w	r3, [r0], #4
   d5f0e:	f7ff ffef 	bl	d5ef0 <_ZN5spark6detail9LogFilterD1Ev>
/*!
    \brief Stream-based log handler.

    Adapter class allowing to use existent stream objects as destination for logging output.
*/
class StreamLogHandler: public LogHandler {
   d5f12:	4620      	mov	r0, r4
   d5f14:	bd10      	pop	{r4, pc}
   d5f16:	bf00      	nop
   d5f18:	000d9a38 	.word	0x000d9a38

000d5f1c <_ZN5spark16StreamLogHandlerD0Ev>:
   d5f1c:	b510      	push	{r4, lr}
   d5f1e:	4604      	mov	r4, r0
   d5f20:	f7ff fff0 	bl	d5f04 <_ZN5spark16StreamLogHandlerD1Ev>
   d5f24:	4620      	mov	r0, r4
   d5f26:	2124      	movs	r1, #36	; 0x24
   d5f28:	f001 fc8b 	bl	d7842 <_ZdlPvj>
   d5f2c:	4620      	mov	r0, r4
   d5f2e:	bd10      	pop	{r4, pc}

000d5f30 <_ZN5spark20JSONStreamLogHandlerD1Ev>:

private:
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
   d5f30:	b510      	push	{r4, lr}
   d5f32:	4b03      	ldr	r3, [pc, #12]	; (d5f40 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d5f34:	6003      	str	r3, [r0, #0]
   d5f36:	4604      	mov	r4, r0
   d5f38:	f7ff ffe4 	bl	d5f04 <_ZN5spark16StreamLogHandlerD1Ev>
   d5f3c:	4620      	mov	r0, r4
   d5f3e:	bd10      	pop	{r4, pc}
   d5f40:	000d9dd8 	.word	0x000d9dd8

000d5f44 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d5f44:	b510      	push	{r4, lr}
   d5f46:	4604      	mov	r4, r0
   d5f48:	f7ff fff2 	bl	d5f30 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d5f4c:	4620      	mov	r0, r4
   d5f4e:	2124      	movs	r1, #36	; 0x24
   d5f50:	f001 fc77 	bl	d7842 <_ZdlPvj>
   d5f54:	4620      	mov	r0, r4
   d5f56:	bd10      	pop	{r4, pc}

000d5f58 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d5f58:	b510      	push	{r4, lr}
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5f5a:	6803      	ldr	r3, [r0, #0]
   d5f5c:	4604      	mov	r4, r0
   d5f5e:	6818      	ldr	r0, [r3, #0]
   d5f60:	f7fe ff48 	bl	d4df4 <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d5f64:	4620      	mov	r0, r4
   d5f66:	bd10      	pop	{r4, pc}

000d5f68 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5f6c:	469b      	mov	fp, r3
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d5f6e:	4b1b      	ldr	r3, [pc, #108]	; (d5fdc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>)
   d5f70:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5f72:	f3c3 0308 	ubfx	r3, r3, #0, #9

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d5f76:	b085      	sub	sp, #20
   d5f78:	4682      	mov	sl, r0
   d5f7a:	460e      	mov	r6, r1
   d5f7c:	4690      	mov	r8, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5f7e:	bb53      	cbnz	r3, d5fd6 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x6e>
        return;
    }
#endif
    LogManager *that = instance();
   d5f80:	f7ff fec0 	bl	d5d04 <_ZN5spark10LogManager8instanceEv>
   d5f84:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5f86:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5f88:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d5f8a:	f7ff fde5 	bl	d5b58 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d5f8e:	7b23      	ldrb	r3, [r4, #12]
   d5f90:	b9f3      	cbnz	r3, d5fd0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x68>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5f92:	2301      	movs	r3, #1
   d5f94:	7323      	strb	r3, [r4, #12]
   d5f96:	6825      	ldr	r5, [r4, #0]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d5f98:	6863      	ldr	r3, [r4, #4]
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
   d5f9a:	b2f6      	uxtb	r6, r6
   d5f9c:	eb05 0983 	add.w	r9, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d5fa0:	454d      	cmp	r5, r9
   d5fa2:	d013      	beq.n	d5fcc <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x64>
   d5fa4:	f855 7b04 	ldr.w	r7, [r5], #4
inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
}

inline void spark::LogHandler::message(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
    if (level >= filter_.level(category)) {
   d5fa8:	4641      	mov	r1, r8
   d5faa:	1d38      	adds	r0, r7, #4
   d5fac:	f7ff fe30 	bl	d5c10 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d5fb0:	4286      	cmp	r6, r0
   d5fb2:	d3f5      	bcc.n	d5fa0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
        logMessage(msg, level, category, attr);
   d5fb4:	683b      	ldr	r3, [r7, #0]
   d5fb6:	f8cd b000 	str.w	fp, [sp]
   d5fba:	689b      	ldr	r3, [r3, #8]
   d5fbc:	469e      	mov	lr, r3
   d5fbe:	4638      	mov	r0, r7
   d5fc0:	4643      	mov	r3, r8
   d5fc2:	4632      	mov	r2, r6
   d5fc4:	4651      	mov	r1, sl
   d5fc6:	4677      	mov	r7, lr
   d5fc8:	47b8      	blx	r7
   d5fca:	e7e9      	b.n	d5fa0 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d5fcc:	2300      	movs	r3, #0
   d5fce:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d5fd0:	a803      	add	r0, sp, #12
   d5fd2:	f7ff ffc1 	bl	d5f58 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d5fd6:	b005      	add	sp, #20
   d5fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5fdc:	e000ed00 	.word	0xe000ed00

000d5fe0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d5fe0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5fe4:	4699      	mov	r9, r3
   d5fe6:	4b19      	ldr	r3, [pc, #100]	; (d604c <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x6c>)
   d5fe8:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d5fee:	4607      	mov	r7, r0
   d5ff0:	4688      	mov	r8, r1
   d5ff2:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d5ff4:	bb33      	cbnz	r3, d6044 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x64>
        return;
    }
#endif
    LogManager *that = instance();
   d5ff6:	f7ff fe85 	bl	d5d04 <_ZN5spark10LogManager8instanceEv>
   d5ffa:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d5ffc:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5ffe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d6000:	f7ff fdaa 	bl	d5b58 <_ZN14RecursiveMutex4lockEv>
        // prevent re-entry
        if (that->isActive()) {
   d6004:	7b23      	ldrb	r3, [r4, #12]
   d6006:	b9d3      	cbnz	r3, d603e <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5e>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6008:	2301      	movs	r3, #1
   d600a:	7323      	strb	r3, [r4, #12]
   d600c:	6825      	ldr	r5, [r4, #0]
   d600e:	6863      	ldr	r3, [r4, #4]
    }
}

inline void spark::LogHandler::write(const char *data, size_t size, LogLevel level, const char *category) {
    if (level >= filter_.level(category)) {
   d6010:	fa5f fb86 	uxtb.w	fp, r6
   d6014:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        // prevent re-entry
        if (that->isActive()) {
            return;
        }
        that->setActive(true);
        for (LogHandler *handler: that->activeHandlers_) {
   d6018:	4555      	cmp	r5, sl
   d601a:	d00e      	beq.n	d603a <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x5a>
   d601c:	f855 6b04 	ldr.w	r6, [r5], #4
   d6020:	4649      	mov	r1, r9
   d6022:	1d30      	adds	r0, r6, #4
   d6024:	f7ff fdf4 	bl	d5c10 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6028:	4583      	cmp	fp, r0
   d602a:	d3f5      	bcc.n	d6018 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
        write(data, size);
   d602c:	6833      	ldr	r3, [r6, #0]
   d602e:	4642      	mov	r2, r8
   d6030:	68db      	ldr	r3, [r3, #12]
   d6032:	4639      	mov	r1, r7
   d6034:	4630      	mov	r0, r6
   d6036:	4798      	blx	r3
   d6038:	e7ee      	b.n	d6018 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d603a:	2300      	movs	r3, #0
   d603c:	7323      	strb	r3, [r4, #12]
#endif
    LogManager *that = instance();
    LOG_WITH_LOCK(that->mutex_) {
        // prevent re-entry
        if (that->isActive()) {
            return;
   d603e:	a801      	add	r0, sp, #4
   d6040:	f7ff ff8a 	bl	d5f58 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->write(data, size, (LogLevel)level, category);
        }
        that->setActive(false);
    }
}
   d6044:	b003      	add	sp, #12
   d6046:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d604a:	bf00      	nop
   d604c:	e000ed00 	.word	0xe000ed00

000d6050 <_ZN5spark10LogManager10logEnabledEiPKcPv>:

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d6050:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d6054:	4b15      	ldr	r3, [pc, #84]	; (d60ac <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5c>)
   d6056:	685b      	ldr	r3, [r3, #4]
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6058:	f3c3 0308 	ubfx	r3, r3, #0, #9
        }
        that->setActive(false);
    }
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d605c:	4604      	mov	r4, r0
   d605e:	4688      	mov	r8, r1
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d6060:	b9fb      	cbnz	r3, d60a2 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x52>
        return 0;
    }
#endif
    LogManager *that = instance();
   d6062:	f7ff fe4f 	bl	d5d04 <_ZN5spark10LogManager8instanceEv>
   d6066:	4606      	mov	r6, r0
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d6068:	3024      	adds	r0, #36	; 0x24
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d606a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d606c:	f7ff fd74 	bl	d5b58 <_ZN14RecursiveMutex4lockEv>
   d6070:	e896 00a0 	ldmia.w	r6, {r5, r7}
   d6074:	2646      	movs	r6, #70	; 0x46
   d6076:	eb05 0787 	add.w	r7, r5, r7, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d607a:	42af      	cmp	r7, r5
   d607c:	d107      	bne.n	d608e <_ZN5spark10LogManager10logEnabledEiPKcPv+0x3e>
        return 0;
    }
#endif
    LogManager *that = instance();
    int minLevel = LOG_LEVEL_NONE;
    LOG_WITH_LOCK(that->mutex_) {
   d607e:	a801      	add	r0, sp, #4
   d6080:	f7ff ff6a 	bl	d5f58 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            if (level < minLevel) {
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
   d6084:	42b4      	cmp	r4, r6
   d6086:	bfb4      	ite	lt
   d6088:	2000      	movlt	r0, #0
   d608a:	2001      	movge	r0, #1
   d608c:	e00a      	b.n	d60a4 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x54>
inline LogLevel spark::LogHandler::level() const {
    return filter_.level();
}

inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
   d608e:	f855 0b04 	ldr.w	r0, [r5], #4
   d6092:	4641      	mov	r1, r8
   d6094:	3004      	adds	r0, #4
   d6096:	f7ff fdbb 	bl	d5c10 <_ZNK5spark6detail9LogFilter5levelEPKc>
   d609a:	4286      	cmp	r6, r0
   d609c:	bfa8      	it	ge
   d609e:	4606      	movge	r6, r0
   d60a0:	e7eb      	b.n	d607a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2a>
}

int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
        return 0;
   d60a2:	2000      	movs	r0, #0
                minLevel = level;
            }
        }
    }
    return (level >= minLevel);
}
   d60a4:	b002      	add	sp, #8
   d60a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d60aa:	bf00      	nop
   d60ac:	e000ed00 	.word	0xe000ed00

000d60b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d60b0:	b570      	push	{r4, r5, r6, lr}
    T* const p = find(data_, data_ + size_, value);
   d60b2:	6803      	ldr	r3, [r0, #0]
   d60b4:	6842      	ldr	r2, [r0, #4]
    move(p, p + n, data_ + size_);
    size_ -= n;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d60b6:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d60b8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d60bc:	429a      	cmp	r2, r3
   d60be:	4618      	mov	r0, r3
   d60c0:	d00e      	beq.n	d60e0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x30>
            if (*p == value) {
   d60c2:	6806      	ldr	r6, [r0, #0]
   d60c4:	680d      	ldr	r5, [r1, #0]
   d60c6:	42ae      	cmp	r6, r5
   d60c8:	f103 0304 	add.w	r3, r3, #4
   d60cc:	d1f6      	bne.n	d60bc <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xc>
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
   d60ce:	1d01      	adds	r1, r0, #4
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d60d0:	1a52      	subs	r2, r2, r1
   d60d2:	f002 f8ca 	bl	d826a <memmove>
    if (!p) {
        return false;
    }
    p->~T();
    move(p, p + 1, data_ + size_);
    --size_;
   d60d6:	6863      	ldr	r3, [r4, #4]
   d60d8:	3b01      	subs	r3, #1
   d60da:	6063      	str	r3, [r4, #4]
    return true;
   d60dc:	2001      	movs	r0, #1
}
   d60de:	bd70      	pop	{r4, r5, r6, pc}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
    T* const p = find(data_, data_ + size_, value);
    if (!p) {
        return false;
   d60e0:	2000      	movs	r0, #0
   d60e2:	bd70      	pop	{r4, r5, r6, pc}

000d60e4 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d60e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d60e6:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d60e8:	3024      	adds	r0, #36	; 0x24
        }
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
   d60ea:	9101      	str	r1, [sp, #4]
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d60ec:	9003      	str	r0, [sp, #12]
      { _M_device.lock(); }
   d60ee:	f7ff fd33 	bl	d5b58 <_ZN14RecursiveMutex4lockEv>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d60f2:	a901      	add	r1, sp, #4
   d60f4:	4620      	mov	r0, r4
   d60f6:	f7ff ffdb 	bl	d60b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d60fa:	b920      	cbnz	r0, d6106 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x22>
    }
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d60fc:	a803      	add	r0, sp, #12
   d60fe:	f7ff ff2b 	bl	d5f58 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
            resetSystemCallbacks();
        }
    }
}
   d6102:	b004      	add	sp, #16
   d6104:	bd10      	pop	{r4, pc}
    return true;
}

void spark::LogManager::removeHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6106:	6863      	ldr	r3, [r4, #4]
   d6108:	2b00      	cmp	r3, #0
   d610a:	d1f7      	bne.n	d60fc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>
            resetSystemCallbacks();
   d610c:	f7ff fe24 	bl	d5d58 <_ZN5spark10LogManager20resetSystemCallbacksEv>
   d6110:	e7f4      	b.n	d60fc <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x18>

000d6112 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
            break;
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
   d6112:	b570      	push	{r4, r5, r6, lr}
   d6114:	6905      	ldr	r5, [r0, #16]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6116:	6943      	ldr	r3, [r0, #20]
   d6118:	2618      	movs	r6, #24
   d611a:	4604      	mov	r4, r0
   d611c:	fb06 5603 	mla	r6, r6, r3, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d6120:	42ae      	cmp	r6, r5
   d6122:	d015      	beq.n	d6150 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d6124:	f105 0110 	add.w	r1, r5, #16
   d6128:	4620      	mov	r0, r4
   d612a:	f7ff ffc1 	bl	d60b0 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d612e:	6863      	ldr	r3, [r4, #4]
   d6130:	b90b      	cbnz	r3, d6136 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d6132:	f7ff fe11 	bl	d5d58 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        }
        handlerFactory_->destroyHandler(h.handler);
   d6136:	69e0      	ldr	r0, [r4, #28]
   d6138:	6929      	ldr	r1, [r5, #16]
   d613a:	6803      	ldr	r3, [r0, #0]
   d613c:	68db      	ldr	r3, [r3, #12]
   d613e:	4798      	blx	r3
        if (h.stream) {
   d6140:	6969      	ldr	r1, [r5, #20]
   d6142:	b119      	cbz	r1, d614c <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d6144:	6a20      	ldr	r0, [r4, #32]
   d6146:	6803      	ldr	r3, [r0, #0]
   d6148:	68db      	ldr	r3, [r3, #12]
   d614a:	4798      	blx	r3
   d614c:	3518      	adds	r5, #24
        }
    }
}

void spark::LogManager::destroyFactoryHandlers() {
    for (const FactoryHandler &h: factoryHandlers_) {
   d614e:	e7e7      	b.n	d6120 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    return true;
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
   d6150:	6925      	ldr	r5, [r4, #16]
   d6152:	6963      	ldr	r3, [r4, #20]
   d6154:	2618      	movs	r6, #24
   d6156:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d615a:	42b5      	cmp	r5, r6
   d615c:	d004      	beq.n	d6168 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d615e:	4628      	mov	r0, r5
   d6160:	f000 ff15 	bl	d6f8e <_ZN6StringD1Ev>
   d6164:	3518      	adds	r5, #24
   d6166:	e7f8      	b.n	d615a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
}

template<typename T, typename AllocatorT>
inline void spark::Vector<T, AllocatorT>::clear() {
    destruct(data_, data_ + size_);
    size_ = 0;
   d6168:	2300      	movs	r3, #0
   d616a:	6163      	str	r3, [r4, #20]
   d616c:	bd70      	pop	{r4, r5, r6, pc}

000d616e <_ZN5spark10LogManagerD1Ev>:
    streamFactory_ = DefaultOutputStreamFactory::instance();
#endif
    outputActive_ = false;
}

spark::LogManager::~LogManager() {
   d616e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6170:	4604      	mov	r4, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6172:	ad02      	add	r5, sp, #8
    resetSystemCallbacks();
   d6174:	f7ff fdf0 	bl	d5d58 <_ZN5spark10LogManager20resetSystemCallbacksEv>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d6178:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d617c:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d6180:	f7ff fcea 	bl	d5b58 <_ZN14RecursiveMutex4lockEv>
         destroyFactoryHandlers();
   d6184:	4620      	mov	r0, r4
   d6186:	f7ff ffc4 	bl	d6112 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
}

spark::LogManager::~LogManager() {
    resetSystemCallbacks();
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
   d618a:	4628      	mov	r0, r5
   d618c:	f7ff fee4 	bl	d5f58 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6190:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6192:	b108      	cbz	r0, d6198 <_ZN5spark10LogManagerD1Ev+0x2a>
            os_mutex_recursive_destroy(handle_);
   d6194:	f7fe fe1e 	bl	d4dd4 <os_mutex_recursive_destroy>
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
    destruct(data_, data_ + size_);
   d6198:	6925      	ldr	r5, [r4, #16]
   d619a:	6963      	ldr	r3, [r4, #20]
   d619c:	2618      	movs	r6, #24
   d619e:	fb06 5603 	mla	r6, r6, r3, r5
            new(p) T(std::forward<ArgsT>(args)...);
        }
    }

    static void destruct(T* p, const T* end) {
        for (; p != end; ++p) {
   d61a2:	42b5      	cmp	r5, r6
   d61a4:	d004      	beq.n	d61b0 <_ZN5spark10LogManagerD1Ev+0x42>
        }
    }
}

// spark::LogManager
struct spark::LogManager::FactoryHandler {
   d61a6:	4628      	mov	r0, r5
   d61a8:	f000 fef1 	bl	d6f8e <_ZN6StringD1Ev>
   d61ac:	3518      	adds	r5, #24
   d61ae:	e7f8      	b.n	d61a2 <_ZN5spark10LogManagerD1Ev+0x34>
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d61b0:	6920      	ldr	r0, [r4, #16]
   d61b2:	f7ff f875 	bl	d52a0 <free>
   d61b6:	6820      	ldr	r0, [r4, #0]
   d61b8:	f7ff f872 	bl	d52a0 <free>
#if Wiring_LogConfig
    LOG_WITH_LOCK(mutex_) {
         destroyFactoryHandlers();
    }
#endif
}
   d61bc:	4620      	mov	r0, r4
   d61be:	b002      	add	sp, #8
   d61c0:	bd70      	pop	{r4, r5, r6, pc}

000d61c2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>:
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61c2:	6803      	ldr	r3, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d61c4:	680a      	ldr	r2, [r1, #0]
   d61c6:	6002      	str	r2, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d61c8:	600b      	str	r3, [r1, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61ca:	6843      	ldr	r3, [r0, #4]
      __a = _GLIBCXX_MOVE(__b);
   d61cc:	684a      	ldr	r2, [r1, #4]
   d61ce:	6042      	str	r2, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d61d0:	604b      	str	r3, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d61d2:	6883      	ldr	r3, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d61d4:	688a      	ldr	r2, [r1, #8]
   d61d6:	6082      	str	r2, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d61d8:	608b      	str	r3, [r1, #8]
   d61da:	4770      	bx	lr

000d61dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d61dc:	b510      	push	{r4, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d61de:	2300      	movs	r3, #0
        size_ = vector.size_;
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d61e0:	4604      	mov	r4, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d61e2:	6003      	str	r3, [r0, #0]
   d61e4:	6043      	str	r3, [r0, #4]
   d61e6:	6083      	str	r3, [r0, #8]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d61e8:	f7ff ffeb 	bl	d61c2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
}
   d61ec:	4620      	mov	r0, r4
   d61ee:	bd10      	pop	{r4, pc}

000d61f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d61f0:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d61f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d61f4:	4604      	mov	r4, r0
   d61f6:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d61f8:	d925      	bls.n	d6246 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x56>
   d61fa:	4290      	cmp	r0, r2
   d61fc:	d224      	bcs.n	d6248 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x58>
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
   d61fe:	1a55      	subs	r5, r2, r1
   d6200:	3d14      	subs	r5, #20
   d6202:	442c      	add	r4, r5
   d6204:	f1a1 0714 	sub.w	r7, r1, #20
   d6208:	f1a2 050c 	sub.w	r5, r2, #12
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d620c:	2600      	movs	r6, #0
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d620e:	f1a5 0308 	sub.w	r3, r5, #8
   d6212:	429f      	cmp	r7, r3
   d6214:	d037      	beq.n	d6286 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*end));
   d6216:	b184      	cbz	r4, d623a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4a>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d6218:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d621c:	6023      	str	r3, [r4, #0]
   d621e:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6222:	80a3      	strh	r3, [r4, #4]
   d6224:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6228:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d622a:	60a6      	str	r6, [r4, #8]
   d622c:	60e6      	str	r6, [r4, #12]
   d622e:	6126      	str	r6, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6230:	4629      	mov	r1, r5
   d6232:	f104 0008 	add.w	r0, r4, #8
   d6236:	f7ff ffc4 	bl	d61c2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d623a:	4628      	mov	r0, r5
   d623c:	f7ff fe32 	bl	d5ea4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d6240:	3c14      	subs	r4, #20
   d6242:	3d14      	subs	r5, #20
   d6244:	e7e3      	b.n	d620e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6246:	d01e      	beq.n	d6286 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
   d6248:	f101 0508 	add.w	r5, r1, #8
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d624c:	2700      	movs	r7, #0
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d624e:	f1a5 0308 	sub.w	r3, r5, #8
   d6252:	429e      	cmp	r6, r3
   d6254:	d017      	beq.n	d6286 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x96>
                new(dest) T(std::move(*p));
   d6256:	b184      	cbz	r4, d627a <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x8a>
   d6258:	f855 3c08 	ldr.w	r3, [r5, #-8]
   d625c:	6023      	str	r3, [r4, #0]
   d625e:	f835 3c04 	ldrh.w	r3, [r5, #-4]
   d6262:	80a3      	strh	r3, [r4, #4]
   d6264:	f935 3c02 	ldrsh.w	r3, [r5, #-2]
   d6268:	80e3      	strh	r3, [r4, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d626a:	60a7      	str	r7, [r4, #8]
   d626c:	60e7      	str	r7, [r4, #12]
   d626e:	6127      	str	r7, [r4, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d6270:	4629      	mov	r1, r5
   d6272:	f104 0008 	add.w	r0, r4, #8
   d6276:	f7ff ffa4 	bl	d61c2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
   d627a:	4628      	mov	r0, r5
   d627c:	f7ff fe12 	bl	d5ea4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6280:	3414      	adds	r4, #20
   d6282:	3514      	adds	r5, #20
   d6284:	e7e3      	b.n	d624e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
   d6286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6288 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d628a:	6845      	ldr	r5, [r0, #4]
   d628c:	6883      	ldr	r3, [r0, #8]
   d628e:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::prepend(const Vector<T, AllocatorT> &vector) {
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6290:	4604      	mov	r4, r0
   d6292:	460e      	mov	r6, r1
   d6294:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6296:	db0e      	blt.n	d62b6 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2e>
   d6298:	3501      	adds	r5, #1
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d629a:	2d00      	cmp	r5, #0
   d629c:	dd05      	ble.n	d62aa <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
}

inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
   d629e:	00a9      	lsls	r1, r5, #2
   d62a0:	6800      	ldr	r0, [r0, #0]
   d62a2:	f7ff f805 	bl	d52b0 <realloc>
    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::realloc(data_, n * sizeof(T));
            if (!d) {
   d62a6:	b920      	cbnz	r0, d62b2 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2a>
   d62a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d62aa:	6800      	ldr	r0, [r0, #0]
   d62ac:	f7fe fff8 	bl	d52a0 <free>
    T* data_;
    int size_, capacity_;

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d62b0:	2000      	movs	r0, #0
                return false;
            }
        } else {
            AllocatorT::free(data_);
        }
        data_ = d;
   d62b2:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d62b4:	60a5      	str	r5, [r4, #8]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d62b6:	6825      	ldr	r5, [r4, #0]
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d62b8:	6862      	ldr	r2, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d62ba:	eb05 0186 	add.w	r1, r5, r6, lsl #2
        }
    }

    template<PARTICLE_VECTOR_ENABLE_IF_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
   d62be:	eb05 0282 	add.w	r2, r5, r2, lsl #2
   d62c2:	1a52      	subs	r2, r2, r1
   d62c4:	1d08      	adds	r0, r1, #4
   d62c6:	f001 ffd0 	bl	d826a <memmove>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
   d62ca:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d62ce:	6863      	ldr	r3, [r4, #4]
   d62d0:	3301      	adds	r3, #1
   d62d2:	6063      	str	r3, [r4, #4]
   d62d4:	2001      	movs	r0, #1
    return true;
}
   d62d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d62d8 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d62d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d62da:	4604      	mov	r4, r0
    LOG_WITH_LOCK(mutex_) {
   d62dc:	3024      	adds	r0, #36	; 0x24
         destroyFactoryHandlers();
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
   d62de:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d62e0:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d62e2:	f7ff fc39 	bl	d5b58 <_ZN14RecursiveMutex4lockEv>
    return p - data_;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::contains(const T &value) const {
    return find(data_, data_ + size_, value);
   d62e6:	6823      	ldr	r3, [r4, #0]
   d62e8:	6861      	ldr	r1, [r4, #4]
   d62ea:	eb03 0081 	add.w	r0, r3, r1, lsl #2
            }
        }
    }

    static T* find(T* p, const T* end, const T& value) {
        for (; p != end; ++p) {
   d62ee:	4283      	cmp	r3, r0
   d62f0:	461a      	mov	r2, r3
   d62f2:	d009      	beq.n	d6308 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x30>
            if (*p == value) {
   d62f4:	6812      	ldr	r2, [r2, #0]
   d62f6:	42aa      	cmp	r2, r5
   d62f8:	f103 0304 	add.w	r3, r3, #4
   d62fc:	d1f7      	bne.n	d62ee <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x16>
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
            return false;
   d62fe:	a801      	add	r0, sp, #4
   d6300:	f7ff fe2a 	bl	d5f58 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d6304:	2500      	movs	r5, #0
   d6306:	e00e      	b.n	d6326 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x4e>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6308:	462a      	mov	r2, r5
   d630a:	4620      	mov	r0, r4
   d630c:	f7ff ffbc 	bl	d6288 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d6310:	4605      	mov	r5, r0
   d6312:	2800      	cmp	r0, #0
   d6314:	d0f3      	beq.n	d62fe <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x26>
            return false;
        }
        if (activeHandlers_.size() == 1) {
   d6316:	6863      	ldr	r3, [r4, #4]
   d6318:	2b01      	cmp	r3, #1
   d631a:	d101      	bne.n	d6320 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x48>
            setSystemCallbacks();
   d631c:	f7ff fd10 	bl	d5d40 <_ZN5spark10LogManager18setSystemCallbacksEv>
    }
#endif
}

bool spark::LogManager::addHandler(LogHandler *handler) {
    LOG_WITH_LOCK(mutex_) {
   d6320:	a801      	add	r0, sp, #4
   d6322:	f7ff fe19 	bl	d5f58 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (activeHandlers_.size() == 1) {
            setSystemCallbacks();
        }
    }
    return true;
}
   d6326:	4628      	mov	r0, r5
   d6328:	b003      	add	sp, #12
   d632a:	bd30      	pop	{r4, r5, pc}

000d632c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
        if (dest > p && dest < end) {
   d632c:	4288      	cmp	r0, r1
    static void move(T* dest, const T* p, const T* end) {
        ::memmove(dest, p, (end - p) * sizeof(T));
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    static void move(T* dest, T* p, T* end) {
   d632e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6330:	4606      	mov	r6, r0
   d6332:	460c      	mov	r4, r1
   d6334:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6336:	d914      	bls.n	d6362 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d6338:	4290      	cmp	r0, r2
   d633a:	d213      	bcs.n	d6364 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            // Move elements in reverse order
            --p;
            --end;
   d633c:	f1a2 0510 	sub.w	r5, r2, #16
            dest += end - p - 1;
   d6340:	1a6c      	subs	r4, r5, r1
   d6342:	f1a1 0710 	sub.w	r7, r1, #16
   d6346:	4404      	add	r4, r0
            for (; end != p; --end, --dest) {
   d6348:	42af      	cmp	r7, r5
   d634a:	d018      	beq.n	d637e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d634c:	b11c      	cbz	r4, d6356 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d634e:	4629      	mov	r1, r5
   d6350:	4620      	mov	r0, r4
   d6352:	f000 fe0c 	bl	d6f6e <_ZN6StringC1EOS_>
                end->~T();
   d6356:	4628      	mov	r0, r5
   d6358:	f000 fe19 	bl	d6f8e <_ZN6StringD1Ev>
        if (dest > p && dest < end) {
            // Move elements in reverse order
            --p;
            --end;
            dest += end - p - 1;
            for (; end != p; --end, --dest) {
   d635c:	3d10      	subs	r5, #16
   d635e:	3c10      	subs	r4, #16
   d6360:	e7f2      	b.n	d6348 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
   d6362:	d00c      	beq.n	d637e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d6364:	42ac      	cmp	r4, r5
   d6366:	d00a      	beq.n	d637e <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d6368:	b11e      	cbz	r6, d6372 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d636a:	4621      	mov	r1, r4
   d636c:	4630      	mov	r0, r6
   d636e:	f000 fdfe 	bl	d6f6e <_ZN6StringC1EOS_>
                p->~T();
   d6372:	4620      	mov	r0, r4
   d6374:	f000 fe0b 	bl	d6f8e <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
                new(dest) T(std::move(*end));
                end->~T();
            }
        } else if (dest != p) {
            for (; p != end; ++p, ++dest) {
   d6378:	3410      	adds	r4, #16
   d637a:	3610      	adds	r6, #16
   d637c:	e7f2      	b.n	d6364 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
   d637e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6380 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6380:	b570      	push	{r4, r5, r6, lr}
        T* d = nullptr;
        if (n > 0) {
   d6382:	1e0e      	subs	r6, r1, #0
        capacity_ = n;
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
   d6384:	4605      	mov	r5, r0
        T* d = nullptr;
        if (n > 0) {
   d6386:	dd0b      	ble.n	d63a0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x20>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d6388:	0130      	lsls	r0, r6, #4
   d638a:	f7fe ff81 	bl	d5290 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d638e:	4604      	mov	r4, r0
   d6390:	b170      	cbz	r0, d63b0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x30>
                return false;
            }
            move(d, data_, data_ + size_);
   d6392:	e895 0006 	ldmia.w	r5, {r1, r2}
   d6396:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d639a:	f7ff ffc7 	bl	d632c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
   d639e:	e000      	b.n	d63a2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x22>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d63a0:	2400      	movs	r4, #0
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d63a2:	6828      	ldr	r0, [r5, #0]
   d63a4:	f7fe ff7c 	bl	d52a0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d63a8:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d63aa:	60ae      	str	r6, [r5, #8]
        return true;
   d63ac:	2001      	movs	r0, #1
   d63ae:	bd70      	pop	{r4, r5, r6, pc}
    }
   d63b0:	bd70      	pop	{r4, r5, r6, pc}

000d63b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d63b2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d63b6:	2300      	movs	r3, #0
   d63b8:	b095      	sub	sp, #84	; 0x54
   d63ba:	4692      	mov	sl, r2
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d63bc:	2246      	movs	r2, #70	; 0x46
   d63be:	6003      	str	r3, [r0, #0]
   d63c0:	6043      	str	r3, [r0, #4]
   d63c2:	6083      	str	r3, [r0, #8]
   d63c4:	60c3      	str	r3, [r0, #12]
   d63c6:	6103      	str	r3, [r0, #16]
   d63c8:	6143      	str	r3, [r0, #20]
   d63ca:	7602      	strb	r2, [r0, #24]

spark::detail::LogFilter::LogFilter(LogLevel level) :
        level_(level) {
}

spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d63cc:	9102      	str	r1, [sp, #8]
   d63ce:	f8da 1004 	ldr.w	r1, [sl, #4]
   d63d2:	9308      	str	r3, [sp, #32]
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d63d4:	4299      	cmp	r1, r3
   d63d6:	4605      	mov	r5, r0
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d63d8:	9309      	str	r3, [sp, #36]	; 0x24
   d63da:	930a      	str	r3, [sp, #40]	; 0x28
    return size_ == 0;
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::reserve(int n) {
    if (n > capacity_ && !realloc(n)) {
   d63dc:	f340 809d 	ble.w	d651a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d63e0:	a808      	add	r0, sp, #32
   d63e2:	f7ff ffcd 	bl	d6380 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d63e6:	2800      	cmp	r0, #0
   d63e8:	f040 8097 	bne.w	d651a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x168>
   d63ec:	e08e      	b.n	d650c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x15a>
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
   d63ee:	4621      	mov	r1, r4
   d63f0:	a80b      	add	r0, sp, #44	; 0x2c
   d63f2:	f000 fdbc 	bl	d6f6e <_ZN6StringC1EOS_>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d63f6:	a90b      	add	r1, sp, #44	; 0x2c
   d63f8:	a80f      	add	r0, sp, #60	; 0x3c
   d63fa:	9e09      	ldr	r6, [sp, #36]	; 0x24
   d63fc:	f000 fdb7 	bl	d6f6e <_ZN6StringC1EOS_>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6400:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d6404:	4299      	cmp	r1, r3
   d6406:	f2c0 80ce 	blt.w	d65a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
   d640a:	3101      	adds	r1, #1
   d640c:	a808      	add	r0, sp, #32
   d640e:	f7ff ffb7 	bl	d6380 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6412:	2800      	cmp	r0, #0
   d6414:	f040 80c7 	bne.w	d65a6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
    AllocatorT::free(data_);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::append(T value) {
    return insert(size_, std::move(value));
   d6418:	a80f      	add	r0, sp, #60	; 0x3c
   d641a:	f000 fdb8 	bl	d6f8e <_ZN6StringD1Ev>
   d641e:	a80b      	add	r0, sp, #44	; 0x2c
   d6420:	f000 fdb5 	bl	d6f8e <_ZN6StringD1Ev>
   d6424:	3414      	adds	r4, #20
    // Store category names
    Vector<String> cats;
    if (!cats.reserve(filters.size())) {
        return;
    }
    for (LogCategoryFilter &filter: filters) {
   d6426:	42a7      	cmp	r7, r4
   d6428:	d1e1      	bne.n	d63ee <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x3c>
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d642a:	2600      	movs	r6, #0
   d642c:	960b      	str	r6, [sp, #44]	; 0x2c
   d642e:	960c      	str	r6, [sp, #48]	; 0x30
   d6430:	960d      	str	r6, [sp, #52]	; 0x34
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d6432:	46b1      	mov	r9, r6
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6434:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d6436:	429e      	cmp	r6, r3
   d6438:	f280 80a8 	bge.w	d658c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d643c:	0133      	lsls	r3, r6, #4
   d643e:	9a08      	ldr	r2, [sp, #32]
   d6440:	58d3      	ldr	r3, [r2, r3]
        const char *category = cats.at(i).c_str();
   d6442:	9306      	str	r3, [sp, #24]
        if (!category) {
   d6444:	2b00      	cmp	r3, #0
   d6446:	f000 809f 	beq.w	d6588 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
   d644a:	2314      	movs	r3, #20
   d644c:	4373      	muls	r3, r6
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
   d644e:	f8cd 901c 	str.w	r9, [sp, #28]
   d6452:	9301      	str	r3, [sp, #4]
    for (int i = 0; i < cats.size(); ++i) {
        const char *category = cats.at(i).c_str();
        if (!category) {
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
   d6454:	ac0b      	add	r4, sp, #44	; 0x2c
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6456:	a907      	add	r1, sp, #28
   d6458:	a806      	add	r0, sp, #24
   d645a:	f7ff fb2c 	bl	d5ab6 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d645e:	4607      	mov	r7, r0
   d6460:	2800      	cmp	r0, #0
   d6462:	f000 8091 	beq.w	d6588 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d6>
            bool found = false;
   d6466:	ab14      	add	r3, sp, #80	; 0x50
            const int index = nodeIndex(*pNodes, name, size, found);
   d6468:	4601      	mov	r1, r0
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
   d646a:	f803 9d39 	strb.w	r9, [r3, #-57]!
            const int index = nodeIndex(*pNodes, name, size, found);
   d646e:	9a07      	ldr	r2, [sp, #28]
   d6470:	4620      	mov	r0, r4
   d6472:	f7ff fb8d 	bl	d5b90 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6476:	f89d 8017 	ldrb.w	r8, [sp, #23]
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
   d647a:	9000      	str	r0, [sp, #0]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d647c:	f1b8 0f00 	cmp.w	r8, #0
   d6480:	d153      	bne.n	d652a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
   d6482:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    Vector<Node> nodes; // Children nodes

    Node(const char *name, uint16_t size) :
            name(name),
            size(size),
            level(-1) {
   d6486:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
   d648a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d648e:	970f      	str	r7, [sp, #60]	; 0x3c
   d6490:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
   d6494:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
   d6498:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   d649c:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d64a0:	6867      	ldr	r7, [r4, #4]
   d64a2:	68a3      	ldr	r3, [r4, #8]
   d64a4:	429f      	cmp	r7, r3
   d64a6:	da4f      	bge.n	d6548 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x196>
        return false;
    }
    T* const p = data_ + i;
   d64a8:	9b00      	ldr	r3, [sp, #0]
   d64aa:	f8d4 b000 	ldr.w	fp, [r4]
    move(p + 1, p, data_ + size_);
   d64ae:	6861      	ldr	r1, [r4, #4]
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d64b0:	2214      	movs	r2, #20
   d64b2:	4353      	muls	r3, r2
   d64b4:	eb0b 0703 	add.w	r7, fp, r3
    move(p + 1, p, data_ + size_);
   d64b8:	fb02 b201 	mla	r2, r2, r1, fp
   d64bc:	f107 0014 	add.w	r0, r7, #20
   d64c0:	4639      	mov	r1, r7
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d64c2:	9303      	str	r3, [sp, #12]
    move(p + 1, p, data_ + size_);
   d64c4:	f7ff fe94 	bl	d61f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d64c8:	b1a7      	cbz	r7, d64f4 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x142>
    |
    `- aa (error) - b (warn)
*/

// spark::detail::LogFilter
struct spark::detail::LogFilter::Node {
   d64ca:	9b03      	ldr	r3, [sp, #12]
   d64cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   d64ce:	f84b 2003 	str.w	r2, [fp, r3]
   d64d2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   d64d6:	80bb      	strh	r3, [r7, #4]
   d64d8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	; 0x42
   d64dc:	80fb      	strh	r3, [r7, #6]
// spark::Vector
template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector() :
        data_(nullptr),
        size_(0),
        capacity_(0) {
   d64de:	f8c7 9008 	str.w	r9, [r7, #8]
   d64e2:	f8c7 900c 	str.w	r9, [r7, #12]
   d64e6:	f8c7 9010 	str.w	r9, [r7, #16]
    }
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
   d64ea:	a911      	add	r1, sp, #68	; 0x44
   d64ec:	f107 0008 	add.w	r0, r7, #8
   d64f0:	f7ff fe67 	bl	d61c2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
        return false;
    }
    T* const p = data_ + i;
    move(p + 1, p, data_ + size_);
    new(p) T(std::move(value));
    ++size_;
   d64f4:	6863      	ldr	r3, [r4, #4]
   d64f6:	3301      	adds	r3, #1
   d64f8:	6063      	str	r3, [r4, #4]
   d64fa:	a811      	add	r0, sp, #68	; 0x44
   d64fc:	f7ff fcd2 	bl	d5ea4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6500:	f1b8 0f00 	cmp.w	r8, #0
   d6504:	d011      	beq.n	d652a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x178>
    }
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
   d6506:	a80b      	add	r0, sp, #44	; 0x2c
   d6508:	f7ff fccc 	bl	d5ea4 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d650c:	a808      	add	r0, sp, #32
   d650e:	f7ff fcdd 	bl	d5ecc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
    }
    using std::swap;
    swap(cats_, cats);
    swap(nodes_, nodes);
    level_ = level;
}
   d6512:	4628      	mov	r0, r5
   d6514:	b015      	add	sp, #84	; 0x54
   d6516:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d651a:	f8da 4000 	ldr.w	r4, [sl]
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d651e:	f8da 3004 	ldr.w	r3, [sl, #4]
   d6522:	2714      	movs	r7, #20
   d6524:	fb07 4703 	mla	r7, r7, r3, r4
   d6528:	e77d      	b.n	d6426 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_[size_ - 1];
}

template<typename T, typename AllocatorT>
inline T& spark::Vector<T, AllocatorT>::at(int i) {
    return data_[i];
   d652a:	6823      	ldr	r3, [r4, #0]
   d652c:	9a00      	ldr	r2, [sp, #0]
   d652e:	2414      	movs	r4, #20
   d6530:	fb04 3402 	mla	r4, r4, r2, r3
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
                return;
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
   d6534:	9b06      	ldr	r3, [sp, #24]
   d6536:	781b      	ldrb	r3, [r3, #0]
   d6538:	bb23      	cbnz	r3, d6584 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
                node.level = filters.at(i).level_;
   d653a:	f8da 3000 	ldr.w	r3, [sl]
   d653e:	9a01      	ldr	r2, [sp, #4]
   d6540:	4413      	add	r3, r2
   d6542:	7c1b      	ldrb	r3, [r3, #16]
   d6544:	80e3      	strh	r3, [r4, #6]
   d6546:	e01d      	b.n	d6584 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d2>
    return insert(0, vector);
}

template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6548:	3701      	adds	r7, #1
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
   d654a:	2f00      	cmp	r7, #0
   d654c:	dd0f      	ble.n	d656e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>

} // particle

// spark::DefaultAllocator
inline void* spark::DefaultAllocator::malloc(size_t size) {
    return ::malloc(size);
   d654e:	2314      	movs	r3, #20
   d6550:	fb03 f007 	mul.w	r0, r3, r7
   d6554:	9303      	str	r3, [sp, #12]
   d6556:	f7fe fe9b 	bl	d5290 <malloc>
    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
        if (n > 0) {
            d = (T*)AllocatorT::malloc(n * sizeof(T));
            if (!d) {
   d655a:	4683      	mov	fp, r0
   d655c:	b178      	cbz	r0, d657e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1cc>
                return false;
            }
            move(d, data_, data_ + size_);
   d655e:	e894 0006 	ldmia.w	r4, {r1, r2}
   d6562:	9b03      	ldr	r3, [sp, #12]
   d6564:	fb03 1202 	mla	r2, r3, r2, r1
   d6568:	f7ff fe42 	bl	d61f0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d656c:	e000      	b.n	d6570 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1be>
        return true;
    }

    template<PARTICLE_VECTOR_ENABLE_IF_NOT_TRIVIALLY_COPYABLE(T)>
    bool realloc(int n) {
        T* d = nullptr;
   d656e:	46c3      	mov	fp, r8
inline void* spark::DefaultAllocator::realloc(void* ptr, size_t size) {
    return ::realloc(ptr, size);
}

inline void spark::DefaultAllocator::free(void* ptr) {
    ::free(ptr);
   d6570:	6820      	ldr	r0, [r4, #0]
   d6572:	f7fe fe95 	bl	d52a0 <free>
                return false;
            }
            move(d, data_, data_ + size_);
        }
        AllocatorT::free(data_);
        data_ = d;
   d6576:	f8c4 b000 	str.w	fp, [r4]
        capacity_ = n;
   d657a:	60a7      	str	r7, [r4, #8]
   d657c:	e794      	b.n	d64a8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xf6>
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
            bool found = false;
            const int index = nodeIndex(*pNodes, name, size, found);
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d657e:	f04f 0801 	mov.w	r8, #1
   d6582:	e7ba      	b.n	d64fa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x148>
            }
            Node &node = pNodes->at(index);
            if (!*category) { // Check if it's last subcategory
                node.level = filters.at(i).level_;
            }
            pNodes = &node.nodes;
   d6584:	3408      	adds	r4, #8
            continue; // Invalid usage or string allocation error
        }
        Vector<Node> *pNodes = &nodes; // Root nodes
        const char *name = nullptr; // Subcategory name
        size_t size = 0; // Name length
        while ((name = nextSubcategoryName(category, size))) {
   d6586:	e766      	b.n	d6456 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa4>
    for (LogCategoryFilter &filter: filters) {
        cats.append(std::move(filter.cat_));
    }
    // Process category filters
    Vector<Node> nodes;
    for (int i = 0; i < cats.size(); ++i) {
   d6588:	3601      	adds	r6, #1
   d658a:	e753      	b.n	d6434 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x82>
            }
            pNodes = &node.nodes;
        }
    }
    using std::swap;
    swap(cats_, cats);
   d658c:	a908      	add	r1, sp, #32
   d658e:	4628      	mov	r0, r5
   d6590:	f7ff fe17 	bl	d61c2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    swap(nodes_, nodes);
   d6594:	a90b      	add	r1, sp, #44	; 0x2c
   d6596:	f105 000c 	add.w	r0, r5, #12
   d659a:	f7ff fe12 	bl	d61c2 <_ZN5spark4swapINS_17LogCategoryFilterENS_16DefaultAllocatorEEEvRNS_6VectorIT_T0_EES7_>
    level_ = level;
   d659e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d65a2:	762b      	strb	r3, [r5, #24]
   d65a4:	e7af      	b.n	d6506 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x154>
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d65a6:	9b08      	ldr	r3, [sp, #32]
    move(p + 1, p, data_ + size_);
   d65a8:	9a09      	ldr	r2, [sp, #36]	; 0x24
template<typename T, typename AllocatorT>
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
        return false;
    }
    T* const p = data_ + i;
   d65aa:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d65ae:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d65b2:	4631      	mov	r1, r6
   d65b4:	f106 0010 	add.w	r0, r6, #16
   d65b8:	f7ff feb8 	bl	d632c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d65bc:	b11e      	cbz	r6, d65c6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x214>
   d65be:	a90f      	add	r1, sp, #60	; 0x3c
   d65c0:	4630      	mov	r0, r6
   d65c2:	f000 fcd4 	bl	d6f6e <_ZN6StringC1EOS_>
    ++size_;
   d65c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d65c8:	3301      	adds	r3, #1
   d65ca:	9309      	str	r3, [sp, #36]	; 0x24
   d65cc:	e724      	b.n	d6418 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x66>
	...

000d65d0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d65d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d65d2:	4604      	mov	r4, r0
   d65d4:	4b09      	ldr	r3, [pc, #36]	; (d65fc <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d65d6:	f844 3b04 	str.w	r3, [r4], #4
// spark::LogHandler
inline spark::LogHandler::LogHandler(LogLevel level) :
        filter_(level) {
}

inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d65da:	4605      	mov	r5, r0
   d65dc:	460e      	mov	r6, r1
        filter_(level, filters) {
   d65de:	a801      	add	r0, sp, #4
   d65e0:	4611      	mov	r1, r2
   d65e2:	f7fd ff1c 	bl	d441e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d65e6:	aa01      	add	r2, sp, #4
   d65e8:	4631      	mov	r1, r6
   d65ea:	4620      	mov	r0, r4
   d65ec:	f7ff fee1 	bl	d63b2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d65f0:	a801      	add	r0, sp, #4
   d65f2:	f7fd fed3 	bl	d439c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d65f6:	4628      	mov	r0, r5
   d65f8:	b004      	add	sp, #16
   d65fa:	bd70      	pop	{r4, r5, r6, pc}
   d65fc:	000d9a38 	.word	0x000d9a38

000d6600 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6600:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6602:	460f      	mov	r7, r1
   d6604:	b08b      	sub	sp, #44	; 0x2c
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6606:	492b      	ldr	r1, [pc, #172]	; (d66b4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb4>)

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d6608:	9c10      	ldr	r4, [sp, #64]	; 0x40
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d660a:	4638      	mov	r0, r7

#if Wiring_LogConfig

// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
   d660c:	4616      	mov	r6, r2
   d660e:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6610:	f002 f8dc 	bl	d87cc <strcmp>
   d6614:	bb28      	cbnz	r0, d6662 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x62>
        if (!stream) {
   d6616:	2c00      	cmp	r4, #0
   d6618:	d049      	beq.n	d66ae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr; // Output stream is not specified
        }
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d661a:	4629      	mov	r1, r5
   d661c:	a801      	add	r0, sp, #4
   d661e:	f7ff fddd 	bl	d61dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6622:	4925      	ldr	r1, [pc, #148]	; (d66b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6624:	2024      	movs	r0, #36	; 0x24
   d6626:	f001 f917 	bl	d7858 <_ZnwjRKSt9nothrow_t>
   d662a:	4605      	mov	r5, r0
   d662c:	b1b8      	cbz	r0, d665e <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x5e>
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d662e:	a901      	add	r1, sp, #4
   d6630:	a804      	add	r0, sp, #16
   d6632:	f7ff fdd3 	bl	d61dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6636:	a904      	add	r1, sp, #16
   d6638:	a807      	add	r0, sp, #28
   d663a:	f7fd fef0 	bl	d441e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d663e:	aa07      	add	r2, sp, #28
   d6640:	4631      	mov	r1, r6
   d6642:	4628      	mov	r0, r5
   d6644:	f7ff ffc4 	bl	d65d0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6648:	a807      	add	r0, sp, #28
   d664a:	f7fd fea7 	bl	d439c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d664e:	4b1b      	ldr	r3, [pc, #108]	; (d66bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d6650:	602b      	str	r3, [r5, #0]
   d6652:	622c      	str	r4, [r5, #32]
    Print *stream_;
};

class JSONStreamLogHandler: public StreamLogHandler {
public:
    using StreamLogHandler::StreamLogHandler;
   d6654:	a804      	add	r0, sp, #16
   d6656:	f7fd fea1 	bl	d439c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d665a:	4b19      	ldr	r3, [pc, #100]	; (d66c0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc0>)
   d665c:	602b      	str	r3, [r5, #0]
   d665e:	a801      	add	r0, sp, #4
   d6660:	e01f      	b.n	d66a2 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa2>
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d6662:	4918      	ldr	r1, [pc, #96]	; (d66c4 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xc4>)
   d6664:	4638      	mov	r0, r7
   d6666:	f002 f8b1 	bl	d87cc <strcmp>
   d666a:	b9f0      	cbnz	r0, d66aa <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xaa>
        if (!stream) {
   d666c:	b1fc      	cbz	r4, d66ae <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xae>
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d666e:	4629      	mov	r1, r5
   d6670:	a804      	add	r0, sp, #16
   d6672:	f7ff fdb3 	bl	d61dc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6676:	4910      	ldr	r1, [pc, #64]	; (d66b8 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb8>)
   d6678:	2024      	movs	r0, #36	; 0x24
   d667a:	f001 f8ed 	bl	d7858 <_ZnwjRKSt9nothrow_t>
   d667e:	4605      	mov	r5, r0
   d6680:	b170      	cbz	r0, d66a0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>
}

// spark::StreamLogHandler
inline spark::StreamLogHandler::StreamLogHandler(Print &stream, LogLevel level, LogCategoryFilters filters) :
        LogHandler(level, filters),
        stream_(&stream) {
   d6682:	a904      	add	r1, sp, #16
   d6684:	a807      	add	r0, sp, #28
   d6686:	f7fd feca 	bl	d441e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d668a:	aa07      	add	r2, sp, #28
   d668c:	4631      	mov	r1, r6
   d668e:	4628      	mov	r0, r5
   d6690:	f7ff ff9e 	bl	d65d0 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6694:	a807      	add	r0, sp, #28
   d6696:	f7fd fe81 	bl	d439c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d669a:	4b08      	ldr	r3, [pc, #32]	; (d66bc <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xbc>)
   d669c:	602b      	str	r3, [r5, #0]
   d669e:	622c      	str	r4, [r5, #32]
   d66a0:	a804      	add	r0, sp, #16
   d66a2:	f7fd fe7b 	bl	d439c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d66a6:	4628      	mov	r0, r5
   d66a8:	e002      	b.n	d66b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
// spark::DefaultLogHandlerFactory
LogHandler* spark::DefaultLogHandlerFactory::createHandler(const char *type, LogLevel level, LogCategoryFilters filters,
            Print *stream, const JSONValue &params) {
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
        if (!stream) {
            return nullptr; // Output stream is not specified
   d66aa:	2000      	movs	r0, #0
   d66ac:	e000      	b.n	d66b0 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>
   d66ae:	4620      	mov	r0, r4
            return nullptr;
        }
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
    }
    return nullptr; // Unknown handler type
}
   d66b0:	b00b      	add	sp, #44	; 0x2c
   d66b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d66b4:	000d9e43 	.word	0x000d9e43
   d66b8:	000da00c 	.word	0x000da00c
   d66bc:	000d9ecc 	.word	0x000d9ecc
   d66c0:	000d9dd8 	.word	0x000d9dd8
   d66c4:	000d9e47 	.word	0x000d9e47

000d66c8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d66c8:	4b01      	ldr	r3, [pc, #4]	; (d66d0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d66ca:	4a02      	ldr	r2, [pc, #8]	; (d66d4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d66cc:	601a      	str	r2, [r3, #0]
   d66ce:	4770      	bx	lr
   d66d0:	2003e270 	.word	0x2003e270
   d66d4:	000d9e58 	.word	0x000d9e58

000d66d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d66d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d66dc:	9d08      	ldr	r5, [sp, #32]
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d66de:	f8d0 9020 	ldr.w	r9, [r0, #32]
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d66e2:	4604      	mov	r4, r0
   d66e4:	460e      	mov	r6, r1
   d66e6:	4617      	mov	r7, r2
   d66e8:	4698      	mov	r8, r3
    // TODO: Move this check to a base class (see also JSONStreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (stream_ == &Serial && Network.listening()) {
   d66ea:	f000 ff17 	bl	d751c <_Z16_fetch_usbserialv>
   d66ee:	4581      	cmp	r9, r0
   d66f0:	d105      	bne.n	d66fe <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x26>
   d66f2:	485a      	ldr	r0, [pc, #360]	; (d685c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d66f4:	f000 fa73 	bl	d6bde <_ZN5spark12NetworkClass9listeningEv>
   d66f8:	2800      	cmp	r0, #0
   d66fa:	f040 80ac 	bne.w	d6856 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17e>
        return; // Do not mix logging and serial console output
    }
#endif
    const char *s = nullptr;
    // Timestamp
    if (attr.has_time) {
   d66fe:	792b      	ldrb	r3, [r5, #4]
   d6700:	071b      	lsls	r3, r3, #28
   d6702:	d505      	bpl.n	d6710 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x38>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d6704:	696b      	ldr	r3, [r5, #20]
   d6706:	4a56      	ldr	r2, [pc, #344]	; (d6860 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d6708:	6a20      	ldr	r0, [r4, #32]
   d670a:	2100      	movs	r1, #0
   d670c:	f000 fbd3 	bl	d6eb6 <_ZN5Print11printf_implEbPKcz>
        printf("%010u ", (unsigned)attr.time);
    }
    // Category
    if (category) {
   d6710:	f1b8 0f00 	cmp.w	r8, #0
   d6714:	d00d      	beq.n	d6732 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x5a>
        write('[');
   d6716:	215b      	movs	r1, #91	; 0x5b
   d6718:	4620      	mov	r0, r4
   d671a:	f7ff fa2e 	bl	d5b7a <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d671e:	4641      	mov	r1, r8
   d6720:	4620      	mov	r0, r4
   d6722:	f7ff fa1c 	bl	d5b5e <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d6726:	6823      	ldr	r3, [r4, #0]
   d6728:	494e      	ldr	r1, [pc, #312]	; (d6864 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d672a:	68db      	ldr	r3, [r3, #12]
   d672c:	2202      	movs	r2, #2
   d672e:	4620      	mov	r0, r4
   d6730:	4798      	blx	r3
    }
    // Source file
    if (attr.has_file) {
   d6732:	792b      	ldrb	r3, [r5, #4]
   d6734:	07d9      	lsls	r1, r3, #31
   d6736:	d525      	bpl.n	d6784 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xac>
        s = extractFileName(attr.file); // Strip directory path
   d6738:	f8d5 8008 	ldr.w	r8, [r5, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d673c:	212f      	movs	r1, #47	; 0x2f
   d673e:	4640      	mov	r0, r8
   d6740:	f002 fd9a 	bl	d9278 <strrchr>
    if (s1) {
   d6744:	b108      	cbz	r0, d674a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x72>
        return s1 + 1;
   d6746:	f100 0801 	add.w	r8, r0, #1
        write("] ", 2);
    }
    // Source file
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        write(s); // File name
   d674a:	4641      	mov	r1, r8
   d674c:	4620      	mov	r0, r4
   d674e:	f7ff fa06 	bl	d5b5e <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d6752:	792b      	ldrb	r3, [r5, #4]
   d6754:	079a      	lsls	r2, r3, #30
   d6756:	d509      	bpl.n	d676c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x94>
            write(':');
   d6758:	213a      	movs	r1, #58	; 0x3a
   d675a:	4620      	mov	r0, r4
   d675c:	f7ff fa0d 	bl	d5b7a <_ZN5spark16StreamLogHandler5writeEc>
   d6760:	68eb      	ldr	r3, [r5, #12]
   d6762:	4a41      	ldr	r2, [pc, #260]	; (d6868 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d6764:	6a20      	ldr	r0, [r4, #32]
   d6766:	2100      	movs	r1, #0
   d6768:	f000 fba5 	bl	d6eb6 <_ZN5Print11printf_implEbPKcz>
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
   d676c:	792b      	ldrb	r3, [r5, #4]
   d676e:	f013 0f04 	tst.w	r3, #4
   d6772:	6823      	ldr	r3, [r4, #0]
            write(", ", 2);
   d6774:	bf18      	it	ne
   d6776:	493d      	ldrne	r1, [pc, #244]	; (d686c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6778:	68db      	ldr	r3, [r3, #12]
        } else {
            write(": ", 2);
   d677a:	bf08      	it	eq
   d677c:	493c      	ldreq	r1, [pc, #240]	; (d6870 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
        if (attr.has_line) {
            write(':');
            printf("%d", (int)attr.line); // Line number
        }
        if (attr.has_function) {
            write(", ", 2);
   d677e:	2202      	movs	r2, #2
        } else {
            write(": ", 2);
   d6780:	4620      	mov	r0, r4
   d6782:	4798      	blx	r3
        }
    }
    // Function name
    if (attr.has_function) {
   d6784:	792b      	ldrb	r3, [r5, #4]
   d6786:	075b      	lsls	r3, r3, #29
   d6788:	d518      	bpl.n	d67bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe4>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d678a:	6929      	ldr	r1, [r5, #16]
   d678c:	460a      	mov	r2, r1
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d678e:	4613      	mov	r3, r2
   d6790:	f813 0b01 	ldrb.w	r0, [r3], #1
   d6794:	b138      	cbz	r0, d67a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
        if (*s == ' ') {
   d6796:	2820      	cmp	r0, #32
   d6798:	d101      	bne.n	d679e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
            s1 = s + 1; // Skip return type
   d679a:	4619      	mov	r1, r3
   d679c:	e001      	b.n	d67a2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xca>
        } else if (*s == '(') {
   d679e:	2828      	cmp	r0, #40	; 0x28
   d67a0:	d001      	beq.n	d67a6 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xce>
                return cmp < 0;
            }));
}

// spark::StreamLogHandler
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d67a2:	461a      	mov	r2, r3
   d67a4:	e7f3      	b.n	d678e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        write(s, n);
   d67a6:	6823      	ldr	r3, [r4, #0]
   d67a8:	1a52      	subs	r2, r2, r1
   d67aa:	68db      	ldr	r3, [r3, #12]
   d67ac:	4620      	mov	r0, r4
   d67ae:	4798      	blx	r3
        write("(): ", 4);
   d67b0:	6823      	ldr	r3, [r4, #0]
   d67b2:	4930      	ldr	r1, [pc, #192]	; (d6874 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d67b4:	68db      	ldr	r3, [r3, #12]
   d67b6:	2204      	movs	r2, #4
   d67b8:	4620      	mov	r0, r4
   d67ba:	4798      	blx	r3
inline LogLevel spark::LogHandler::level(const char *category) const {
    return filter_.level(category);
}

inline const char* spark::LogHandler::levelName(LogLevel level) {
    return log_level_name(level, nullptr);
   d67bc:	2100      	movs	r1, #0
   d67be:	4638      	mov	r0, r7
   d67c0:	f7fe fc98 	bl	d50f4 <log_level_name>
    }
    // Level
    s = levelName(level);
    write(s);
   d67c4:	4601      	mov	r1, r0
   d67c6:	4620      	mov	r0, r4
   d67c8:	f7ff f9c9 	bl	d5b5e <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d67cc:	6823      	ldr	r3, [r4, #0]
   d67ce:	4928      	ldr	r1, [pc, #160]	; (d6870 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d67d0:	68db      	ldr	r3, [r3, #12]
   d67d2:	2202      	movs	r2, #2
   d67d4:	4620      	mov	r0, r4
   d67d6:	4798      	blx	r3
    // Message
    if (msg) {
   d67d8:	b11e      	cbz	r6, d67e2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x10a>
        write(msg);
   d67da:	4631      	mov	r1, r6
   d67dc:	4620      	mov	r0, r4
   d67de:	f7ff f9be 	bl	d5b5e <_ZN5spark16StreamLogHandler5writeEPKc>
    }
    // Additional attributes
    if (attr.has_code || attr.has_details) {
   d67e2:	792b      	ldrb	r3, [r5, #4]
   d67e4:	f013 0f30 	tst.w	r3, #48	; 0x30
   d67e8:	d02d      	beq.n	d6846 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16e>
        write(" [", 2);
   d67ea:	6823      	ldr	r3, [r4, #0]
   d67ec:	4922      	ldr	r1, [pc, #136]	; (d6878 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d67ee:	68db      	ldr	r3, [r3, #12]
   d67f0:	4620      	mov	r0, r4
   d67f2:	2202      	movs	r2, #2
   d67f4:	4798      	blx	r3
        // Code
        if (attr.has_code) {
   d67f6:	792b      	ldrb	r3, [r5, #4]
   d67f8:	06d8      	lsls	r0, r3, #27
   d67fa:	d50b      	bpl.n	d6814 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
            write("code = ", 7);
   d67fc:	6823      	ldr	r3, [r4, #0]
   d67fe:	491f      	ldr	r1, [pc, #124]	; (d687c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a4>)
   d6800:	68db      	ldr	r3, [r3, #12]
   d6802:	2207      	movs	r2, #7
   d6804:	4620      	mov	r0, r4
   d6806:	4798      	blx	r3
   d6808:	69ab      	ldr	r3, [r5, #24]
   d680a:	4a1d      	ldr	r2, [pc, #116]	; (d6880 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a8>)
   d680c:	6a20      	ldr	r0, [r4, #32]
   d680e:	2100      	movs	r1, #0
   d6810:	f000 fb51 	bl	d6eb6 <_ZN5Print11printf_implEbPKcz>
            printf("%" PRIiPTR, (intptr_t)attr.code);
        }
        // Details
        if (attr.has_details) {
   d6814:	792b      	ldrb	r3, [r5, #4]
   d6816:	0699      	lsls	r1, r3, #26
   d6818:	d511      	bpl.n	d683e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x166>
            if (attr.has_code) {
   d681a:	06da      	lsls	r2, r3, #27
   d681c:	d505      	bpl.n	d682a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x152>
                write(", ", 2);
   d681e:	6823      	ldr	r3, [r4, #0]
   d6820:	4912      	ldr	r1, [pc, #72]	; (d686c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d6822:	68db      	ldr	r3, [r3, #12]
   d6824:	2202      	movs	r2, #2
   d6826:	4620      	mov	r0, r4
   d6828:	4798      	blx	r3
            }
            write("details = ", 10);
   d682a:	6823      	ldr	r3, [r4, #0]
   d682c:	4915      	ldr	r1, [pc, #84]	; (d6884 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1ac>)
   d682e:	68db      	ldr	r3, [r3, #12]
   d6830:	4620      	mov	r0, r4
   d6832:	220a      	movs	r2, #10
   d6834:	4798      	blx	r3
            write(attr.details);
   d6836:	69e9      	ldr	r1, [r5, #28]
   d6838:	4620      	mov	r0, r4
   d683a:	f7ff f990 	bl	d5b5e <_ZN5spark16StreamLogHandler5writeEPKc>
        }
        write(']');
   d683e:	215d      	movs	r1, #93	; 0x5d
   d6840:	4620      	mov	r0, r4
   d6842:	f7ff f99a 	bl	d5b7a <_ZN5spark16StreamLogHandler5writeEc>
    }
    write("\r\n", 2);
   d6846:	6823      	ldr	r3, [r4, #0]
   d6848:	490f      	ldr	r1, [pc, #60]	; (d6888 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1b0>)
   d684a:	68db      	ldr	r3, [r3, #12]
   d684c:	4620      	mov	r0, r4
   d684e:	2202      	movs	r2, #2
}
   d6850:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            write("details = ", 10);
            write(attr.details);
        }
        write(']');
    }
    write("\r\n", 2);
   d6854:	4718      	bx	r3
   d6856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d685a:	bf00      	nop
   d685c:	2003e448 	.word	0x2003e448
   d6860:	000d9e5c 	.word	0x000d9e5c
   d6864:	000d9e63 	.word	0x000d9e63
   d6868:	000da2bb 	.word	0x000da2bb
   d686c:	000d9e66 	.word	0x000d9e66
   d6870:	000d9e6b 	.word	0x000d9e6b
   d6874:	000d9e69 	.word	0x000d9e69
   d6878:	000d9e6e 	.word	0x000d9e6e
   d687c:	000d9e71 	.word	0x000d9e71
   d6880:	000d9e79 	.word	0x000d9e79
   d6884:	000d9e7c 	.word	0x000d9e7c
   d6888:	000d9e87 	.word	0x000d9e87

000d688c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d688c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6890:	b085      	sub	sp, #20
   d6892:	f8d0 8020 	ldr.w	r8, [r0, #32]
   d6896:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d6898:	4606      	mov	r6, r0
   d689a:	460f      	mov	r7, r1
   d689c:	4691      	mov	r9, r2
   d689e:	461d      	mov	r5, r3
    // TODO: Move this check to a base class (see also StreamLogHandler::logMessage())
#if PLATFORM_ID != PLATFORM_GCC
    if (this->stream() == &Serial && Network.listening()) {
   d68a0:	f000 fe3c 	bl	d751c <_Z16_fetch_usbserialv>
   d68a4:	4580      	cmp	r8, r0
   d68a6:	d105      	bne.n	d68b4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d68a8:	484a      	ldr	r0, [pc, #296]	; (d69d4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d68aa:	f000 f998 	bl	d6bde <_ZN5spark12NetworkClass9listeningEv>
   d68ae:	2800      	cmp	r0, #0
   d68b0:	f040 808c 	bne.w	d69cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x140>
   d68b4:	6a33      	ldr	r3, [r6, #32]
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d68b6:	4a48      	ldr	r2, [pc, #288]	; (d69d8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d68b8:	9201      	str	r2, [sp, #4]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d68ba:	f04f 0800 	mov.w	r8, #0
        return; // Do not mix logging and serial console output
    }
#endif
    JSONStreamWriter json(*this->stream());
    json.beginObject();
   d68be:	a801      	add	r0, sp, #4
    write(&c, 1);
}

// spark::JSONStreamWriter
inline spark::JSONStreamWriter::JSONStreamWriter(Print &stream) :
        strm_(stream) {
   d68c0:	9303      	str	r3, [sp, #12]
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
   d68c2:	f88d 8008 	strb.w	r8, [sp, #8]
   d68c6:	f7fe ffec 	bl	d58a2 <_ZN5spark10JSONWriter11beginObjectEv>
   d68ca:	4641      	mov	r1, r8
   d68cc:	4648      	mov	r0, r9
   d68ce:	f7fe fc11 	bl	d50f4 <log_level_name>
    // Level
    const char *s = levelName(level);
    json.name("l", 1).value(s);
   d68d2:	4942      	ldr	r1, [pc, #264]	; (d69dc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d68d4:	4680      	mov	r8, r0
   d68d6:	2201      	movs	r2, #1
   d68d8:	a801      	add	r0, sp, #4
   d68da:	f7ff f867 	bl	d59ac <_ZN5spark10JSONWriter4nameEPKcj>
   d68de:	4641      	mov	r1, r8
   d68e0:	f7ff f92d 	bl	d5b3e <_ZN5spark10JSONWriter5valueEPKc>
    // Message
    if (msg) {
   d68e4:	b13f      	cbz	r7, d68f6 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d68e6:	493e      	ldr	r1, [pc, #248]	; (d69e0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d68e8:	2201      	movs	r2, #1
   d68ea:	a801      	add	r0, sp, #4
   d68ec:	f7ff f85e 	bl	d59ac <_ZN5spark10JSONWriter4nameEPKcj>
   d68f0:	4639      	mov	r1, r7
   d68f2:	f7ff f924 	bl	d5b3e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Category
    if (category) {
   d68f6:	b13d      	cbz	r5, d6908 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d68f8:	493a      	ldr	r1, [pc, #232]	; (d69e4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d68fa:	2201      	movs	r2, #1
   d68fc:	a801      	add	r0, sp, #4
   d68fe:	f7ff f855 	bl	d59ac <_ZN5spark10JSONWriter4nameEPKcj>
   d6902:	4629      	mov	r1, r5
   d6904:	f7ff f91b 	bl	d5b3e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // File name
    if (attr.has_file) {
   d6908:	7923      	ldrb	r3, [r4, #4]
   d690a:	07df      	lsls	r7, r3, #31
   d690c:	d50e      	bpl.n	d692c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d690e:	68a5      	ldr	r5, [r4, #8]
    }
    return nullptr;
}

const char* extractFileName(const char *s) {
    const char *s1 = strrchr(s, '/');
   d6910:	212f      	movs	r1, #47	; 0x2f
   d6912:	4628      	mov	r0, r5
   d6914:	f002 fcb0 	bl	d9278 <strrchr>
    if (s1) {
   d6918:	b100      	cbz	r0, d691c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d691a:	1c45      	adds	r5, r0, #1
        json.name("c", 1).value(category);
    }
    // File name
    if (attr.has_file) {
        s = extractFileName(attr.file); // Strip directory path
        json.name("f", 1).value(s);
   d691c:	4932      	ldr	r1, [pc, #200]	; (d69e8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d691e:	2201      	movs	r2, #1
   d6920:	a801      	add	r0, sp, #4
   d6922:	f7ff f843 	bl	d59ac <_ZN5spark10JSONWriter4nameEPKcj>
   d6926:	4629      	mov	r1, r5
   d6928:	f7ff f909 	bl	d5b3e <_ZN5spark10JSONWriter5valueEPKc>
    }
    // Line number
    if (attr.has_line) {
   d692c:	7923      	ldrb	r3, [r4, #4]
   d692e:	079d      	lsls	r5, r3, #30
   d6930:	d507      	bpl.n	d6942 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d6932:	492e      	ldr	r1, [pc, #184]	; (d69ec <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d6934:	2202      	movs	r2, #2
   d6936:	a801      	add	r0, sp, #4
   d6938:	f7ff f838 	bl	d59ac <_ZN5spark10JSONWriter4nameEPKcj>
   d693c:	68e1      	ldr	r1, [r4, #12]
   d693e:	f7fe ffbd 	bl	d58bc <_ZN5spark10JSONWriter5valueEi>
    }
    // Function name
    if (attr.has_function) {
   d6942:	7923      	ldrb	r3, [r4, #4]
   d6944:	0758      	lsls	r0, r3, #29
   d6946:	d516      	bpl.n	d6976 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xea>
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d6948:	6925      	ldr	r5, [r4, #16]
   d694a:	462f      	mov	r7, r5
    return s;
}

const char* extractFuncName(const char *s, size_t *size) {
    const char *s1 = s;
    for (; *s; ++s) {
   d694c:	463b      	mov	r3, r7
   d694e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6952:	b13a      	cbz	r2, d6964 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
        if (*s == ' ') {
   d6954:	2a20      	cmp	r2, #32
   d6956:	d101      	bne.n	d695c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d6958:	461d      	mov	r5, r3
   d695a:	e001      	b.n	d6960 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        } else if (*s == '(') {
   d695c:	2a28      	cmp	r2, #40	; 0x28
   d695e:	d001      	beq.n	d6964 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd8>
    }
    write("\r\n", 2);
}

// spark::JSONStreamLogHandler
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d6960:	461f      	mov	r7, r3
   d6962:	e7f3      	b.n	d694c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
    }
    // Function name
    if (attr.has_function) {
        size_t n = 0;
        s = extractFuncName(attr.function, &n); // Strip argument and return types
        json.name("fn", 2).value(s, n);
   d6964:	2202      	movs	r2, #2
   d6966:	4922      	ldr	r1, [pc, #136]	; (d69f0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d6968:	a801      	add	r0, sp, #4
   d696a:	f7ff f81f 	bl	d59ac <_ZN5spark10JSONWriter4nameEPKcj>
   d696e:	1b7a      	subs	r2, r7, r5
   d6970:	4629      	mov	r1, r5
   d6972:	f7ff f82a 	bl	d59ca <_ZN5spark10JSONWriter5valueEPKcj>
    }
    // Timestamp
    if (attr.has_time) {
   d6976:	7923      	ldrb	r3, [r4, #4]
   d6978:	0719      	lsls	r1, r3, #28
   d697a:	d507      	bpl.n	d698c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x100>
        json.name("t", 1).value((unsigned)attr.time);
   d697c:	491d      	ldr	r1, [pc, #116]	; (d69f4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d697e:	2201      	movs	r2, #1
   d6980:	a801      	add	r0, sp, #4
   d6982:	f7ff f813 	bl	d59ac <_ZN5spark10JSONWriter4nameEPKcj>
   d6986:	6961      	ldr	r1, [r4, #20]
   d6988:	f7fe ffaa 	bl	d58e0 <_ZN5spark10JSONWriter5valueEj>
    }
    // Code (additional attribute)
    if (attr.has_code) {
   d698c:	7923      	ldrb	r3, [r4, #4]
   d698e:	06da      	lsls	r2, r3, #27
   d6990:	d508      	bpl.n	d69a4 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x118>
        json.name("code", 4).value((int)attr.code);
   d6992:	2204      	movs	r2, #4
   d6994:	4918      	ldr	r1, [pc, #96]	; (d69f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d6996:	eb0d 0002 	add.w	r0, sp, r2
   d699a:	f7ff f807 	bl	d59ac <_ZN5spark10JSONWriter4nameEPKcj>
   d699e:	69a1      	ldr	r1, [r4, #24]
   d69a0:	f7fe ff8c 	bl	d58bc <_ZN5spark10JSONWriter5valueEi>
    }
    // Details (additional attribute)
    if (attr.has_details) {
   d69a4:	7923      	ldrb	r3, [r4, #4]
   d69a6:	069b      	lsls	r3, r3, #26
   d69a8:	d507      	bpl.n	d69ba <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12e>
        json.name("detail", 6).value(attr.details);
   d69aa:	4914      	ldr	r1, [pc, #80]	; (d69fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d69ac:	2206      	movs	r2, #6
   d69ae:	a801      	add	r0, sp, #4
   d69b0:	f7fe fffc 	bl	d59ac <_ZN5spark10JSONWriter4nameEPKcj>
   d69b4:	69e1      	ldr	r1, [r4, #28]
   d69b6:	f7ff f8c2 	bl	d5b3e <_ZN5spark10JSONWriter5valueEPKc>
    }
    json.endObject();
   d69ba:	a801      	add	r0, sp, #4
   d69bc:	f7fe ff5b 	bl	d5876 <_ZN5spark10JSONWriter9endObjectEv>
   d69c0:	6a30      	ldr	r0, [r6, #32]
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d69c2:	490f      	ldr	r1, [pc, #60]	; (d6a00 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d69c4:	6803      	ldr	r3, [r0, #0]
   d69c6:	2202      	movs	r2, #2
   d69c8:	68db      	ldr	r3, [r3, #12]
   d69ca:	4798      	blx	r3
}
   d69cc:	b005      	add	sp, #20
   d69ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d69d2:	bf00      	nop
   d69d4:	2003e448 	.word	0x2003e448
   d69d8:	000d9dc0 	.word	0x000d9dc0
   d69dc:	000d9df2 	.word	0x000d9df2
   d69e0:	000d9e05 	.word	0x000d9e05
   d69e4:	000da31d 	.word	0x000da31d
   d69e8:	000d9b24 	.word	0x000d9b24
   d69ec:	000d9e8a 	.word	0x000d9e8a
   d69f0:	000d9e8d 	.word	0x000d9e8d
   d69f4:	000da38b 	.word	0x000da38b
   d69f8:	000d9e90 	.word	0x000d9e90
   d69fc:	000d9e95 	.word	0x000d9e95
   d6a00:	000d9e87 	.word	0x000d9e87

000d6a04 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6a04:	2200      	movs	r2, #0
   d6a06:	4611      	mov	r1, r2
   d6a08:	6840      	ldr	r0, [r0, #4]
   d6a0a:	f7fe bc29 	b.w	d5260 <network_listening>

000d6a0e <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6a0e:	2200      	movs	r2, #0
   d6a10:	4611      	mov	r1, r2
   d6a12:	6840      	ldr	r0, [r0, #4]
   d6a14:	f7fe bc34 	b.w	d5280 <network_get_listen_timeout>

000d6a18 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6a18:	2200      	movs	r2, #0
   d6a1a:	6840      	ldr	r0, [r0, #4]
   d6a1c:	f7fe bc28 	b.w	d5270 <network_set_listen_timeout>

000d6a20 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6a20:	2200      	movs	r2, #0
   d6a22:	f081 0101 	eor.w	r1, r1, #1
   d6a26:	6840      	ldr	r0, [r0, #4]
   d6a28:	f7fe bc12 	b.w	d5250 <network_listen>

000d6a2c <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d6a2c:	2300      	movs	r3, #0
   d6a2e:	461a      	mov	r2, r3
   d6a30:	2101      	movs	r1, #1
   d6a32:	6840      	ldr	r0, [r0, #4]
   d6a34:	f7fe bc04 	b.w	d5240 <network_off>

000d6a38 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6a38:	2300      	movs	r3, #0
   d6a3a:	461a      	mov	r2, r3
   d6a3c:	4619      	mov	r1, r3
   d6a3e:	6840      	ldr	r0, [r0, #4]
   d6a40:	f7fe bbf6 	b.w	d5230 <network_on>

000d6a44 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6a44:	2200      	movs	r2, #0
   d6a46:	4611      	mov	r1, r2
   d6a48:	6840      	ldr	r0, [r0, #4]
   d6a4a:	f7fe bbe9 	b.w	d5220 <network_ready>

000d6a4e <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6a4e:	2200      	movs	r2, #0
   d6a50:	4611      	mov	r1, r2
   d6a52:	6840      	ldr	r0, [r0, #4]
   d6a54:	f7fe bbd4 	b.w	d5200 <network_connecting>

000d6a58 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6a58:	2200      	movs	r2, #0
   d6a5a:	2102      	movs	r1, #2
   d6a5c:	6840      	ldr	r0, [r0, #4]
   d6a5e:	f7fe bbd7 	b.w	d5210 <network_disconnect>

000d6a62 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6a62:	2300      	movs	r3, #0
   d6a64:	461a      	mov	r2, r3
   d6a66:	6840      	ldr	r0, [r0, #4]
   d6a68:	f7fe bbc2 	b.w	d51f0 <network_connect>

000d6a6c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6a6c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6a6e:	4605      	mov	r5, r0
   d6a70:	b188      	cbz	r0, d6a96 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6a72:	6804      	ldr	r4, [r0, #0]
   d6a74:	b14c      	cbz	r4, d6a8a <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6a76:	68a3      	ldr	r3, [r4, #8]
   d6a78:	b11b      	cbz	r3, d6a82 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6a7a:	2203      	movs	r2, #3
   d6a7c:	4621      	mov	r1, r4
   d6a7e:	4620      	mov	r0, r4
   d6a80:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6a82:	2110      	movs	r1, #16
   d6a84:	4620      	mov	r0, r4
   d6a86:	f000 fedc 	bl	d7842 <_ZdlPvj>
   d6a8a:	4628      	mov	r0, r5
   d6a8c:	2114      	movs	r1, #20
      }
   d6a8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6a92:	f000 bed6 	b.w	d7842 <_ZdlPvj>
   d6a96:	bd38      	pop	{r3, r4, r5, pc}

000d6a98 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d6a98:	b110      	cbz	r0, d6aa0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d6a9a:	6803      	ldr	r3, [r0, #0]
   d6a9c:	685b      	ldr	r3, [r3, #4]
   d6a9e:	4718      	bx	r3
   d6aa0:	4770      	bx	lr

000d6aa2 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6aa2:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6aa4:	6803      	ldr	r3, [r0, #0]
   d6aa6:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6aa8:	b1bb      	cbz	r3, d6ada <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6aaa:	6858      	ldr	r0, [r3, #4]
   d6aac:	f7fe f972 	bl	d4d94 <os_thread_is_current>
   d6ab0:	b978      	cbnz	r0, d6ad2 <_ZN6ThreadD1Ev+0x30>
   d6ab2:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6ab4:	7c5a      	ldrb	r2, [r3, #17]
   d6ab6:	b912      	cbnz	r2, d6abe <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6ab8:	6858      	ldr	r0, [r3, #4]
   d6aba:	f7fe f973 	bl	d4da4 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6abe:	6823      	ldr	r3, [r4, #0]
   d6ac0:	6858      	ldr	r0, [r3, #4]
   d6ac2:	f7fe f977 	bl	d4db4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6ac6:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6ac8:	2300      	movs	r3, #0
   d6aca:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6acc:	b128      	cbz	r0, d6ada <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6ace:	f7ff ffcd 	bl	d6a6c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6ad2:	6820      	ldr	r0, [r4, #0]
   d6ad4:	b108      	cbz	r0, d6ada <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6ad6:	f7ff ffc9 	bl	d6a6c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d6ada:	4620      	mov	r0, r4
   d6adc:	bd10      	pop	{r4, pc}

000d6ade <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d6ade:	b538      	push	{r3, r4, r5, lr}
   d6ae0:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6ae2:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d6ae6:	b108      	cbz	r0, d6aec <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6ae8:	f7fd fad7 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6aec:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d6af0:	b108      	cbz	r0, d6af6 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d6af2:	f7fe f96f 	bl	d4dd4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6af6:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d6afa:	b135      	cbz	r5, d6b0a <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6afc:	4628      	mov	r0, r5
   d6afe:	f7ff ffd0 	bl	d6aa2 <_ZN6ThreadD1Ev>
   d6b02:	2104      	movs	r1, #4
   d6b04:	4628      	mov	r0, r5
   d6b06:	f000 fe9c 	bl	d7842 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6b0a:	6820      	ldr	r0, [r4, #0]
   d6b0c:	b108      	cbz	r0, d6b12 <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d6b0e:	f7ff ffc3 	bl	d6a98 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d6b12:	4620      	mov	r0, r4
   d6b14:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6b18 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6b18:	b510      	push	{r4, lr}
   d6b1a:	4b04      	ldr	r3, [pc, #16]	; (d6b2c <_ZN5spark9MeshClassD1Ev+0x14>)
   d6b1c:	4604      	mov	r4, r0
   d6b1e:	f840 3b08 	str.w	r3, [r0], #8
   d6b22:	f7ff ffdc 	bl	d6ade <_ZN5spark11MeshPublishD1Ev>
   d6b26:	4620      	mov	r0, r4
   d6b28:	bd10      	pop	{r4, pc}
   d6b2a:	bf00      	nop
   d6b2c:	000d9f14 	.word	0x000d9f14

000d6b30 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d6b30:	b538      	push	{r3, r4, r5, lr}
   d6b32:	4c0e      	ldr	r4, [pc, #56]	; (d6b6c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d6b34:	4b0e      	ldr	r3, [pc, #56]	; (d6b70 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d6b36:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d6b38:	2500      	movs	r5, #0
   d6b3a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d6b3c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d6b40:	6063      	str	r3, [r4, #4]
   d6b42:	60a5      	str	r5, [r4, #8]
   d6b44:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d6b48:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d6b4c:	f7fe f93a 	bl	d4dc4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d6b50:	4b08      	ldr	r3, [pc, #32]	; (d6b74 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d6b52:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d6b56:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d6b5a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d6b5c:	4620      	mov	r0, r4
   d6b5e:	4a06      	ldr	r2, [pc, #24]	; (d6b78 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d6b60:	4906      	ldr	r1, [pc, #24]	; (d6b7c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d6b62:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d6b66:	f000 be67 	b.w	d7838 <__aeabi_atexit>
   d6b6a:	bf00      	nop
   d6b6c:	2003e274 	.word	0x2003e274
   d6b70:	000d9f48 	.word	0x000d9f48
   d6b74:	000d9f14 	.word	0x000d9f14
   d6b78:	2003e1b8 	.word	0x2003e1b8
   d6b7c:	000d6b19 	.word	0x000d6b19

000d6b80 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d6b80:	2300      	movs	r3, #0
   d6b82:	461a      	mov	r2, r3
   d6b84:	6840      	ldr	r0, [r0, #4]
   d6b86:	f7fe bb33 	b.w	d51f0 <network_connect>

000d6b8a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d6b8a:	2200      	movs	r2, #0
   d6b8c:	2102      	movs	r1, #2
   d6b8e:	6840      	ldr	r0, [r0, #4]
   d6b90:	f7fe bb3e 	b.w	d5210 <network_disconnect>

000d6b94 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d6b94:	2200      	movs	r2, #0
   d6b96:	4611      	mov	r1, r2
   d6b98:	6840      	ldr	r0, [r0, #4]
   d6b9a:	f7fe bb31 	b.w	d5200 <network_connecting>

000d6b9e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d6b9e:	2200      	movs	r2, #0
   d6ba0:	4611      	mov	r1, r2
   d6ba2:	6840      	ldr	r0, [r0, #4]
   d6ba4:	f7fe bb3c 	b.w	d5220 <network_ready>

000d6ba8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d6ba8:	2300      	movs	r3, #0
   d6baa:	461a      	mov	r2, r3
   d6bac:	4619      	mov	r1, r3
   d6bae:	6840      	ldr	r0, [r0, #4]
   d6bb0:	f7fe bb3e 	b.w	d5230 <network_on>

000d6bb4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d6bb4:	2300      	movs	r3, #0
   d6bb6:	461a      	mov	r2, r3
   d6bb8:	4619      	mov	r1, r3
   d6bba:	6840      	ldr	r0, [r0, #4]
   d6bbc:	f7fe bb40 	b.w	d5240 <network_off>

000d6bc0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d6bc0:	2200      	movs	r2, #0
   d6bc2:	f081 0101 	eor.w	r1, r1, #1
   d6bc6:	6840      	ldr	r0, [r0, #4]
   d6bc8:	f7fe bb42 	b.w	d5250 <network_listen>

000d6bcc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d6bcc:	2200      	movs	r2, #0
   d6bce:	6840      	ldr	r0, [r0, #4]
   d6bd0:	f7fe bb4e 	b.w	d5270 <network_set_listen_timeout>

000d6bd4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d6bd4:	2200      	movs	r2, #0
   d6bd6:	4611      	mov	r1, r2
   d6bd8:	6840      	ldr	r0, [r0, #4]
   d6bda:	f7fe bb51 	b.w	d5280 <network_get_listen_timeout>

000d6bde <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d6bde:	2200      	movs	r2, #0
   d6be0:	4611      	mov	r1, r2
   d6be2:	6840      	ldr	r0, [r0, #4]
   d6be4:	f7fe bb3c 	b.w	d5260 <network_listening>

000d6be8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d6be8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6bec:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d6bee:	b095      	sub	sp, #84	; 0x54
   d6bf0:	4616      	mov	r6, r2
   d6bf2:	460d      	mov	r5, r1
   d6bf4:	4607      	mov	r7, r0
    IPAddress addr;
   d6bf6:	f7fe fd4d 	bl	d5694 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d6bfa:	4621      	mov	r1, r4
   d6bfc:	2220      	movs	r2, #32
   d6bfe:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d6c00:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d6c02:	f001 fb4d 	bl	d82a0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d6c06:	2340      	movs	r3, #64	; 0x40
   d6c08:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d6c0a:	4621      	mov	r1, r4
   d6c0c:	466b      	mov	r3, sp
   d6c0e:	aa0c      	add	r2, sp, #48	; 0x30
   d6c10:	4630      	mov	r0, r6
   d6c12:	f7fe f9bf 	bl	d4f94 <netdb_getaddrinfo>
    if (!r) {
   d6c16:	4604      	mov	r4, r0
   d6c18:	2800      	cmp	r0, #0
   d6c1a:	d144      	bne.n	d6ca6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c1c:	4602      	mov	r2, r0
   d6c1e:	2101      	movs	r1, #1
   d6c20:	6868      	ldr	r0, [r5, #4]
   d6c22:	f7fe fafd 	bl	d5220 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c26:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d6c28:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c2a:	4622      	mov	r2, r4
   d6c2c:	6868      	ldr	r0, [r5, #4]
   d6c2e:	f7fe faf7 	bl	d5220 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c32:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d6c34:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d6c36:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6c38:	2e00      	cmp	r6, #0
   d6c3a:	d034      	beq.n	d6ca6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d6c3c:	2900      	cmp	r1, #0
   d6c3e:	d132      	bne.n	d6ca6 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d6c40:	6873      	ldr	r3, [r6, #4]
   d6c42:	2b02      	cmp	r3, #2
   d6c44:	d002      	beq.n	d6c4c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d6c46:	2b0a      	cmp	r3, #10
   d6c48:	d009      	beq.n	d6c5e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d6c4a:	e02a      	b.n	d6ca2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d6c4c:	f1b8 0f00 	cmp.w	r8, #0
   d6c50:	d027      	beq.n	d6ca2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d6c52:	6971      	ldr	r1, [r6, #20]
   d6c54:	4638      	mov	r0, r7
   d6c56:	3104      	adds	r1, #4
   d6c58:	f7fe fd49 	bl	d56ee <_ZN9IPAddressaSEPKh>
   d6c5c:	e020      	b.n	d6ca0 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d6c5e:	f1b9 0f00 	cmp.w	r9, #0
   d6c62:	d01e      	beq.n	d6ca2 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d6c64:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d6c66:	2211      	movs	r2, #17
   d6c68:	a801      	add	r0, sp, #4
   d6c6a:	f001 fb19 	bl	d82a0 <memset>
                    a.v = 6;
   d6c6e:	2306      	movs	r3, #6
   d6c70:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d6c74:	ad01      	add	r5, sp, #4
   d6c76:	f104 0308 	add.w	r3, r4, #8
   d6c7a:	3418      	adds	r4, #24
   d6c7c:	6818      	ldr	r0, [r3, #0]
   d6c7e:	6859      	ldr	r1, [r3, #4]
   d6c80:	462a      	mov	r2, r5
   d6c82:	c203      	stmia	r2!, {r0, r1}
   d6c84:	3308      	adds	r3, #8
   d6c86:	42a3      	cmp	r3, r4
   d6c88:	4615      	mov	r5, r2
   d6c8a:	d1f7      	bne.n	d6c7c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d6c8c:	a901      	add	r1, sp, #4
   d6c8e:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6c90:	ad07      	add	r5, sp, #28
   d6c92:	f7fe fd0d 	bl	d56b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d6c96:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6c98:	1d3c      	adds	r4, r7, #4
   d6c9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6c9c:	682b      	ldr	r3, [r5, #0]
   d6c9e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d6ca0:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d6ca2:	69f6      	ldr	r6, [r6, #28]
   d6ca4:	e7c8      	b.n	d6c38 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d6ca6:	9800      	ldr	r0, [sp, #0]
   d6ca8:	f7fe f96c 	bl	d4f84 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d6cac:	4638      	mov	r0, r7
   d6cae:	b015      	add	sp, #84	; 0x54
   d6cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d6cb4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d6cb4:	4b02      	ldr	r3, [pc, #8]	; (d6cc0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d6cb6:	4a03      	ldr	r2, [pc, #12]	; (d6cc4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d6cb8:	601a      	str	r2, [r3, #0]
   d6cba:	2200      	movs	r2, #0
   d6cbc:	605a      	str	r2, [r3, #4]
   d6cbe:	4770      	bx	lr
   d6cc0:	2003e448 	.word	0x2003e448
   d6cc4:	000d9f48 	.word	0x000d9f48

000d6cc8 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
   d6cc8:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6cca:	f000 fd8f 	bl	d77ec <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
   d6cce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
   d6cd2:	f7fe bc92 	b.w	d55fa <_ZN7TwoWire4lockEv>

000d6cd6 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
   d6cd6:	b510      	push	{r4, lr}
   d6cd8:	4604      	mov	r4, r0
    lock_(_lock)
   d6cda:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
   d6cdc:	b109      	cbz	r1, d6ce2 <_ZN4PMICC1Eb+0xc>
        lock();
   d6cde:	f7ff fff3 	bl	d6cc8 <_ZN4PMIC4lockEv>
    }
}
   d6ce2:	4620      	mov	r0, r4
   d6ce4:	bd10      	pop	{r4, pc}

000d6ce6 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
   d6ce6:	b508      	push	{r3, lr}
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6ce8:	f000 fd80 	bl	d77ec <_Z20__fetch_global_Wire1v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
   d6cec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
   d6cf0:	f7fe bc8c 	b.w	d560c <_ZN7TwoWire6unlockEv>

000d6cf4 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d6cf4:	b510      	push	{r4, lr}
{
    if (lock_) {
   d6cf6:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
   d6cf8:	4604      	mov	r4, r0
{
    if (lock_) {
   d6cfa:	b10b      	cbz	r3, d6d00 <_ZN4PMICD1Ev+0xc>
        unlock();
   d6cfc:	f7ff fff3 	bl	d6ce6 <_ZN4PMIC6unlockEv>
    }
}
   d6d00:	4620      	mov	r0, r4
   d6d02:	bd10      	pop	{r4, pc}

000d6d04 <_ZNSt10lock_guardI4PMICED1Ev>:

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d6d04:	b510      	push	{r4, lr}
   d6d06:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d6d08:	6800      	ldr	r0, [r0, #0]
   d6d0a:	f7ff ffec 	bl	d6ce6 <_ZN4PMIC6unlockEv>
   d6d0e:	4620      	mov	r0, r4
   d6d10:	bd10      	pop	{r4, pc}

000d6d12 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
   d6d12:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6d14:	ac02      	add	r4, sp, #8
   d6d16:	460d      	mov	r5, r1
   d6d18:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
   d6d1c:	f7ff ffd4 	bl	d6cc8 <_ZN4PMIC4lockEv>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6d20:	f000 fd64 	bl	d77ec <_Z20__fetch_global_Wire1v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
   d6d24:	216b      	movs	r1, #107	; 0x6b
   d6d26:	f7fe fc5d 	bl	d55e4 <_ZN7TwoWire17beginTransmissionEi>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6d2a:	f000 fd5f 	bl	d77ec <_Z20__fetch_global_Wire1v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
   d6d2e:	6803      	ldr	r3, [r0, #0]
   d6d30:	4629      	mov	r1, r5
   d6d32:	689b      	ldr	r3, [r3, #8]
   d6d34:	4798      	blx	r3
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6d36:	f000 fd59 	bl	d77ec <_Z20__fetch_global_Wire1v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
   d6d3a:	2101      	movs	r1, #1
   d6d3c:	f7fe fc55 	bl	d55ea <_ZN7TwoWire15endTransmissionEh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6d40:	f000 fd54 	bl	d77ec <_Z20__fetch_global_Wire1v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
   d6d44:	2301      	movs	r3, #1
   d6d46:	461a      	mov	r2, r3
   d6d48:	216b      	movs	r1, #107	; 0x6b
   d6d4a:	f7fe fc35 	bl	d55b8 <_ZN7TwoWire11requestFromEhjh>
        default: {
            return &Wire;
        }
#if Wiring_Wire1
        case HAL_I2C_INTERFACE2: {
            return &Wire1;
   d6d4e:	f000 fd4d 	bl	d77ec <_Z20__fetch_global_Wire1v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
   d6d52:	6803      	ldr	r3, [r0, #0]
   d6d54:	695b      	ldr	r3, [r3, #20]
   d6d56:	4798      	blx	r3
   d6d58:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
   d6d5a:	4620      	mov	r0, r4
   d6d5c:	f7ff ffd2 	bl	d6d04 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
   d6d60:	b2e8      	uxtb	r0, r5
   d6d62:	b003      	add	sp, #12
   d6d64:	bd30      	pop	{r4, r5, pc}

000d6d66 <_ZN4PMIC23readInputSourceRegisterEv>:
 * Input          : NONE
 * Return         :
 *******************************************************************************/
byte PMIC::readInputSourceRegister(void) {

    return readRegister(INPUT_SOURCE_REGISTER);
   d6d66:	2100      	movs	r1, #0
   d6d68:	f7ff bfd3 	b.w	d6d12 <_ZN4PMIC12readRegisterEh>

000d6d6c <_ZN4PMIC20getInputCurrentLimitEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputCurrentLimit(void) {
   d6d6c:	b508      	push	{r3, lr}
        1200,
        1500,
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
   d6d6e:	f7ff fffa 	bl	d6d66 <_ZN4PMIC23readInputSourceRegisterEv>
    raw &= 0x07;
    return mapping[raw];
}
   d6d72:	4b03      	ldr	r3, [pc, #12]	; (d6d80 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
    raw &= 0x07;
    return mapping[raw];
   d6d74:	f000 0007 	and.w	r0, r0, #7
}
   d6d78:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   d6d7c:	bd08      	pop	{r3, pc}
   d6d7e:	bf00      	nop
   d6d80:	000d9f74 	.word	0x000d9f74

000d6d84 <_ZN4PMIC21getChargeCurrentValueEv>:
 * Function Name  : getChargeCurrentValue
 * Description    : Returns charge current in mA
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getChargeCurrentValue(void) {
   d6d84:	b508      	push	{r3, lr}
    uint8_t ccr = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
   d6d86:	2102      	movs	r1, #2
   d6d88:	f7ff ffc3 	bl	d6d12 <_ZN4PMIC12readRegisterEh>
    const uint16_t baseValue = 512;
    uint16_t v = (((uint16_t)ccr >> 2) & 0b111111) << 6;
    return baseValue + v;
   d6d8c:	f3c0 0087 	ubfx	r0, r0, #2, #8
   d6d90:	0180      	lsls	r0, r0, #6
}
   d6d92:	f500 7000 	add.w	r0, r0, #512	; 0x200
   d6d96:	bd08      	pop	{r3, pc}

000d6d98 <_ZN4PMIC16getChargeVoltageEv>:
 * Return         :
 *******************************************************************************/

byte PMIC::getChargeVoltage(void) {

    return readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
   d6d98:	2104      	movs	r1, #4
   d6d9a:	f7ff bfba 	b.w	d6d12 <_ZN4PMIC12readRegisterEh>

000d6d9e <_ZN4PMIC21getChargeVoltageValueEv>:
}

uint16_t PMIC::getChargeVoltageValue() {
   d6d9e:	b510      	push	{r4, lr}
    byte raw = getChargeVoltage();
   d6da0:	f7ff fffa 	bl	d6d98 <_ZN4PMIC16getChargeVoltageEv>
   d6da4:	2302      	movs	r3, #2
    unsigned baseVoltage = 16;
    unsigned v = 3504;
   d6da6:	f44f 625b 	mov.w	r2, #3504	; 0xdb0
    return readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
}

uint16_t PMIC::getChargeVoltageValue() {
    byte raw = getChargeVoltage();
    unsigned baseVoltage = 16;
   d6daa:	2110      	movs	r1, #16
    unsigned v = 3504;
    for (unsigned i = 0; i < 6; i++) {
        byte b = (raw >> (i + 2)) & 0x01;
        v += ((unsigned)b) * baseVoltage;
   d6dac:	fa40 f403 	asr.w	r4, r0, r3
   d6db0:	3301      	adds	r3, #1
   d6db2:	f004 0401 	and.w	r4, r4, #1

uint16_t PMIC::getChargeVoltageValue() {
    byte raw = getChargeVoltage();
    unsigned baseVoltage = 16;
    unsigned v = 3504;
    for (unsigned i = 0; i < 6; i++) {
   d6db6:	2b08      	cmp	r3, #8
        byte b = (raw >> (i + 2)) & 0x01;
        v += ((unsigned)b) * baseVoltage;
   d6db8:	fb01 2204 	mla	r2, r1, r4, r2
        baseVoltage *= 2;
   d6dbc:	ea4f 0141 	mov.w	r1, r1, lsl #1

uint16_t PMIC::getChargeVoltageValue() {
    byte raw = getChargeVoltage();
    unsigned baseVoltage = 16;
    unsigned v = 3504;
    for (unsigned i = 0; i < 6; i++) {
   d6dc0:	d1f4      	bne.n	d6dac <_ZN4PMIC21getChargeVoltageValueEv+0xe>
        byte b = (raw >> (i + 2)) & 0x01;
        v += ((unsigned)b) * baseVoltage;
        baseVoltage *= 2;
    }
    return v;
}
   d6dc2:	b290      	uxth	r0, r2
   d6dc4:	bd10      	pop	{r4, pc}

000d6dc6 <_ZN4PMIC21readOpControlRegisterEv>:
 * Input          :
 * Return         :
*******************************************************************************/
byte PMIC::readOpControlRegister(void) {

    return readRegister(MISC_CONTROL_REGISTER);
   d6dc6:	2107      	movs	r1, #7
   d6dc8:	f7ff bfa3 	b.w	d6d12 <_ZN4PMIC12readRegisterEh>

000d6dcc <_ZN4PMIC15getSystemStatusEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getSystemStatus() {

    byte DATA = 0;
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
   d6dcc:	2108      	movs	r1, #8
   d6dce:	f7ff bfa0 	b.w	d6d12 <_ZN4PMIC12readRegisterEh>

000d6dd2 <_ZN4PMIC8getFaultEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getFault() {

    byte DATA = 0;
    DATA = readRegister(FAULT_REGISTER);
   d6dd2:	2109      	movs	r1, #9
   d6dd4:	f7ff bf9d 	b.w	d6d12 <_ZN4PMIC12readRegisterEh>

000d6dd8 <_ZN4PMIC20getInputVoltageLimitEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputVoltageLimit(void) {
   d6dd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d6dda:	ad02      	add	r5, sp, #8
   d6ddc:	4604      	mov	r4, r0
   d6dde:	f845 0d04 	str.w	r0, [r5, #-4]!
      { _M_device.lock(); }
   d6de2:	f7ff ff71 	bl	d6cc8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    uint8_t isr = readRegister(INPUT_SOURCE_REGISTER);
   d6de6:	2100      	movs	r1, #0
   d6de8:	4620      	mov	r0, r4
   d6dea:	f7ff ff92 	bl	d6d12 <_ZN4PMIC12readRegisterEh>
    isr = (isr >> 3) & 0b1111;
   d6dee:	f3c0 04c7 	ubfx	r4, r0, #3, #8
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputVoltageLimit(void) {
    std::lock_guard<PMIC> l(*this);
   d6df2:	4628      	mov	r0, r5
   d6df4:	f7ff ff86 	bl	d6d04 <_ZNSt10lock_guardI4PMICED1Ev>
    uint8_t isr = readRegister(INPUT_SOURCE_REGISTER);
    isr = (isr >> 3) & 0b1111;
    const uint16_t baseValue = 3880;
    return baseValue + isr * 80;
   d6df8:	f004 000f 	and.w	r0, r4, #15
   d6dfc:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   d6e00:	0100      	lsls	r0, r0, #4
   d6e02:	f600 7028 	addw	r0, r0, #3880	; 0xf28
   d6e06:	b280      	uxth	r0, r0
}
   d6e08:	b003      	add	sp, #12
   d6e0a:	bd30      	pop	{r4, r5, pc}

000d6e0c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6e0e:	4606      	mov	r6, r0
   d6e10:	460d      	mov	r5, r1
   d6e12:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d6e14:	2400      	movs	r4, #0
  while (size--) {
   d6e16:	42bd      	cmp	r5, r7
   d6e18:	d00c      	beq.n	d6e34 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6e1a:	6833      	ldr	r3, [r6, #0]
   d6e1c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6e20:	689b      	ldr	r3, [r3, #8]
   d6e22:	4630      	mov	r0, r6
   d6e24:	4798      	blx	r3
     if (chunk>=0)
   d6e26:	2800      	cmp	r0, #0
   d6e28:	db01      	blt.n	d6e2e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6e2a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d6e2c:	e7f3      	b.n	d6e16 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6e2e:	2c00      	cmp	r4, #0
   d6e30:	bf08      	it	eq
   d6e32:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d6e34:	4620      	mov	r0, r4
   d6e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6e38 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6e38:	b570      	push	{r4, r5, r6, lr}
   d6e3a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d6e3c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d6e3e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d6e40:	b149      	cbz	r1, d6e56 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d6e42:	f002 f9e9 	bl	d9218 <strlen>
   d6e46:	682b      	ldr	r3, [r5, #0]
   d6e48:	4602      	mov	r2, r0
   d6e4a:	4621      	mov	r1, r4
   d6e4c:	4628      	mov	r0, r5
   d6e4e:	68db      	ldr	r3, [r3, #12]
    }
   d6e50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6e54:	4718      	bx	r3
    }
   d6e56:	bd70      	pop	{r4, r5, r6, pc}

000d6e58 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d6e58:	6803      	ldr	r3, [r0, #0]
   d6e5a:	689b      	ldr	r3, [r3, #8]
   d6e5c:	4718      	bx	r3

000d6e5e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6e5e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6e60:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6e62:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6e64:	f7ff fff8 	bl	d6e58 <_ZN5Print5printEc>
  n += print('\n');
   d6e68:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d6e6a:	4604      	mov	r4, r0
  n += print('\n');
   d6e6c:	4628      	mov	r0, r5
   d6e6e:	f7ff fff3 	bl	d6e58 <_ZN5Print5printEc>
  return n;
}
   d6e72:	4420      	add	r0, r4
   d6e74:	bd38      	pop	{r3, r4, r5, pc}

000d6e76 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6e76:	b530      	push	{r4, r5, lr}
   d6e78:	b08b      	sub	sp, #44	; 0x2c
   d6e7a:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6e7c:	2100      	movs	r1, #0
   d6e7e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6e82:	2a01      	cmp	r2, #1
   d6e84:	bf98      	it	ls
   d6e86:	220a      	movls	r2, #10
   d6e88:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d6e8c:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d6e90:	fb05 3312 	mls	r3, r5, r2, r3
   d6e94:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6e98:	2b09      	cmp	r3, #9
   d6e9a:	bf94      	ite	ls
   d6e9c:	3330      	addls	r3, #48	; 0x30
   d6e9e:	3337      	addhi	r3, #55	; 0x37
   d6ea0:	b2db      	uxtb	r3, r3
   d6ea2:	4621      	mov	r1, r4
   d6ea4:	f804 3901 	strb.w	r3, [r4], #-1
   d6ea8:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d6eaa:	2d00      	cmp	r5, #0
   d6eac:	d1ee      	bne.n	d6e8c <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d6eae:	f7ff ffc3 	bl	d6e38 <_ZN5Print5writeEPKc>
}
   d6eb2:	b00b      	add	sp, #44	; 0x2c
   d6eb4:	bd30      	pop	{r4, r5, pc}

000d6eb6 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6eb6:	b40c      	push	{r2, r3}
   d6eb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6ebc:	b087      	sub	sp, #28
   d6ebe:	af00      	add	r7, sp, #0
   d6ec0:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d6ec4:	4605      	mov	r5, r0
   d6ec6:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d6eca:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d6ecc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d6ece:	4623      	mov	r3, r4
   d6ed0:	464a      	mov	r2, r9
   d6ed2:	2114      	movs	r1, #20
   d6ed4:	1d38      	adds	r0, r7, #4
   d6ed6:	f7fe fa13 	bl	d5300 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d6eda:	2813      	cmp	r0, #19
   d6edc:	d805      	bhi.n	d6eea <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6ede:	1d39      	adds	r1, r7, #4
   d6ee0:	4628      	mov	r0, r5
   d6ee2:	f7ff ffa9 	bl	d6e38 <_ZN5Print5writeEPKc>
   d6ee6:	4604      	mov	r4, r0
   d6ee8:	e013      	b.n	d6f12 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6eea:	f100 0308 	add.w	r3, r0, #8
   d6eee:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d6ef2:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d6ef4:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d6ef8:	1c41      	adds	r1, r0, #1
   d6efa:	4623      	mov	r3, r4
   d6efc:	464a      	mov	r2, r9
   d6efe:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d6f00:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d6f02:	f7fe f9fd 	bl	d5300 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d6f06:	4669      	mov	r1, sp
   d6f08:	4628      	mov	r0, r5
   d6f0a:	f7ff ff95 	bl	d6e38 <_ZN5Print5writeEPKc>
   d6f0e:	4604      	mov	r4, r0
   d6f10:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d6f12:	b11e      	cbz	r6, d6f1c <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d6f14:	4628      	mov	r0, r5
   d6f16:	f7ff ffa2 	bl	d6e5e <_ZN5Print7printlnEv>
   d6f1a:	4404      	add	r4, r0
    return n;
}
   d6f1c:	4620      	mov	r0, r4
   d6f1e:	371c      	adds	r7, #28
   d6f20:	46bd      	mov	sp, r7
   d6f22:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6f26:	b002      	add	sp, #8
   d6f28:	4770      	bx	lr

000d6f2a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6f2a:	b510      	push	{r4, lr}
   d6f2c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6f2e:	f7fe fa9b 	bl	d5468 <_ZNSt14_Function_baseD1Ev>
   d6f32:	4620      	mov	r0, r4
   d6f34:	bd10      	pop	{r4, pc}
	...

000d6f38 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6f38:	4803      	ldr	r0, [pc, #12]	; (d6f48 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6f3a:	4a04      	ldr	r2, [pc, #16]	; (d6f4c <_GLOBAL__sub_I_RGB+0x14>)
   d6f3c:	4904      	ldr	r1, [pc, #16]	; (d6f50 <_GLOBAL__sub_I_RGB+0x18>)
   d6f3e:	2300      	movs	r3, #0
   d6f40:	6083      	str	r3, [r0, #8]
   d6f42:	f000 bc79 	b.w	d7838 <__aeabi_atexit>
   d6f46:	bf00      	nop
   d6f48:	2003e450 	.word	0x2003e450
   d6f4c:	2003e1b8 	.word	0x2003e1b8
   d6f50:	000d6f2b 	.word	0x000d6f2b

000d6f54 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d6f54:	b510      	push	{r4, lr}
   d6f56:	4604      	mov	r4, r0
{
    _spi = spi;
   d6f58:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d6f5a:	4608      	mov	r0, r1
   d6f5c:	f7fe f822 	bl	d4fa4 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6f60:	2300      	movs	r3, #0
   d6f62:	6063      	str	r3, [r4, #4]
}
   d6f64:	4620      	mov	r0, r4
   d6f66:	bd10      	pop	{r4, pc}

000d6f68 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d6f68:	7800      	ldrb	r0, [r0, #0]
   d6f6a:	f7fe b823 	b.w	d4fb4 <HAL_SPI_Is_Enabled>

000d6f6e <_ZN6StringC1EOS_>:
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d6f6e:	2300      	movs	r3, #0
   d6f70:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d6f72:	6043      	str	r3, [r0, #4]
	len = 0;
   d6f74:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6f76:	7303      	strb	r3, [r0, #12]
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
   d6f78:	b510      	push	{r4, lr}
			return;
		} else {
			free(buffer);
		}
	}
	buffer = rhs.buffer;
   d6f7a:	680c      	ldr	r4, [r1, #0]
   d6f7c:	6004      	str	r4, [r0, #0]
	capacity = rhs.capacity;
   d6f7e:	684c      	ldr	r4, [r1, #4]
   d6f80:	6044      	str	r4, [r0, #4]
	len = rhs.len;
   d6f82:	688c      	ldr	r4, [r1, #8]
   d6f84:	6084      	str	r4, [r0, #8]
	rhs.buffer = NULL;
   d6f86:	600b      	str	r3, [r1, #0]
	rhs.capacity = 0;
   d6f88:	604b      	str	r3, [r1, #4]
	rhs.len = 0;
   d6f8a:	608b      	str	r3, [r1, #8]
#ifdef __GXX_EXPERIMENTAL_CXX0X__
String::String(String &&rval)
{
	init();
	move(rval);
}
   d6f8c:	bd10      	pop	{r4, pc}

000d6f8e <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d6f8e:	b510      	push	{r4, lr}
   d6f90:	4604      	mov	r4, r0
{
	free(buffer);
   d6f92:	6800      	ldr	r0, [r0, #0]
   d6f94:	f7fe f984 	bl	d52a0 <free>
}
   d6f98:	4620      	mov	r0, r4
   d6f9a:	bd10      	pop	{r4, pc}

000d6f9c <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d6f9c:	b510      	push	{r4, lr}
   d6f9e:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6fa0:	6800      	ldr	r0, [r0, #0]
   d6fa2:	b108      	cbz	r0, d6fa8 <_ZN6String10invalidateEv+0xc>
   d6fa4:	f7fe f97c 	bl	d52a0 <free>
	buffer = NULL;
   d6fa8:	2300      	movs	r3, #0
   d6faa:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d6fac:	60a3      	str	r3, [r4, #8]
   d6fae:	6063      	str	r3, [r4, #4]
   d6fb0:	bd10      	pop	{r4, pc}

000d6fb2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6fb2:	b538      	push	{r3, r4, r5, lr}
   d6fb4:	4604      	mov	r4, r0
   d6fb6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6fb8:	6800      	ldr	r0, [r0, #0]
   d6fba:	3101      	adds	r1, #1
   d6fbc:	f7fe f978 	bl	d52b0 <realloc>
	if (newbuffer) {
   d6fc0:	b110      	cbz	r0, d6fc8 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6fc2:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d6fc6:	2001      	movs	r0, #1
	}
	return 0;
}
   d6fc8:	bd38      	pop	{r3, r4, r5, pc}

000d6fca <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6fca:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6fcc:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d6fce:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6fd0:	b113      	cbz	r3, d6fd8 <_ZN6String7reserveEj+0xe>
   d6fd2:	6843      	ldr	r3, [r0, #4]
   d6fd4:	428b      	cmp	r3, r1
   d6fd6:	d207      	bcs.n	d6fe8 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d6fd8:	4620      	mov	r0, r4
   d6fda:	f7ff ffea 	bl	d6fb2 <_ZN6String12changeBufferEj>
   d6fde:	b120      	cbz	r0, d6fea <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d6fe0:	68a3      	ldr	r3, [r4, #8]
   d6fe2:	b90b      	cbnz	r3, d6fe8 <_ZN6String7reserveEj+0x1e>
   d6fe4:	6822      	ldr	r2, [r4, #0]
   d6fe6:	7013      	strb	r3, [r2, #0]
   d6fe8:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d6fea:	bd10      	pop	{r4, pc}

000d6fec <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6fec:	b570      	push	{r4, r5, r6, lr}
   d6fee:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d6ff0:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6ff2:	4604      	mov	r4, r0
   d6ff4:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d6ff6:	f7ff ffe8 	bl	d6fca <_ZN6String7reserveEj>
   d6ffa:	b918      	cbnz	r0, d7004 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d6ffc:	4620      	mov	r0, r4
   d6ffe:	f7ff ffcd 	bl	d6f9c <_ZN6String10invalidateEv>
		return *this;
   d7002:	e009      	b.n	d7018 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7004:	462a      	mov	r2, r5
   d7006:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7008:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d700a:	6820      	ldr	r0, [r4, #0]
   d700c:	f001 f922 	bl	d8254 <memcpy>
	buffer[len] = 0;
   d7010:	6822      	ldr	r2, [r4, #0]
   d7012:	68a3      	ldr	r3, [r4, #8]
   d7014:	2100      	movs	r1, #0
   d7016:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7018:	4620      	mov	r0, r4
   d701a:	bd70      	pop	{r4, r5, r6, pc}

000d701c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d701c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d701e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7020:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7022:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7024:	6043      	str	r3, [r0, #4]
	len = 0;
   d7026:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7028:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d702a:	460d      	mov	r5, r1
   d702c:	b139      	cbz	r1, d703e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d702e:	4608      	mov	r0, r1
   d7030:	f002 f8f2 	bl	d9218 <strlen>
   d7034:	4629      	mov	r1, r5
   d7036:	4602      	mov	r2, r0
   d7038:	4620      	mov	r0, r4
   d703a:	f7ff ffd7 	bl	d6fec <_ZN6String4copyEPKcj>
}
   d703e:	4620      	mov	r0, r4
   d7040:	bd38      	pop	{r3, r4, r5, pc}

000d7042 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d7042:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
   d7044:	b510      	push	{r4, lr}
   d7046:	460b      	mov	r3, r1
   d7048:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d704a:	d007      	beq.n	d705c <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d704c:	6809      	ldr	r1, [r1, #0]
   d704e:	b119      	cbz	r1, d7058 <_ZN6StringaSERKS_+0x16>
   d7050:	689a      	ldr	r2, [r3, #8]
   d7052:	f7ff ffcb 	bl	d6fec <_ZN6String4copyEPKcj>
   d7056:	e001      	b.n	d705c <_ZN6StringaSERKS_+0x1a>
	else invalidate();
   d7058:	f7ff ffa0 	bl	d6f9c <_ZN6String10invalidateEv>

	return *this;
}
   d705c:	4620      	mov	r0, r4
   d705e:	bd10      	pop	{r4, pc}

000d7060 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7060:	b510      	push	{r4, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7062:	2300      	movs	r3, #0
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
   d7064:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7066:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7068:	6043      	str	r3, [r0, #4]
	len = 0;
   d706a:	6083      	str	r3, [r0, #8]
	flags = 0;
   d706c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
   d706e:	f7ff ffe8 	bl	d7042 <_ZN6StringaSERKS_>
}
   d7072:	4620      	mov	r0, r4
   d7074:	bd10      	pop	{r4, pc}

000d7076 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d7076:	b510      	push	{r4, lr}
   d7078:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d707a:	6800      	ldr	r0, [r0, #0]
   d707c:	b118      	cbz	r0, d7086 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d707e:	f7fe f90f 	bl	d52a0 <free>
            wakeupSource_ = nullptr;
   d7082:	2300      	movs	r3, #0
   d7084:	6023      	str	r3, [r4, #0]
   d7086:	bd10      	pop	{r4, pc}

000d7088 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7088:	b510      	push	{r4, lr}
   d708a:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d708c:	f7ff fff3 	bl	d7076 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d7090:	4620      	mov	r0, r4
   d7092:	bd10      	pop	{r4, pc}

000d7094 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d7094:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d7096:	4c09      	ldr	r4, [pc, #36]	; (d70bc <_GLOBAL__sub_I_System+0x28>)
   d7098:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d709a:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d709e:	6020      	str	r0, [r4, #0]
   d70a0:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d70a2:	71a0      	strb	r0, [r4, #6]
   d70a4:	8120      	strh	r0, [r4, #8]
   d70a6:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d70a8:	f7fe f846 	bl	d5138 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d70ac:	4620      	mov	r0, r4
   d70ae:	4a04      	ldr	r2, [pc, #16]	; (d70c0 <_GLOBAL__sub_I_System+0x2c>)
   d70b0:	4904      	ldr	r1, [pc, #16]	; (d70c4 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d70b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d70b6:	f000 bbbf 	b.w	d7838 <__aeabi_atexit>
   d70ba:	bf00      	nop
   d70bc:	2003e460 	.word	0x2003e460
   d70c0:	2003e1b8 	.word	0x2003e1b8
   d70c4:	000d7089 	.word	0x000d7089

000d70c8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d70c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
   d70ca:	4b14      	ldr	r3, [pc, #80]	; (d711c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d70cc:	4f14      	ldr	r7, [pc, #80]	; (d7120 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d70ce:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
   d70d0:	4b14      	ldr	r3, [pc, #80]	; (d7124 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
   d70d2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
   d70d4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
   d70d6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
   d70d8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
   d70da:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
   d70dc:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
   d70de:	d01b      	beq.n	d7118 <_ZL22Refresh_UnixTime_Cachel+0x50>
   d70e0:	a80a      	add	r0, sp, #40	; 0x28
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
   d70e2:	ad01      	add	r5, sp, #4
   d70e4:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
   d70e8:	f000 ffbc 	bl	d8064 <localtime>
	calendar_time->tm_year += 1900;
   d70ec:	6943      	ldr	r3, [r0, #20]
   d70ee:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d70f2:	6143      	str	r3, [r0, #20]
	return *calendar_time;
   d70f4:	4604      	mov	r4, r0
   d70f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d70f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d70fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d70fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d70fe:	f8d4 e000 	ldr.w	lr, [r4]
   d7102:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7106:	ad01      	add	r5, sp, #4
   d7108:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d710a:	4c07      	ldr	r4, [pc, #28]	; (d7128 <_ZL22Refresh_UnixTime_Cachel+0x60>)
   d710c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d710e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
   d7112:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
   d7114:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
   d7118:	b00b      	add	sp, #44	; 0x2c
   d711a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d711c:	2003e49c 	.word	0x2003e49c
   d7120:	2003e498 	.word	0x2003e498
   d7124:	2003e494 	.word	0x2003e494
   d7128:	2003e46c 	.word	0x2003e46c

000d712c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d712c:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d712e:	2000      	movs	r0, #0
   d7130:	f7fe f846 	bl	d51c0 <spark_sync_time_pending>
   d7134:	b128      	cbz	r0, d7142 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7136:	f7fe f83b 	bl	d51b0 <spark_cloud_flag_connected>
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d713a:	f080 0001 	eor.w	r0, r0, #1
   d713e:	b2c0      	uxtb	r0, r0
   d7140:	bd08      	pop	{r3, pc}
   d7142:	2001      	movs	r0, #1
    }
   d7144:	bd08      	pop	{r3, pc}

000d7146 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d7146:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
   d7148:	f7fd fe7c 	bl	d4e44 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d714c:	2200      	movs	r2, #0
   d714e:	4611      	mov	r1, r2
   d7150:	4610      	mov	r0, r2
}
   d7152:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d7156:	f7fe b807 	b.w	d5168 <system_notify_time_changed>
	...

000d715c <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d715c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
   d715e:	4b0e      	ldr	r3, [pc, #56]	; (d7198 <_ZN9TimeClass7timeStrEl+0x3c>)
   d7160:	681b      	ldr	r3, [r3, #0]
   d7162:	4419      	add	r1, r3
   d7164:	4b0d      	ldr	r3, [pc, #52]	; (d719c <_ZN9TimeClass7timeStrEl+0x40>)
   d7166:	681b      	ldr	r3, [r3, #0]
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7168:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
   d716a:	a802      	add	r0, sp, #8
   d716c:	4419      	add	r1, r3
   d716e:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
   d7172:	f000 ff77 	bl	d8064 <localtime>
        char* ascstr = asctime(calendar_time);
   d7176:	f000 fe81 	bl	d7e7c <asctime>
   d717a:	4605      	mov	r5, r0
        int len = strlen(ascstr);
   d717c:	f002 f84c 	bl	d9218 <strlen>
        ascstr[len-1] = 0; // remove final newline
   d7180:	4428      	add	r0, r5
   d7182:	2300      	movs	r3, #0
   d7184:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
   d7188:	4629      	mov	r1, r5
   d718a:	4620      	mov	r0, r4
   d718c:	f7ff ff46 	bl	d701c <_ZN6StringC1EPK19__FlashStringHelper>
}
   d7190:	4620      	mov	r0, r4
   d7192:	b003      	add	sp, #12
   d7194:	bd30      	pop	{r4, r5, pc}
   d7196:	bf00      	nop
   d7198:	2003e49c 	.word	0x2003e49c
   d719c:	2003e494 	.word	0x2003e494

000d71a0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d71a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d71a4:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d71a6:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d71a8:	4607      	mov	r7, r0
   d71aa:	4689      	mov	r9, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d71ac:	4620      	mov	r0, r4
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d71ae:	4611      	mov	r1, r2
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d71b0:	223f      	movs	r2, #63	; 0x3f
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d71b2:	461d      	mov	r5, r3
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d71b4:	f002 f84d 	bl	d9252 <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d71b8:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d71ba:	4620      	mov	r0, r4
String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d71bc:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d71c0:	f002 f82a 	bl	d9218 <strlen>
   d71c4:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d71c6:	b925      	cbnz	r5, d71d2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        strcpy(time_zone_str, "Z");
   d71c8:	4924      	ldr	r1, [pc, #144]	; (d725c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xbc>)
   d71ca:	a803      	add	r0, sp, #12
   d71cc:	f001 fb08 	bl	d87e0 <strcpy>
   d71d0:	e013      	b.n	d71fa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5a>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d71d2:	213c      	movs	r1, #60	; 0x3c
   d71d4:	fb95 f2f1 	sdiv	r2, r5, r1
   d71d8:	2a00      	cmp	r2, #0
   d71da:	bfb8      	it	lt
   d71dc:	4252      	neglt	r2, r2
   d71de:	fb92 f3f1 	sdiv	r3, r2, r1
   d71e2:	fb01 2213 	mls	r2, r1, r3, r2
   d71e6:	9200      	str	r2, [sp, #0]
   d71e8:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d71ec:	4a1c      	ldr	r2, [pc, #112]	; (d7260 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xc0>)
   d71ee:	fb95 f3f3 	sdiv	r3, r5, r3
   d71f2:	2110      	movs	r1, #16
   d71f4:	a803      	add	r0, sp, #12
   d71f6:	f7fe f873 	bl	d52e0 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d71fa:	4625      	mov	r5, r4
   d71fc:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d71fe:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
   d7202:	45b2      	cmp	sl, r6
   d7204:	d91b      	bls.n	d723e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9e>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d7206:	782b      	ldrb	r3, [r5, #0]
   d7208:	2b25      	cmp	r3, #37	; 0x25
   d720a:	d116      	bne.n	d723a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
   d720c:	786b      	ldrb	r3, [r5, #1]
   d720e:	2b7a      	cmp	r3, #122	; 0x7a
   d7210:	d113      	bne.n	d723a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x9a>
        {
            size_t tzlen = strlen(time_zone_str);
   d7212:	a803      	add	r0, sp, #12
   d7214:	f002 f800 	bl	d9218 <strlen>
   d7218:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d721a:	4430      	add	r0, r6
   d721c:	ebc6 020a 	rsb	r2, r6, sl
   d7220:	1ca9      	adds	r1, r5, #2
   d7222:	4420      	add	r0, r4
   d7224:	f001 f816 	bl	d8254 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d7228:	4642      	mov	r2, r8
   d722a:	a903      	add	r1, sp, #12
   d722c:	4628      	mov	r0, r5
   d722e:	f001 f811 	bl	d8254 <memcpy>
            len = strlen(format_str);
   d7232:	4620      	mov	r0, r4
   d7234:	f001 fff0 	bl	d9218 <strlen>
   d7238:	4680      	mov	r8, r0
   d723a:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d723c:	e7de      	b.n	d71fc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x5c>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
   d723e:	464b      	mov	r3, r9
   d7240:	4622      	mov	r2, r4
   d7242:	2132      	movs	r1, #50	; 0x32
   d7244:	a807      	add	r0, sp, #28
   d7246:	f001 fb33 	bl	d88b0 <strftime>
    return String(buf);
   d724a:	a907      	add	r1, sp, #28
   d724c:	4638      	mov	r0, r7
   d724e:	f7ff fee5 	bl	d701c <_ZN6StringC1EPK19__FlashStringHelper>
}
   d7252:	4638      	mov	r0, r7
   d7254:	b024      	add	sp, #144	; 0x90
   d7256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d725a:	bf00      	nop
   d725c:	000da515 	.word	0x000da515
   d7260:	000d9f84 	.word	0x000d9f84

000d7264 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
   d7264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7266:	4605      	mov	r5, r0
   d7268:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
   d726a:	461c      	mov	r4, r3
   d726c:	b913      	cbnz	r3, d7274 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
   d726e:	4b12      	ldr	r3, [pc, #72]	; (d72b8 <_ZN9TimeClass6formatElPKc+0x54>)
   d7270:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
   d7272:	b12c      	cbz	r4, d7280 <_ZN9TimeClass6formatElPKc+0x1c>
   d7274:	4b11      	ldr	r3, [pc, #68]	; (d72bc <_ZN9TimeClass6formatElPKc+0x58>)
   d7276:	4620      	mov	r0, r4
   d7278:	6819      	ldr	r1, [r3, #0]
   d727a:	f001 faa7 	bl	d87cc <strcmp>
   d727e:	b920      	cbnz	r0, d728a <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
   d7280:	9901      	ldr	r1, [sp, #4]
   d7282:	4628      	mov	r0, r5
   d7284:	f7ff ff6a 	bl	d715c <_ZN9TimeClass7timeStrEl>
   d7288:	e013      	b.n	d72b2 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
   d728a:	4f0d      	ldr	r7, [pc, #52]	; (d72c0 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
   d728c:	9a01      	ldr	r2, [sp, #4]
   d728e:	683b      	ldr	r3, [r7, #0]
   d7290:	4e0c      	ldr	r6, [pc, #48]	; (d72c4 <_ZN9TimeClass6formatElPKc+0x60>)
   d7292:	441a      	add	r2, r3
   d7294:	6833      	ldr	r3, [r6, #0]
   d7296:	a802      	add	r0, sp, #8
   d7298:	4413      	add	r3, r2
   d729a:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
   d729e:	f000 fee1 	bl	d8064 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d72a2:	683a      	ldr	r2, [r7, #0]
   d72a4:	6833      	ldr	r3, [r6, #0]
   d72a6:	4601      	mov	r1, r0
   d72a8:	4413      	add	r3, r2
   d72aa:	4628      	mov	r0, r5
   d72ac:	4622      	mov	r2, r4
   d72ae:	f7ff ff77 	bl	d71a0 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
   d72b2:	4628      	mov	r0, r5
   d72b4:	b003      	add	sp, #12
   d72b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d72b8:	2003e490 	.word	0x2003e490
   d72bc:	2003e100 	.word	0x2003e100
   d72c0:	2003e49c 	.word	0x2003e49c
   d72c4:	2003e494 	.word	0x2003e494

000d72c8 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d72c8:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
   d72ca:	2000      	movs	r0, #0
   d72cc:	f7fd fdc2 	bl	d4e54 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
   d72d0:	4604      	mov	r4, r0
   d72d2:	b968      	cbnz	r0, d72f0 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d72d4:	f7fd ff28 	bl	d5128 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d72d8:	2801      	cmp	r0, #1
   d72da:	d10b      	bne.n	d72f4 <_ZN9TimeClass7isValidEv+0x2c>
   d72dc:	4620      	mov	r0, r4
   d72de:	f7fd ff3b 	bl	d5158 <system_thread_get_state>
   d72e2:	b938      	cbnz	r0, d72f4 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
   d72e4:	f7ff ff22 	bl	d712c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d72e8:	b930      	cbnz	r0, d72f8 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
   d72ea:	f7fd ff59 	bl	d51a0 <spark_process>
   d72ee:	e7f9      	b.n	d72e4 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
   d72f0:	2001      	movs	r0, #1
   d72f2:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
   d72f4:	2000      	movs	r0, #0
   d72f6:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
   d72f8:	f7ff ff18 	bl	d712c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
   d72fc:	2000      	movs	r0, #0
   d72fe:	f7fd fda9 	bl	d4e54 <HAL_RTC_Time_Is_Valid>
   d7302:	3000      	adds	r0, #0
   d7304:	bf18      	it	ne
   d7306:	2001      	movne	r0, #1
    }
    return rtcstate;
}
   d7308:	bd10      	pop	{r4, pc}

000d730a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
   d730a:	b508      	push	{r3, lr}
    (void)isValid();
   d730c:	f7ff ffdc 	bl	d72c8 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
   d7310:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
   d7314:	f7fd bd8e 	b.w	d4e34 <HAL_RTC_Get_UnixTime>

000d7318 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
   d7318:	b508      	push	{r3, lr}
	return year(now());
   d731a:	f7ff fff6 	bl	d730a <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
   d731e:	f7ff fed3 	bl	d70c8 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
   d7322:	4b01      	ldr	r3, [pc, #4]	; (d7328 <_ZN9TimeClass4yearEv+0x10>)
   d7324:	6958      	ldr	r0, [r3, #20]
   d7326:	bd08      	pop	{r3, pc}
   d7328:	2003e46c 	.word	0x2003e46c

000d732c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d732c:	4b02      	ldr	r3, [pc, #8]	; (d7338 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d732e:	681a      	ldr	r2, [r3, #0]
   d7330:	4b02      	ldr	r3, [pc, #8]	; (d733c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7332:	601a      	str	r2, [r3, #0]
   d7334:	4770      	bx	lr
   d7336:	bf00      	nop
   d7338:	2003e100 	.word	0x2003e100
   d733c:	2003e490 	.word	0x2003e490

000d7340 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d7340:	4770      	bx	lr

000d7342 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7342:	7441      	strb	r1, [r0, #17]
   d7344:	4770      	bx	lr

000d7346 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d7346:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d7348:	7c00      	ldrb	r0, [r0, #16]
   d734a:	f7fd fe7b 	bl	d5044 <HAL_USART_Available_Data_For_Write>
}
   d734e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7352:	bd08      	pop	{r3, pc}

000d7354 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7354:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d7356:	7c00      	ldrb	r0, [r0, #16]
   d7358:	f7fd fe4c 	bl	d4ff4 <HAL_USART_Available_Data>
}
   d735c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7360:	bd08      	pop	{r3, pc}

000d7362 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7362:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d7364:	7c00      	ldrb	r0, [r0, #16]
   d7366:	f7fd fe55 	bl	d5014 <HAL_USART_Peek_Data>
}
   d736a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d736e:	bf28      	it	cs
   d7370:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7374:	bd08      	pop	{r3, pc}

000d7376 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7376:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d7378:	7c00      	ldrb	r0, [r0, #16]
   d737a:	f7fd fe43 	bl	d5004 <HAL_USART_Read_Data>
}
   d737e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7382:	bf28      	it	cs
   d7384:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7388:	bd08      	pop	{r3, pc}

000d738a <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d738a:	7c00      	ldrb	r0, [r0, #16]
   d738c:	f7fd be4a 	b.w	d5024 <HAL_USART_Flush_Data>

000d7390 <_ZN11USARTSerialD0Ev>:
   d7390:	b510      	push	{r4, lr}
   d7392:	2114      	movs	r1, #20
   d7394:	4604      	mov	r4, r0
   d7396:	f000 fa54 	bl	d7842 <_ZdlPvj>
   d739a:	4620      	mov	r0, r4
   d739c:	bd10      	pop	{r4, pc}

000d739e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d739e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d73a0:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d73a2:	4604      	mov	r4, r0
   d73a4:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d73a6:	b925      	cbnz	r5, d73b2 <_ZN11USARTSerial5writeEh+0x14>
   d73a8:	7c00      	ldrb	r0, [r0, #16]
   d73aa:	f7fd fe4b 	bl	d5044 <HAL_USART_Available_Data_For_Write>
   d73ae:	2800      	cmp	r0, #0
   d73b0:	dd05      	ble.n	d73be <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d73b2:	4631      	mov	r1, r6
   d73b4:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d73b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d73ba:	f7fd be13 	b.w	d4fe4 <HAL_USART_Write_Data>
  }
  return 0;
}
   d73be:	4628      	mov	r0, r5
   d73c0:	bd70      	pop	{r4, r5, r6, pc}
	...

000d73c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d73c4:	b510      	push	{r4, lr}
   d73c6:	4604      	mov	r4, r0
   d73c8:	4608      	mov	r0, r1
   d73ca:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d73cc:	2200      	movs	r2, #0
   d73ce:	6062      	str	r2, [r4, #4]
   d73d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d73d4:	60a2      	str	r2, [r4, #8]
   d73d6:	4a05      	ldr	r2, [pc, #20]	; (d73ec <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d73d8:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d73da:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d73dc:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d73de:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d73e0:	461a      	mov	r2, r3
   d73e2:	f7fd fdef 	bl	d4fc4 <HAL_USART_Init>
}
   d73e6:	4620      	mov	r0, r4
   d73e8:	bd10      	pop	{r4, pc}
   d73ea:	bf00      	nop
   d73ec:	000d9fb4 	.word	0x000d9fb4

000d73f0 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
   d73f0:	2300      	movs	r3, #0
   d73f2:	7c00      	ldrb	r0, [r0, #16]
   d73f4:	f7fd be2e 	b.w	d5054 <HAL_USART_BeginConfig>

000d73f8 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
   d73f8:	2200      	movs	r2, #0
   d73fa:	f7ff bff9 	b.w	d73f0 <_ZN11USARTSerial5beginEmm>

000d73fe <_ZN11USARTSerial3endEv>:
  HAL_USART_BeginConfig(_serial, baud, config, 0);
}

void USARTSerial::end()
{
  HAL_USART_End(_serial);
   d73fe:	7c00      	ldrb	r0, [r0, #16]
   d7400:	f7fd bde8 	b.w	d4fd4 <HAL_USART_End>

000d7404 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d7404:	7c00      	ldrb	r0, [r0, #16]
   d7406:	f7fd be15 	b.w	d5034 <HAL_USART_Is_Enabled>
	...

000d740c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d740c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d740e:	4d0c      	ldr	r5, [pc, #48]	; (d7440 <_Z22__fetch_global_Serial1v+0x34>)
   d7410:	6829      	ldr	r1, [r5, #0]
   d7412:	f011 0401 	ands.w	r4, r1, #1
   d7416:	d111      	bne.n	d743c <_Z22__fetch_global_Serial1v+0x30>
   d7418:	4628      	mov	r0, r5
   d741a:	f7fc fe4b 	bl	d40b4 <__cxa_guard_acquire>
   d741e:	b168      	cbz	r0, d743c <_Z22__fetch_global_Serial1v+0x30>
   d7420:	4a08      	ldr	r2, [pc, #32]	; (d7444 <_Z22__fetch_global_Serial1v+0x38>)
   d7422:	4b09      	ldr	r3, [pc, #36]	; (d7448 <_Z22__fetch_global_Serial1v+0x3c>)
   d7424:	4809      	ldr	r0, [pc, #36]	; (d744c <_Z22__fetch_global_Serial1v+0x40>)
   d7426:	4621      	mov	r1, r4
   d7428:	f7ff ffcc 	bl	d73c4 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d742c:	4628      	mov	r0, r5
   d742e:	f7fc fe46 	bl	d40be <__cxa_guard_release>
   d7432:	4a07      	ldr	r2, [pc, #28]	; (d7450 <_Z22__fetch_global_Serial1v+0x44>)
   d7434:	4907      	ldr	r1, [pc, #28]	; (d7454 <_Z22__fetch_global_Serial1v+0x48>)
   d7436:	4805      	ldr	r0, [pc, #20]	; (d744c <_Z22__fetch_global_Serial1v+0x40>)
   d7438:	f000 f9fe 	bl	d7838 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d743c:	4803      	ldr	r0, [pc, #12]	; (d744c <_Z22__fetch_global_Serial1v+0x40>)
   d743e:	bd38      	pop	{r3, r4, r5, pc}
   d7440:	2003e53c 	.word	0x2003e53c
   d7444:	2003e540 	.word	0x2003e540
   d7448:	2003e4b8 	.word	0x2003e4b8
   d744c:	2003e4a4 	.word	0x2003e4a4
   d7450:	2003e1b8 	.word	0x2003e1b8
   d7454:	000d7341 	.word	0x000d7341

000d7458 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7458:	7441      	strb	r1, [r0, #17]
   d745a:	4770      	bx	lr

000d745c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d745c:	4770      	bx	lr

000d745e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d745e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7460:	2100      	movs	r1, #0
   d7462:	7c00      	ldrb	r0, [r0, #16]
   d7464:	f7fd fe1e 	bl	d50a4 <HAL_USB_USART_Receive_Data>
}
   d7468:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d746c:	bf28      	it	cs
   d746e:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7472:	bd08      	pop	{r3, pc}

000d7474 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d7474:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7476:	2101      	movs	r1, #1
   d7478:	7c00      	ldrb	r0, [r0, #16]
   d747a:	f7fd fe13 	bl	d50a4 <HAL_USB_USART_Receive_Data>
}
   d747e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d7482:	bf28      	it	cs
   d7484:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d7488:	bd08      	pop	{r3, pc}

000d748a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d748a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d748c:	7c00      	ldrb	r0, [r0, #16]
   d748e:	f7fd fe01 	bl	d5094 <HAL_USB_USART_Available_Data_For_Write>
}
   d7492:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7496:	bd08      	pop	{r3, pc}

000d7498 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d7498:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d749a:	7c00      	ldrb	r0, [r0, #16]
   d749c:	f7fd fdf2 	bl	d5084 <HAL_USB_USART_Available_Data>
}
   d74a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d74a4:	bd08      	pop	{r3, pc}

000d74a6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d74a6:	7c00      	ldrb	r0, [r0, #16]
   d74a8:	f7fd be0c 	b.w	d50c4 <HAL_USB_USART_Flush_Data>

000d74ac <_ZN9USBSerialD0Ev>:
   d74ac:	b510      	push	{r4, lr}
   d74ae:	2114      	movs	r1, #20
   d74b0:	4604      	mov	r4, r0
   d74b2:	f000 f9c6 	bl	d7842 <_ZdlPvj>
   d74b6:	4620      	mov	r0, r4
   d74b8:	bd10      	pop	{r4, pc}

000d74ba <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d74ba:	b538      	push	{r3, r4, r5, lr}
   d74bc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d74be:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d74c0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d74c2:	f7fd fde7 	bl	d5094 <HAL_USB_USART_Available_Data_For_Write>
   d74c6:	2800      	cmp	r0, #0
   d74c8:	dc01      	bgt.n	d74ce <_ZN9USBSerial5writeEh+0x14>
   d74ca:	7c60      	ldrb	r0, [r4, #17]
   d74cc:	b128      	cbz	r0, d74da <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d74ce:	4629      	mov	r1, r5
   d74d0:	7c20      	ldrb	r0, [r4, #16]
   d74d2:	f7fd fdef 	bl	d50b4 <HAL_USB_USART_Send_Data>
   d74d6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d74da:	bd38      	pop	{r3, r4, r5, pc}

000d74dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d74dc:	b510      	push	{r4, lr}
   d74de:	4604      	mov	r4, r0
   d74e0:	2300      	movs	r3, #0
   d74e2:	6063      	str	r3, [r4, #4]
   d74e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d74e8:	60a3      	str	r3, [r4, #8]
   d74ea:	4b05      	ldr	r3, [pc, #20]	; (d7500 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d74ec:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d74ee:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d74f0:	4608      	mov	r0, r1
{
  _serial = serial;
   d74f2:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d74f4:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d74f6:	4611      	mov	r1, r2
   d74f8:	f7fd fdb4 	bl	d5064 <HAL_USB_USART_Init>
}
   d74fc:	4620      	mov	r0, r4
   d74fe:	bd10      	pop	{r4, pc}
   d7500:	000d9fe4 	.word	0x000d9fe4

000d7504 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7504:	2200      	movs	r2, #0
   d7506:	7c00      	ldrb	r0, [r0, #16]
   d7508:	f7fd bdb4 	b.w	d5074 <HAL_USB_USART_Begin>

000d750c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d750c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d750e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7510:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7512:	2100      	movs	r1, #0
   d7514:	f000 fec4 	bl	d82a0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7518:	4620      	mov	r0, r4
   d751a:	bd10      	pop	{r4, pc}

000d751c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d751c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d751e:	4d0e      	ldr	r5, [pc, #56]	; (d7558 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d7520:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7522:	a801      	add	r0, sp, #4
   d7524:	f7ff fff2 	bl	d750c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7528:	6829      	ldr	r1, [r5, #0]
   d752a:	f011 0401 	ands.w	r4, r1, #1
   d752e:	d110      	bne.n	d7552 <_Z16_fetch_usbserialv+0x36>
   d7530:	4628      	mov	r0, r5
   d7532:	f7fc fdbf 	bl	d40b4 <__cxa_guard_acquire>
   d7536:	b160      	cbz	r0, d7552 <_Z16_fetch_usbserialv+0x36>
   d7538:	aa01      	add	r2, sp, #4
   d753a:	4621      	mov	r1, r4
   d753c:	4807      	ldr	r0, [pc, #28]	; (d755c <_Z16_fetch_usbserialv+0x40>)
   d753e:	f7ff ffcd 	bl	d74dc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7542:	4628      	mov	r0, r5
   d7544:	f7fc fdbb 	bl	d40be <__cxa_guard_release>
   d7548:	4a05      	ldr	r2, [pc, #20]	; (d7560 <_Z16_fetch_usbserialv+0x44>)
   d754a:	4906      	ldr	r1, [pc, #24]	; (d7564 <_Z16_fetch_usbserialv+0x48>)
   d754c:	4803      	ldr	r0, [pc, #12]	; (d755c <_Z16_fetch_usbserialv+0x40>)
   d754e:	f000 f973 	bl	d7838 <__aeabi_atexit>
	return _usbserial;
}
   d7552:	4802      	ldr	r0, [pc, #8]	; (d755c <_Z16_fetch_usbserialv+0x40>)
   d7554:	b007      	add	sp, #28
   d7556:	bd30      	pop	{r4, r5, pc}
   d7558:	2003e5c4 	.word	0x2003e5c4
   d755c:	2003e5c8 	.word	0x2003e5c8
   d7560:	2003e1b8 	.word	0x2003e1b8
   d7564:	000d745d 	.word	0x000d745d

000d7568 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d7568:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d756a:	4b0c      	ldr	r3, [pc, #48]	; (d759c <serialEventRun+0x34>)
   d756c:	b133      	cbz	r3, d757c <serialEventRun+0x14>
   d756e:	f7ff ffd5 	bl	d751c <_Z16_fetch_usbserialv>
   d7572:	6803      	ldr	r3, [r0, #0]
   d7574:	691b      	ldr	r3, [r3, #16]
   d7576:	4798      	blx	r3
   d7578:	2800      	cmp	r0, #0
   d757a:	dc09      	bgt.n	d7590 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d757c:	4b08      	ldr	r3, [pc, #32]	; (d75a0 <serialEventRun+0x38>)
   d757e:	b163      	cbz	r3, d759a <serialEventRun+0x32>
   d7580:	f7ff ff44 	bl	d740c <_Z22__fetch_global_Serial1v>
   d7584:	6803      	ldr	r3, [r0, #0]
   d7586:	691b      	ldr	r3, [r3, #16]
   d7588:	4798      	blx	r3
   d758a:	2800      	cmp	r0, #0
   d758c:	dc03      	bgt.n	d7596 <serialEventRun+0x2e>
   d758e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d7590:	f3af 8000 	nop.w
   d7594:	e7f2      	b.n	d757c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d7596:	f3af 8000 	nop.w
   d759a:	bd08      	pop	{r3, pc}
	...

000d75a4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d75a4:	b508      	push	{r3, lr}
	serialEventRun();
   d75a6:	f7ff ffdf 	bl	d7568 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d75aa:	f7fd fc3b 	bl	d4e24 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d75ae:	4b01      	ldr	r3, [pc, #4]	; (d75b4 <_post_loop+0x10>)
   d75b0:	6018      	str	r0, [r3, #0]
   d75b2:	bd08      	pop	{r3, pc}
   d75b4:	2003e5f0 	.word	0x2003e5f0

000d75b8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d75b8:	4802      	ldr	r0, [pc, #8]	; (d75c4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d75ba:	4a03      	ldr	r2, [pc, #12]	; (d75c8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d75bc:	4903      	ldr	r1, [pc, #12]	; (d75cc <_Z33system_initialize_user_backup_ramv+0x14>)
   d75be:	1a12      	subs	r2, r2, r0
   d75c0:	f000 be48 	b.w	d8254 <memcpy>
   d75c4:	2003f400 	.word	0x2003f400
   d75c8:	2003f404 	.word	0x2003f404
   d75cc:	000da590 	.word	0x000da590

000d75d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d75d0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d75d2:	2300      	movs	r3, #0
   d75d4:	9300      	str	r3, [sp, #0]
   d75d6:	461a      	mov	r2, r3
   d75d8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d75dc:	f7fd fdd6 	bl	d518c <system_ctrl_set_result>
}
   d75e0:	b003      	add	sp, #12
   d75e2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d75e8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d75e8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d75ea:	8843      	ldrh	r3, [r0, #2]
   d75ec:	2b0a      	cmp	r3, #10
   d75ee:	d008      	beq.n	d7602 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d75f0:	2b50      	cmp	r3, #80	; 0x50
   d75f2:	d109      	bne.n	d7608 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d75f4:	4b09      	ldr	r3, [pc, #36]	; (d761c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d75f6:	681b      	ldr	r3, [r3, #0]
   d75f8:	b13b      	cbz	r3, d760a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d75fa:	b003      	add	sp, #12
   d75fc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d7600:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d7602:	f7ff ffe5 	bl	d75d0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d7606:	e006      	b.n	d7616 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7608:	2300      	movs	r3, #0
   d760a:	9300      	str	r3, [sp, #0]
   d760c:	461a      	mov	r2, r3
   d760e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7612:	f7fd fdbb 	bl	d518c <system_ctrl_set_result>
        break;
    }
}
   d7616:	b003      	add	sp, #12
   d7618:	f85d fb04 	ldr.w	pc, [sp], #4
   d761c:	2003e5dc 	.word	0x2003e5dc

000d7620 <module_user_init_hook>:

void module_user_init_hook()
{
   d7620:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d7622:	4c10      	ldr	r4, [pc, #64]	; (d7664 <module_user_init_hook+0x44>)
   d7624:	4d10      	ldr	r5, [pc, #64]	; (d7668 <module_user_init_hook+0x48>)
   d7626:	6823      	ldr	r3, [r4, #0]
   d7628:	42ab      	cmp	r3, r5
   d762a:	4b10      	ldr	r3, [pc, #64]	; (d766c <module_user_init_hook+0x4c>)
   d762c:	bf0c      	ite	eq
   d762e:	2201      	moveq	r2, #1
   d7630:	2200      	movne	r2, #0
   d7632:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7634:	d002      	beq.n	d763c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d7636:	f7ff ffbf 	bl	d75b8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d763a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d763c:	f7fd fbe2 	bl	d4e04 <HAL_RNG_GetRandomNumber>
   d7640:	4604      	mov	r4, r0
    srand(seed);
   d7642:	f001 f883 	bl	d874c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7646:	4b0a      	ldr	r3, [pc, #40]	; (d7670 <module_user_init_hook+0x50>)
   d7648:	b113      	cbz	r3, d7650 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d764a:	4620      	mov	r0, r4
   d764c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7650:	2100      	movs	r1, #0
   d7652:	4807      	ldr	r0, [pc, #28]	; (d7670 <module_user_init_hook+0x50>)
   d7654:	f7fd fdc4 	bl	d51e0 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7658:	2100      	movs	r1, #0
   d765a:	4806      	ldr	r0, [pc, #24]	; (d7674 <module_user_init_hook+0x54>)
}
   d765c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7660:	f7fd bd8a 	b.w	d5178 <system_ctrl_set_app_request_handler>
   d7664:	2003f400 	.word	0x2003f400
   d7668:	9a271c1e 	.word	0x9a271c1e
   d766c:	2003e5e0 	.word	0x2003e5e0
   d7670:	00000000 	.word	0x00000000
   d7674:	000d75e9 	.word	0x000d75e9

000d7678 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d7678:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d767a:	4e18      	ldr	r6, [pc, #96]	; (d76dc <pinAvailable+0x64>)
   d767c:	6831      	ldr	r1, [r6, #0]
   d767e:	f011 0501 	ands.w	r5, r1, #1
   d7682:	4604      	mov	r4, r0
   d7684:	d10a      	bne.n	d769c <pinAvailable+0x24>
   d7686:	4630      	mov	r0, r6
   d7688:	f7fc fd14 	bl	d40b4 <__cxa_guard_acquire>
   d768c:	b130      	cbz	r0, d769c <pinAvailable+0x24>
   d768e:	4629      	mov	r1, r5
   d7690:	4813      	ldr	r0, [pc, #76]	; (d76e0 <pinAvailable+0x68>)
   d7692:	f7ff fc5f 	bl	d6f54 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d7696:	4630      	mov	r0, r6
   d7698:	f7fc fd11 	bl	d40be <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d769c:	4810      	ldr	r0, [pc, #64]	; (d76e0 <pinAvailable+0x68>)
   d769e:	f7ff fc63 	bl	d6f68 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d76a2:	b128      	cbz	r0, d76b0 <pinAvailable+0x38>
   d76a4:	f1a4 030b 	sub.w	r3, r4, #11
   d76a8:	2b02      	cmp	r3, #2
   d76aa:	d801      	bhi.n	d76b0 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d76ac:	2000      	movs	r0, #0
   d76ae:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d76b0:	f000 f876 	bl	d77a0 <_Z19__fetch_global_Wirev>
   d76b4:	f7fd ff9d 	bl	d55f2 <_ZN7TwoWire9isEnabledEv>
   d76b8:	b108      	cbz	r0, d76be <pinAvailable+0x46>
   d76ba:	2c01      	cmp	r4, #1
   d76bc:	d9f6      	bls.n	d76ac <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d76be:	f7ff fea5 	bl	d740c <_Z22__fetch_global_Serial1v>
   d76c2:	f7ff fe9f 	bl	d7404 <_ZN11USARTSerial9isEnabledEv>
   d76c6:	b118      	cbz	r0, d76d0 <pinAvailable+0x58>
   d76c8:	f1a4 0309 	sub.w	r3, r4, #9
   d76cc:	2b01      	cmp	r3, #1
   d76ce:	d9ed      	bls.n	d76ac <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d76d0:	2c23      	cmp	r4, #35	; 0x23
   d76d2:	bf8c      	ite	hi
   d76d4:	2000      	movhi	r0, #0
   d76d6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d76d8:	bd70      	pop	{r4, r5, r6, pc}
   d76da:	bf00      	nop
   d76dc:	2003e5e4 	.word	0x2003e5e4
   d76e0:	2003e5e8 	.word	0x2003e5e8

000d76e4 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d76e4:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d76e6:	b538      	push	{r3, r4, r5, lr}
   d76e8:	4604      	mov	r4, r0
   d76ea:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d76ec:	d80a      	bhi.n	d7704 <pinMode+0x20>
   d76ee:	29ff      	cmp	r1, #255	; 0xff
   d76f0:	d008      	beq.n	d7704 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d76f2:	f7ff ffc1 	bl	d7678 <pinAvailable>
   d76f6:	b128      	cbz	r0, d7704 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d76f8:	4629      	mov	r1, r5
   d76fa:	4620      	mov	r0, r4
}
   d76fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d7700:	f7fd bbb8 	b.w	d4e74 <HAL_Pin_Mode>
   d7704:	bd38      	pop	{r3, r4, r5, pc}

000d7706 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7706:	b538      	push	{r3, r4, r5, lr}
   d7708:	4604      	mov	r4, r0
   d770a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d770c:	f7fd fbba 	bl	d4e84 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7710:	28ff      	cmp	r0, #255	; 0xff
   d7712:	d010      	beq.n	d7736 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d7714:	2806      	cmp	r0, #6
   d7716:	d804      	bhi.n	d7722 <digitalWrite+0x1c>
   d7718:	234d      	movs	r3, #77	; 0x4d
   d771a:	fa23 f000 	lsr.w	r0, r3, r0
   d771e:	07c3      	lsls	r3, r0, #31
   d7720:	d409      	bmi.n	d7736 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7722:	4620      	mov	r0, r4
   d7724:	f7ff ffa8 	bl	d7678 <pinAvailable>
   d7728:	b128      	cbz	r0, d7736 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d772a:	4629      	mov	r1, r5
   d772c:	4620      	mov	r0, r4
}
   d772e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7732:	f7fd bbaf 	b.w	d4e94 <HAL_GPIO_Write>
   d7736:	bd38      	pop	{r3, r4, r5, pc}

000d7738 <_Z17acquireWireBufferv>:
   d7738:	b570      	push	{r4, r5, r6, lr}
   d773a:	4604      	mov	r4, r0
   d773c:	2514      	movs	r5, #20
   d773e:	462a      	mov	r2, r5
   d7740:	4e09      	ldr	r6, [pc, #36]	; (d7768 <_Z17acquireWireBufferv+0x30>)
   d7742:	2100      	movs	r1, #0
   d7744:	f000 fdac 	bl	d82a0 <memset>
   d7748:	8025      	strh	r5, [r4, #0]
   d774a:	2520      	movs	r5, #32
   d774c:	4631      	mov	r1, r6
   d774e:	60a5      	str	r5, [r4, #8]
   d7750:	6125      	str	r5, [r4, #16]
   d7752:	4628      	mov	r0, r5
   d7754:	f000 f88f 	bl	d7876 <_ZnajRKSt9nothrow_t>
   d7758:	4631      	mov	r1, r6
   d775a:	6060      	str	r0, [r4, #4]
   d775c:	4628      	mov	r0, r5
   d775e:	f000 f88a 	bl	d7876 <_ZnajRKSt9nothrow_t>
   d7762:	60e0      	str	r0, [r4, #12]
   d7764:	4620      	mov	r0, r4
   d7766:	bd70      	pop	{r4, r5, r6, pc}
   d7768:	000da00c 	.word	0x000da00c

000d776c <_Z18acquireWire1Bufferv>:
	return defaultWireConfig();
}

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
   d776c:	b570      	push	{r4, r5, r6, lr}
   d776e:	4604      	mov	r4, r0
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7770:	2514      	movs	r5, #20
   d7772:	462a      	mov	r2, r5

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7774:	4e09      	ldr	r6, [pc, #36]	; (d779c <_Z18acquireWire1Bufferv+0x30>)
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7776:	2100      	movs	r1, #0
   d7778:	f000 fd92 	bl	d82a0 <memset>
   d777c:	8025      	strh	r5, [r4, #0]
   d777e:	2520      	movs	r5, #32

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7780:	4631      	mov	r1, r6
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7782:	60a5      	str	r5, [r4, #8]
   d7784:	6125      	str	r5, [r4, #16]

HAL_I2C_Config defaultWireConfig() {
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7786:	4628      	mov	r0, r5
   d7788:	f000 f875 	bl	d7876 <_ZnajRKSt9nothrow_t>
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d778c:	4631      	mov	r1, r6
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d778e:	6060      	str	r0, [r4, #4]
	HAL_I2C_Config config = {
		.size = sizeof(HAL_I2C_Config),
		.version = HAL_I2C_CONFIG_VERSION_1,
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
		.rx_buffer_size = I2C_BUFFER_LENGTH,
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7790:	4628      	mov	r0, r5
   d7792:	f000 f870 	bl	d7876 <_ZnajRKSt9nothrow_t>
		.tx_buffer_size = I2C_BUFFER_LENGTH
	};
   d7796:	60e0      	str	r0, [r4, #12]

#if Wiring_Wire1
HAL_I2C_Config __attribute__((weak)) acquireWire1Buffer()
{
	return defaultWireConfig();
}
   d7798:	4620      	mov	r0, r4
   d779a:	bd70      	pop	{r4, r5, r6, pc}
   d779c:	000da00c 	.word	0x000da00c

000d77a0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d77a0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d77a2:	4d0e      	ldr	r5, [pc, #56]	; (d77dc <_Z19__fetch_global_Wirev+0x3c>)
   d77a4:	6829      	ldr	r1, [r5, #0]
   d77a6:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d77aa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d77ac:	d113      	bne.n	d77d6 <_Z19__fetch_global_Wirev+0x36>
   d77ae:	4628      	mov	r0, r5
   d77b0:	f7fc fc80 	bl	d40b4 <__cxa_guard_acquire>
   d77b4:	b178      	cbz	r0, d77d6 <_Z19__fetch_global_Wirev+0x36>
   d77b6:	a801      	add	r0, sp, #4
   d77b8:	f7ff ffbe 	bl	d7738 <_Z17acquireWireBufferv>
   d77bc:	aa01      	add	r2, sp, #4
   d77be:	4621      	mov	r1, r4
   d77c0:	4807      	ldr	r0, [pc, #28]	; (d77e0 <_Z19__fetch_global_Wirev+0x40>)
   d77c2:	f7fd fec5 	bl	d5550 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d77c6:	4628      	mov	r0, r5
   d77c8:	f7fc fc79 	bl	d40be <__cxa_guard_release>
   d77cc:	4a05      	ldr	r2, [pc, #20]	; (d77e4 <_Z19__fetch_global_Wirev+0x44>)
   d77ce:	4906      	ldr	r1, [pc, #24]	; (d77e8 <_Z19__fetch_global_Wirev+0x48>)
   d77d0:	4803      	ldr	r0, [pc, #12]	; (d77e0 <_Z19__fetch_global_Wirev+0x40>)
   d77d2:	f000 f831 	bl	d7838 <__aeabi_atexit>
	return wire;
}
   d77d6:	4802      	ldr	r0, [pc, #8]	; (d77e0 <_Z19__fetch_global_Wirev+0x40>)
   d77d8:	b007      	add	sp, #28
   d77da:	bd30      	pop	{r4, r5, pc}
   d77dc:	2003e5f4 	.word	0x2003e5f4
   d77e0:	2003e60c 	.word	0x2003e60c
   d77e4:	2003e1b8 	.word	0x2003e1b8
   d77e8:	000d54f9 	.word	0x000d54f9

000d77ec <_Z20__fetch_global_Wire1v>:

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d77ec:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d77ee:	4c0e      	ldr	r4, [pc, #56]	; (d7828 <_Z20__fetch_global_Wire1v+0x3c>)
   d77f0:	6823      	ldr	r3, [r4, #0]
   d77f2:	07db      	lsls	r3, r3, #31
	return wire;
}

#if Wiring_Wire1
TwoWire& __fetch_global_Wire1()
{
   d77f4:	b086      	sub	sp, #24
	static TwoWire wire(HAL_I2C_INTERFACE2, acquireWire1Buffer());
   d77f6:	d413      	bmi.n	d7820 <_Z20__fetch_global_Wire1v+0x34>
   d77f8:	4620      	mov	r0, r4
   d77fa:	f7fc fc5b 	bl	d40b4 <__cxa_guard_acquire>
   d77fe:	b178      	cbz	r0, d7820 <_Z20__fetch_global_Wire1v+0x34>
   d7800:	a801      	add	r0, sp, #4
   d7802:	f7ff ffb3 	bl	d776c <_Z18acquireWire1Bufferv>
   d7806:	aa01      	add	r2, sp, #4
   d7808:	2101      	movs	r1, #1
   d780a:	4808      	ldr	r0, [pc, #32]	; (d782c <_Z20__fetch_global_Wire1v+0x40>)
   d780c:	f7fd fea0 	bl	d5550 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d7810:	4620      	mov	r0, r4
   d7812:	f7fc fc54 	bl	d40be <__cxa_guard_release>
   d7816:	4a06      	ldr	r2, [pc, #24]	; (d7830 <_Z20__fetch_global_Wire1v+0x44>)
   d7818:	4906      	ldr	r1, [pc, #24]	; (d7834 <_Z20__fetch_global_Wire1v+0x48>)
   d781a:	4804      	ldr	r0, [pc, #16]	; (d782c <_Z20__fetch_global_Wire1v+0x40>)
   d781c:	f000 f80c 	bl	d7838 <__aeabi_atexit>
	return wire;
}
   d7820:	4802      	ldr	r0, [pc, #8]	; (d782c <_Z20__fetch_global_Wire1v+0x40>)
   d7822:	b006      	add	sp, #24
   d7824:	bd10      	pop	{r4, pc}
   d7826:	bf00      	nop
   d7828:	2003e620 	.word	0x2003e620
   d782c:	2003e5f8 	.word	0x2003e5f8
   d7830:	2003e1b8 	.word	0x2003e1b8
   d7834:	000d54f9 	.word	0x000d54f9

000d7838 <__aeabi_atexit>:
   d7838:	460b      	mov	r3, r1
   d783a:	4601      	mov	r1, r0
   d783c:	4618      	mov	r0, r3
   d783e:	f000 bb59 	b.w	d7ef4 <__cxa_atexit>

000d7842 <_ZdlPvj>:
   d7842:	f7fc bc28 	b.w	d4096 <_ZdlPv>
	...

000d7848 <_ZSt15get_new_handlerv>:
   d7848:	4b02      	ldr	r3, [pc, #8]	; (d7854 <_ZSt15get_new_handlerv+0xc>)
   d784a:	6818      	ldr	r0, [r3, #0]
   d784c:	f3bf 8f5f 	dmb	sy
   d7850:	4770      	bx	lr
   d7852:	bf00      	nop
   d7854:	2003e624 	.word	0x2003e624

000d7858 <_ZnwjRKSt9nothrow_t>:
   d7858:	b510      	push	{r4, lr}
   d785a:	2800      	cmp	r0, #0
   d785c:	bf14      	ite	ne
   d785e:	4604      	movne	r4, r0
   d7860:	2401      	moveq	r4, #1
   d7862:	4620      	mov	r0, r4
   d7864:	f7fd fd14 	bl	d5290 <malloc>
   d7868:	b920      	cbnz	r0, d7874 <_ZnwjRKSt9nothrow_t+0x1c>
   d786a:	f7ff ffed 	bl	d7848 <_ZSt15get_new_handlerv>
   d786e:	b108      	cbz	r0, d7874 <_ZnwjRKSt9nothrow_t+0x1c>
   d7870:	4780      	blx	r0
   d7872:	e7f6      	b.n	d7862 <_ZnwjRKSt9nothrow_t+0xa>
   d7874:	bd10      	pop	{r4, pc}

000d7876 <_ZnajRKSt9nothrow_t>:
   d7876:	f7ff bfef 	b.w	d7858 <_ZnwjRKSt9nothrow_t>
	...

000d787c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d787c:	4b24      	ldr	r3, [pc, #144]	; (d7910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d787e:	681a      	ldr	r2, [r3, #0]
   d7880:	07d0      	lsls	r0, r2, #31
   d7882:	bf5c      	itt	pl
   d7884:	2201      	movpl	r2, #1
   d7886:	601a      	strpl	r2, [r3, #0]
   d7888:	4b22      	ldr	r3, [pc, #136]	; (d7914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d788a:	681a      	ldr	r2, [r3, #0]
   d788c:	07d1      	lsls	r1, r2, #31
   d788e:	bf5c      	itt	pl
   d7890:	2201      	movpl	r2, #1
   d7892:	601a      	strpl	r2, [r3, #0]
   d7894:	4b20      	ldr	r3, [pc, #128]	; (d7918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d7896:	681a      	ldr	r2, [r3, #0]
   d7898:	07d2      	lsls	r2, r2, #31
   d789a:	bf5c      	itt	pl
   d789c:	2201      	movpl	r2, #1
   d789e:	601a      	strpl	r2, [r3, #0]
   d78a0:	4b1e      	ldr	r3, [pc, #120]	; (d791c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d78a2:	681a      	ldr	r2, [r3, #0]
   d78a4:	07d0      	lsls	r0, r2, #31
   d78a6:	bf5c      	itt	pl
   d78a8:	2201      	movpl	r2, #1
   d78aa:	601a      	strpl	r2, [r3, #0]
   d78ac:	4b1c      	ldr	r3, [pc, #112]	; (d7920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d78ae:	681a      	ldr	r2, [r3, #0]
   d78b0:	07d1      	lsls	r1, r2, #31
   d78b2:	bf5c      	itt	pl
   d78b4:	2201      	movpl	r2, #1
   d78b6:	601a      	strpl	r2, [r3, #0]
   d78b8:	4b1a      	ldr	r3, [pc, #104]	; (d7924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d78ba:	681a      	ldr	r2, [r3, #0]
   d78bc:	07d2      	lsls	r2, r2, #31
   d78be:	bf5c      	itt	pl
   d78c0:	2201      	movpl	r2, #1
   d78c2:	601a      	strpl	r2, [r3, #0]
   d78c4:	4b18      	ldr	r3, [pc, #96]	; (d7928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d78c6:	681a      	ldr	r2, [r3, #0]
   d78c8:	07d0      	lsls	r0, r2, #31
   d78ca:	bf5c      	itt	pl
   d78cc:	2201      	movpl	r2, #1
   d78ce:	601a      	strpl	r2, [r3, #0]
   d78d0:	4b16      	ldr	r3, [pc, #88]	; (d792c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d78d2:	681a      	ldr	r2, [r3, #0]
   d78d4:	07d1      	lsls	r1, r2, #31
   d78d6:	bf5c      	itt	pl
   d78d8:	2201      	movpl	r2, #1
   d78da:	601a      	strpl	r2, [r3, #0]
   d78dc:	4b14      	ldr	r3, [pc, #80]	; (d7930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d78de:	681a      	ldr	r2, [r3, #0]
   d78e0:	07d2      	lsls	r2, r2, #31
   d78e2:	bf5c      	itt	pl
   d78e4:	2201      	movpl	r2, #1
   d78e6:	601a      	strpl	r2, [r3, #0]
   d78e8:	4b12      	ldr	r3, [pc, #72]	; (d7934 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d78ea:	681a      	ldr	r2, [r3, #0]
   d78ec:	07d0      	lsls	r0, r2, #31
   d78ee:	bf5c      	itt	pl
   d78f0:	2201      	movpl	r2, #1
   d78f2:	601a      	strpl	r2, [r3, #0]
   d78f4:	4b10      	ldr	r3, [pc, #64]	; (d7938 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d78f6:	681a      	ldr	r2, [r3, #0]
   d78f8:	07d1      	lsls	r1, r2, #31
   d78fa:	bf5c      	itt	pl
   d78fc:	2201      	movpl	r2, #1
   d78fe:	601a      	strpl	r2, [r3, #0]
   d7900:	4b0e      	ldr	r3, [pc, #56]	; (d793c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d7902:	681a      	ldr	r2, [r3, #0]
   d7904:	07d2      	lsls	r2, r2, #31
   d7906:	bf5c      	itt	pl
   d7908:	2201      	movpl	r2, #1
   d790a:	601a      	strpl	r2, [r3, #0]
   d790c:	4770      	bx	lr
   d790e:	bf00      	nop
   d7910:	2003e654 	.word	0x2003e654
   d7914:	2003e650 	.word	0x2003e650
   d7918:	2003e64c 	.word	0x2003e64c
   d791c:	2003e648 	.word	0x2003e648
   d7920:	2003e644 	.word	0x2003e644
   d7924:	2003e640 	.word	0x2003e640
   d7928:	2003e63c 	.word	0x2003e63c
   d792c:	2003e638 	.word	0x2003e638
   d7930:	2003e634 	.word	0x2003e634
   d7934:	2003e630 	.word	0x2003e630
   d7938:	2003e62c 	.word	0x2003e62c
   d793c:	2003e628 	.word	0x2003e628

000d7940 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d7940:	4b18      	ldr	r3, [pc, #96]	; (d79a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d7942:	681a      	ldr	r2, [r3, #0]
   d7944:	07d1      	lsls	r1, r2, #31
   d7946:	bf5c      	itt	pl
   d7948:	2201      	movpl	r2, #1
   d794a:	601a      	strpl	r2, [r3, #0]
   d794c:	4b16      	ldr	r3, [pc, #88]	; (d79a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d794e:	681a      	ldr	r2, [r3, #0]
   d7950:	07d2      	lsls	r2, r2, #31
   d7952:	bf5c      	itt	pl
   d7954:	2201      	movpl	r2, #1
   d7956:	601a      	strpl	r2, [r3, #0]
   d7958:	4b14      	ldr	r3, [pc, #80]	; (d79ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d795a:	681a      	ldr	r2, [r3, #0]
   d795c:	07d0      	lsls	r0, r2, #31
   d795e:	bf5c      	itt	pl
   d7960:	2201      	movpl	r2, #1
   d7962:	601a      	strpl	r2, [r3, #0]
   d7964:	4b12      	ldr	r3, [pc, #72]	; (d79b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d7966:	681a      	ldr	r2, [r3, #0]
   d7968:	07d1      	lsls	r1, r2, #31
   d796a:	bf5c      	itt	pl
   d796c:	2201      	movpl	r2, #1
   d796e:	601a      	strpl	r2, [r3, #0]
   d7970:	4b10      	ldr	r3, [pc, #64]	; (d79b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d7972:	681a      	ldr	r2, [r3, #0]
   d7974:	07d2      	lsls	r2, r2, #31
   d7976:	bf5c      	itt	pl
   d7978:	2201      	movpl	r2, #1
   d797a:	601a      	strpl	r2, [r3, #0]
   d797c:	4b0e      	ldr	r3, [pc, #56]	; (d79b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d797e:	681a      	ldr	r2, [r3, #0]
   d7980:	07d0      	lsls	r0, r2, #31
   d7982:	bf5c      	itt	pl
   d7984:	2201      	movpl	r2, #1
   d7986:	601a      	strpl	r2, [r3, #0]
   d7988:	4b0c      	ldr	r3, [pc, #48]	; (d79bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d798a:	681a      	ldr	r2, [r3, #0]
   d798c:	07d1      	lsls	r1, r2, #31
   d798e:	bf5c      	itt	pl
   d7990:	2201      	movpl	r2, #1
   d7992:	601a      	strpl	r2, [r3, #0]
   d7994:	4b0a      	ldr	r3, [pc, #40]	; (d79c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7996:	681a      	ldr	r2, [r3, #0]
   d7998:	07d2      	lsls	r2, r2, #31
   d799a:	bf5c      	itt	pl
   d799c:	2201      	movpl	r2, #1
   d799e:	601a      	strpl	r2, [r3, #0]
   d79a0:	4770      	bx	lr
   d79a2:	bf00      	nop
   d79a4:	2003e674 	.word	0x2003e674
   d79a8:	2003e670 	.word	0x2003e670
   d79ac:	2003e66c 	.word	0x2003e66c
   d79b0:	2003e668 	.word	0x2003e668
   d79b4:	2003e664 	.word	0x2003e664
   d79b8:	2003e660 	.word	0x2003e660
   d79bc:	2003e65c 	.word	0x2003e65c
   d79c0:	2003e658 	.word	0x2003e658

000d79c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d79c4:	4b18      	ldr	r3, [pc, #96]	; (d7a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d79c6:	681a      	ldr	r2, [r3, #0]
   d79c8:	07d1      	lsls	r1, r2, #31
   d79ca:	bf5c      	itt	pl
   d79cc:	2201      	movpl	r2, #1
   d79ce:	601a      	strpl	r2, [r3, #0]
   d79d0:	4b16      	ldr	r3, [pc, #88]	; (d7a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d79d2:	681a      	ldr	r2, [r3, #0]
   d79d4:	07d2      	lsls	r2, r2, #31
   d79d6:	bf5c      	itt	pl
   d79d8:	2201      	movpl	r2, #1
   d79da:	601a      	strpl	r2, [r3, #0]
   d79dc:	4b14      	ldr	r3, [pc, #80]	; (d7a30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d79de:	681a      	ldr	r2, [r3, #0]
   d79e0:	07d0      	lsls	r0, r2, #31
   d79e2:	bf5c      	itt	pl
   d79e4:	2201      	movpl	r2, #1
   d79e6:	601a      	strpl	r2, [r3, #0]
   d79e8:	4b12      	ldr	r3, [pc, #72]	; (d7a34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d79ea:	681a      	ldr	r2, [r3, #0]
   d79ec:	07d1      	lsls	r1, r2, #31
   d79ee:	bf5c      	itt	pl
   d79f0:	2201      	movpl	r2, #1
   d79f2:	601a      	strpl	r2, [r3, #0]
   d79f4:	4b10      	ldr	r3, [pc, #64]	; (d7a38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d79f6:	681a      	ldr	r2, [r3, #0]
   d79f8:	07d2      	lsls	r2, r2, #31
   d79fa:	bf5c      	itt	pl
   d79fc:	2201      	movpl	r2, #1
   d79fe:	601a      	strpl	r2, [r3, #0]
   d7a00:	4b0e      	ldr	r3, [pc, #56]	; (d7a3c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d7a02:	681a      	ldr	r2, [r3, #0]
   d7a04:	07d0      	lsls	r0, r2, #31
   d7a06:	bf5c      	itt	pl
   d7a08:	2201      	movpl	r2, #1
   d7a0a:	601a      	strpl	r2, [r3, #0]
   d7a0c:	4b0c      	ldr	r3, [pc, #48]	; (d7a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d7a0e:	681a      	ldr	r2, [r3, #0]
   d7a10:	07d1      	lsls	r1, r2, #31
   d7a12:	bf5c      	itt	pl
   d7a14:	2201      	movpl	r2, #1
   d7a16:	601a      	strpl	r2, [r3, #0]
   d7a18:	4b0a      	ldr	r3, [pc, #40]	; (d7a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d7a1a:	681a      	ldr	r2, [r3, #0]
   d7a1c:	07d2      	lsls	r2, r2, #31
   d7a1e:	bf5c      	itt	pl
   d7a20:	2201      	movpl	r2, #1
   d7a22:	601a      	strpl	r2, [r3, #0]
   d7a24:	4770      	bx	lr
   d7a26:	bf00      	nop
   d7a28:	2003e694 	.word	0x2003e694
   d7a2c:	2003e690 	.word	0x2003e690
   d7a30:	2003e68c 	.word	0x2003e68c
   d7a34:	2003e688 	.word	0x2003e688
   d7a38:	2003e684 	.word	0x2003e684
   d7a3c:	2003e680 	.word	0x2003e680
   d7a40:	2003e67c 	.word	0x2003e67c
   d7a44:	2003e678 	.word	0x2003e678

000d7a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d7a48:	4b24      	ldr	r3, [pc, #144]	; (d7adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d7a4a:	681a      	ldr	r2, [r3, #0]
   d7a4c:	07d0      	lsls	r0, r2, #31
   d7a4e:	bf5c      	itt	pl
   d7a50:	2201      	movpl	r2, #1
   d7a52:	601a      	strpl	r2, [r3, #0]
   d7a54:	4b22      	ldr	r3, [pc, #136]	; (d7ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d7a56:	681a      	ldr	r2, [r3, #0]
   d7a58:	07d1      	lsls	r1, r2, #31
   d7a5a:	bf5c      	itt	pl
   d7a5c:	2201      	movpl	r2, #1
   d7a5e:	601a      	strpl	r2, [r3, #0]
   d7a60:	4b20      	ldr	r3, [pc, #128]	; (d7ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d7a62:	681a      	ldr	r2, [r3, #0]
   d7a64:	07d2      	lsls	r2, r2, #31
   d7a66:	bf5c      	itt	pl
   d7a68:	2201      	movpl	r2, #1
   d7a6a:	601a      	strpl	r2, [r3, #0]
   d7a6c:	4b1e      	ldr	r3, [pc, #120]	; (d7ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d7a6e:	681a      	ldr	r2, [r3, #0]
   d7a70:	07d0      	lsls	r0, r2, #31
   d7a72:	bf5c      	itt	pl
   d7a74:	2201      	movpl	r2, #1
   d7a76:	601a      	strpl	r2, [r3, #0]
   d7a78:	4b1c      	ldr	r3, [pc, #112]	; (d7aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d7a7a:	681a      	ldr	r2, [r3, #0]
   d7a7c:	07d1      	lsls	r1, r2, #31
   d7a7e:	bf5c      	itt	pl
   d7a80:	2201      	movpl	r2, #1
   d7a82:	601a      	strpl	r2, [r3, #0]
   d7a84:	4b1a      	ldr	r3, [pc, #104]	; (d7af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d7a86:	681a      	ldr	r2, [r3, #0]
   d7a88:	07d2      	lsls	r2, r2, #31
   d7a8a:	bf5c      	itt	pl
   d7a8c:	2201      	movpl	r2, #1
   d7a8e:	601a      	strpl	r2, [r3, #0]
   d7a90:	4b18      	ldr	r3, [pc, #96]	; (d7af4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d7a92:	681a      	ldr	r2, [r3, #0]
   d7a94:	07d0      	lsls	r0, r2, #31
   d7a96:	bf5c      	itt	pl
   d7a98:	2201      	movpl	r2, #1
   d7a9a:	601a      	strpl	r2, [r3, #0]
   d7a9c:	4b16      	ldr	r3, [pc, #88]	; (d7af8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d7a9e:	681a      	ldr	r2, [r3, #0]
   d7aa0:	07d1      	lsls	r1, r2, #31
   d7aa2:	bf5c      	itt	pl
   d7aa4:	2201      	movpl	r2, #1
   d7aa6:	601a      	strpl	r2, [r3, #0]
   d7aa8:	4b14      	ldr	r3, [pc, #80]	; (d7afc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d7aaa:	681a      	ldr	r2, [r3, #0]
   d7aac:	07d2      	lsls	r2, r2, #31
   d7aae:	bf5c      	itt	pl
   d7ab0:	2201      	movpl	r2, #1
   d7ab2:	601a      	strpl	r2, [r3, #0]
   d7ab4:	4b12      	ldr	r3, [pc, #72]	; (d7b00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d7ab6:	681a      	ldr	r2, [r3, #0]
   d7ab8:	07d0      	lsls	r0, r2, #31
   d7aba:	bf5c      	itt	pl
   d7abc:	2201      	movpl	r2, #1
   d7abe:	601a      	strpl	r2, [r3, #0]
   d7ac0:	4b10      	ldr	r3, [pc, #64]	; (d7b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d7ac2:	681a      	ldr	r2, [r3, #0]
   d7ac4:	07d1      	lsls	r1, r2, #31
   d7ac6:	bf5c      	itt	pl
   d7ac8:	2201      	movpl	r2, #1
   d7aca:	601a      	strpl	r2, [r3, #0]
   d7acc:	4b0e      	ldr	r3, [pc, #56]	; (d7b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d7ace:	681a      	ldr	r2, [r3, #0]
   d7ad0:	07d2      	lsls	r2, r2, #31
   d7ad2:	bf5c      	itt	pl
   d7ad4:	2201      	movpl	r2, #1
   d7ad6:	601a      	strpl	r2, [r3, #0]
   d7ad8:	4770      	bx	lr
   d7ada:	bf00      	nop
   d7adc:	2003e6c4 	.word	0x2003e6c4
   d7ae0:	2003e6c0 	.word	0x2003e6c0
   d7ae4:	2003e6bc 	.word	0x2003e6bc
   d7ae8:	2003e6b8 	.word	0x2003e6b8
   d7aec:	2003e6b4 	.word	0x2003e6b4
   d7af0:	2003e6b0 	.word	0x2003e6b0
   d7af4:	2003e6ac 	.word	0x2003e6ac
   d7af8:	2003e6a8 	.word	0x2003e6a8
   d7afc:	2003e6a4 	.word	0x2003e6a4
   d7b00:	2003e6a0 	.word	0x2003e6a0
   d7b04:	2003e69c 	.word	0x2003e69c
   d7b08:	2003e698 	.word	0x2003e698

000d7b0c <__aeabi_drsub>:
   d7b0c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d7b10:	e002      	b.n	d7b18 <__adddf3>
   d7b12:	bf00      	nop

000d7b14 <__aeabi_dsub>:
   d7b14:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d7b18 <__adddf3>:
   d7b18:	b530      	push	{r4, r5, lr}
   d7b1a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d7b1e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d7b22:	ea94 0f05 	teq	r4, r5
   d7b26:	bf08      	it	eq
   d7b28:	ea90 0f02 	teqeq	r0, r2
   d7b2c:	bf1f      	itttt	ne
   d7b2e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d7b32:	ea55 0c02 	orrsne.w	ip, r5, r2
   d7b36:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d7b3a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7b3e:	f000 80e2 	beq.w	d7d06 <__adddf3+0x1ee>
   d7b42:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d7b46:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d7b4a:	bfb8      	it	lt
   d7b4c:	426d      	neglt	r5, r5
   d7b4e:	dd0c      	ble.n	d7b6a <__adddf3+0x52>
   d7b50:	442c      	add	r4, r5
   d7b52:	ea80 0202 	eor.w	r2, r0, r2
   d7b56:	ea81 0303 	eor.w	r3, r1, r3
   d7b5a:	ea82 0000 	eor.w	r0, r2, r0
   d7b5e:	ea83 0101 	eor.w	r1, r3, r1
   d7b62:	ea80 0202 	eor.w	r2, r0, r2
   d7b66:	ea81 0303 	eor.w	r3, r1, r3
   d7b6a:	2d36      	cmp	r5, #54	; 0x36
   d7b6c:	bf88      	it	hi
   d7b6e:	bd30      	pophi	{r4, r5, pc}
   d7b70:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d7b74:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d7b78:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d7b7c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d7b80:	d002      	beq.n	d7b88 <__adddf3+0x70>
   d7b82:	4240      	negs	r0, r0
   d7b84:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7b88:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d7b8c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d7b90:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d7b94:	d002      	beq.n	d7b9c <__adddf3+0x84>
   d7b96:	4252      	negs	r2, r2
   d7b98:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d7b9c:	ea94 0f05 	teq	r4, r5
   d7ba0:	f000 80a7 	beq.w	d7cf2 <__adddf3+0x1da>
   d7ba4:	f1a4 0401 	sub.w	r4, r4, #1
   d7ba8:	f1d5 0e20 	rsbs	lr, r5, #32
   d7bac:	db0d      	blt.n	d7bca <__adddf3+0xb2>
   d7bae:	fa02 fc0e 	lsl.w	ip, r2, lr
   d7bb2:	fa22 f205 	lsr.w	r2, r2, r5
   d7bb6:	1880      	adds	r0, r0, r2
   d7bb8:	f141 0100 	adc.w	r1, r1, #0
   d7bbc:	fa03 f20e 	lsl.w	r2, r3, lr
   d7bc0:	1880      	adds	r0, r0, r2
   d7bc2:	fa43 f305 	asr.w	r3, r3, r5
   d7bc6:	4159      	adcs	r1, r3
   d7bc8:	e00e      	b.n	d7be8 <__adddf3+0xd0>
   d7bca:	f1a5 0520 	sub.w	r5, r5, #32
   d7bce:	f10e 0e20 	add.w	lr, lr, #32
   d7bd2:	2a01      	cmp	r2, #1
   d7bd4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d7bd8:	bf28      	it	cs
   d7bda:	f04c 0c02 	orrcs.w	ip, ip, #2
   d7bde:	fa43 f305 	asr.w	r3, r3, r5
   d7be2:	18c0      	adds	r0, r0, r3
   d7be4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d7be8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7bec:	d507      	bpl.n	d7bfe <__adddf3+0xe6>
   d7bee:	f04f 0e00 	mov.w	lr, #0
   d7bf2:	f1dc 0c00 	rsbs	ip, ip, #0
   d7bf6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d7bfa:	eb6e 0101 	sbc.w	r1, lr, r1
   d7bfe:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d7c02:	d31b      	bcc.n	d7c3c <__adddf3+0x124>
   d7c04:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d7c08:	d30c      	bcc.n	d7c24 <__adddf3+0x10c>
   d7c0a:	0849      	lsrs	r1, r1, #1
   d7c0c:	ea5f 0030 	movs.w	r0, r0, rrx
   d7c10:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d7c14:	f104 0401 	add.w	r4, r4, #1
   d7c18:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d7c1c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d7c20:	f080 809a 	bcs.w	d7d58 <__adddf3+0x240>
   d7c24:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d7c28:	bf08      	it	eq
   d7c2a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d7c2e:	f150 0000 	adcs.w	r0, r0, #0
   d7c32:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d7c36:	ea41 0105 	orr.w	r1, r1, r5
   d7c3a:	bd30      	pop	{r4, r5, pc}
   d7c3c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d7c40:	4140      	adcs	r0, r0
   d7c42:	eb41 0101 	adc.w	r1, r1, r1
   d7c46:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7c4a:	f1a4 0401 	sub.w	r4, r4, #1
   d7c4e:	d1e9      	bne.n	d7c24 <__adddf3+0x10c>
   d7c50:	f091 0f00 	teq	r1, #0
   d7c54:	bf04      	itt	eq
   d7c56:	4601      	moveq	r1, r0
   d7c58:	2000      	moveq	r0, #0
   d7c5a:	fab1 f381 	clz	r3, r1
   d7c5e:	bf08      	it	eq
   d7c60:	3320      	addeq	r3, #32
   d7c62:	f1a3 030b 	sub.w	r3, r3, #11
   d7c66:	f1b3 0220 	subs.w	r2, r3, #32
   d7c6a:	da0c      	bge.n	d7c86 <__adddf3+0x16e>
   d7c6c:	320c      	adds	r2, #12
   d7c6e:	dd08      	ble.n	d7c82 <__adddf3+0x16a>
   d7c70:	f102 0c14 	add.w	ip, r2, #20
   d7c74:	f1c2 020c 	rsb	r2, r2, #12
   d7c78:	fa01 f00c 	lsl.w	r0, r1, ip
   d7c7c:	fa21 f102 	lsr.w	r1, r1, r2
   d7c80:	e00c      	b.n	d7c9c <__adddf3+0x184>
   d7c82:	f102 0214 	add.w	r2, r2, #20
   d7c86:	bfd8      	it	le
   d7c88:	f1c2 0c20 	rsble	ip, r2, #32
   d7c8c:	fa01 f102 	lsl.w	r1, r1, r2
   d7c90:	fa20 fc0c 	lsr.w	ip, r0, ip
   d7c94:	bfdc      	itt	le
   d7c96:	ea41 010c 	orrle.w	r1, r1, ip
   d7c9a:	4090      	lslle	r0, r2
   d7c9c:	1ae4      	subs	r4, r4, r3
   d7c9e:	bfa2      	ittt	ge
   d7ca0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d7ca4:	4329      	orrge	r1, r5
   d7ca6:	bd30      	popge	{r4, r5, pc}
   d7ca8:	ea6f 0404 	mvn.w	r4, r4
   d7cac:	3c1f      	subs	r4, #31
   d7cae:	da1c      	bge.n	d7cea <__adddf3+0x1d2>
   d7cb0:	340c      	adds	r4, #12
   d7cb2:	dc0e      	bgt.n	d7cd2 <__adddf3+0x1ba>
   d7cb4:	f104 0414 	add.w	r4, r4, #20
   d7cb8:	f1c4 0220 	rsb	r2, r4, #32
   d7cbc:	fa20 f004 	lsr.w	r0, r0, r4
   d7cc0:	fa01 f302 	lsl.w	r3, r1, r2
   d7cc4:	ea40 0003 	orr.w	r0, r0, r3
   d7cc8:	fa21 f304 	lsr.w	r3, r1, r4
   d7ccc:	ea45 0103 	orr.w	r1, r5, r3
   d7cd0:	bd30      	pop	{r4, r5, pc}
   d7cd2:	f1c4 040c 	rsb	r4, r4, #12
   d7cd6:	f1c4 0220 	rsb	r2, r4, #32
   d7cda:	fa20 f002 	lsr.w	r0, r0, r2
   d7cde:	fa01 f304 	lsl.w	r3, r1, r4
   d7ce2:	ea40 0003 	orr.w	r0, r0, r3
   d7ce6:	4629      	mov	r1, r5
   d7ce8:	bd30      	pop	{r4, r5, pc}
   d7cea:	fa21 f004 	lsr.w	r0, r1, r4
   d7cee:	4629      	mov	r1, r5
   d7cf0:	bd30      	pop	{r4, r5, pc}
   d7cf2:	f094 0f00 	teq	r4, #0
   d7cf6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d7cfa:	bf06      	itte	eq
   d7cfc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d7d00:	3401      	addeq	r4, #1
   d7d02:	3d01      	subne	r5, #1
   d7d04:	e74e      	b.n	d7ba4 <__adddf3+0x8c>
   d7d06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7d0a:	bf18      	it	ne
   d7d0c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d7d10:	d029      	beq.n	d7d66 <__adddf3+0x24e>
   d7d12:	ea94 0f05 	teq	r4, r5
   d7d16:	bf08      	it	eq
   d7d18:	ea90 0f02 	teqeq	r0, r2
   d7d1c:	d005      	beq.n	d7d2a <__adddf3+0x212>
   d7d1e:	ea54 0c00 	orrs.w	ip, r4, r0
   d7d22:	bf04      	itt	eq
   d7d24:	4619      	moveq	r1, r3
   d7d26:	4610      	moveq	r0, r2
   d7d28:	bd30      	pop	{r4, r5, pc}
   d7d2a:	ea91 0f03 	teq	r1, r3
   d7d2e:	bf1e      	ittt	ne
   d7d30:	2100      	movne	r1, #0
   d7d32:	2000      	movne	r0, #0
   d7d34:	bd30      	popne	{r4, r5, pc}
   d7d36:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d7d3a:	d105      	bne.n	d7d48 <__adddf3+0x230>
   d7d3c:	0040      	lsls	r0, r0, #1
   d7d3e:	4149      	adcs	r1, r1
   d7d40:	bf28      	it	cs
   d7d42:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d7d46:	bd30      	pop	{r4, r5, pc}
   d7d48:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d7d4c:	bf3c      	itt	cc
   d7d4e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d7d52:	bd30      	popcc	{r4, r5, pc}
   d7d54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7d58:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d7d5c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d7d60:	f04f 0000 	mov.w	r0, #0
   d7d64:	bd30      	pop	{r4, r5, pc}
   d7d66:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d7d6a:	bf1a      	itte	ne
   d7d6c:	4619      	movne	r1, r3
   d7d6e:	4610      	movne	r0, r2
   d7d70:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d7d74:	bf1c      	itt	ne
   d7d76:	460b      	movne	r3, r1
   d7d78:	4602      	movne	r2, r0
   d7d7a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7d7e:	bf06      	itte	eq
   d7d80:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d7d84:	ea91 0f03 	teqeq	r1, r3
   d7d88:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d7d8c:	bd30      	pop	{r4, r5, pc}
   d7d8e:	bf00      	nop

000d7d90 <__aeabi_ui2d>:
   d7d90:	f090 0f00 	teq	r0, #0
   d7d94:	bf04      	itt	eq
   d7d96:	2100      	moveq	r1, #0
   d7d98:	4770      	bxeq	lr
   d7d9a:	b530      	push	{r4, r5, lr}
   d7d9c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7da0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7da4:	f04f 0500 	mov.w	r5, #0
   d7da8:	f04f 0100 	mov.w	r1, #0
   d7dac:	e750      	b.n	d7c50 <__adddf3+0x138>
   d7dae:	bf00      	nop

000d7db0 <__aeabi_i2d>:
   d7db0:	f090 0f00 	teq	r0, #0
   d7db4:	bf04      	itt	eq
   d7db6:	2100      	moveq	r1, #0
   d7db8:	4770      	bxeq	lr
   d7dba:	b530      	push	{r4, r5, lr}
   d7dbc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7dc0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7dc4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d7dc8:	bf48      	it	mi
   d7dca:	4240      	negmi	r0, r0
   d7dcc:	f04f 0100 	mov.w	r1, #0
   d7dd0:	e73e      	b.n	d7c50 <__adddf3+0x138>
   d7dd2:	bf00      	nop

000d7dd4 <__aeabi_f2d>:
   d7dd4:	0042      	lsls	r2, r0, #1
   d7dd6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d7dda:	ea4f 0131 	mov.w	r1, r1, rrx
   d7dde:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d7de2:	bf1f      	itttt	ne
   d7de4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d7de8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7dec:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d7df0:	4770      	bxne	lr
   d7df2:	f092 0f00 	teq	r2, #0
   d7df6:	bf14      	ite	ne
   d7df8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d7dfc:	4770      	bxeq	lr
   d7dfe:	b530      	push	{r4, r5, lr}
   d7e00:	f44f 7460 	mov.w	r4, #896	; 0x380
   d7e04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d7e08:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7e0c:	e720      	b.n	d7c50 <__adddf3+0x138>
   d7e0e:	bf00      	nop

000d7e10 <__aeabi_ul2d>:
   d7e10:	ea50 0201 	orrs.w	r2, r0, r1
   d7e14:	bf08      	it	eq
   d7e16:	4770      	bxeq	lr
   d7e18:	b530      	push	{r4, r5, lr}
   d7e1a:	f04f 0500 	mov.w	r5, #0
   d7e1e:	e00a      	b.n	d7e36 <__aeabi_l2d+0x16>

000d7e20 <__aeabi_l2d>:
   d7e20:	ea50 0201 	orrs.w	r2, r0, r1
   d7e24:	bf08      	it	eq
   d7e26:	4770      	bxeq	lr
   d7e28:	b530      	push	{r4, r5, lr}
   d7e2a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d7e2e:	d502      	bpl.n	d7e36 <__aeabi_l2d+0x16>
   d7e30:	4240      	negs	r0, r0
   d7e32:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d7e36:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d7e3a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d7e3e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d7e42:	f43f aedc 	beq.w	d7bfe <__adddf3+0xe6>
   d7e46:	f04f 0203 	mov.w	r2, #3
   d7e4a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7e4e:	bf18      	it	ne
   d7e50:	3203      	addne	r2, #3
   d7e52:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d7e56:	bf18      	it	ne
   d7e58:	3203      	addne	r2, #3
   d7e5a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d7e5e:	f1c2 0320 	rsb	r3, r2, #32
   d7e62:	fa00 fc03 	lsl.w	ip, r0, r3
   d7e66:	fa20 f002 	lsr.w	r0, r0, r2
   d7e6a:	fa01 fe03 	lsl.w	lr, r1, r3
   d7e6e:	ea40 000e 	orr.w	r0, r0, lr
   d7e72:	fa21 f102 	lsr.w	r1, r1, r2
   d7e76:	4414      	add	r4, r2
   d7e78:	e6c1      	b.n	d7bfe <__adddf3+0xe6>
   d7e7a:	bf00      	nop

000d7e7c <asctime>:
   d7e7c:	4b09      	ldr	r3, [pc, #36]	; (d7ea4 <asctime+0x28>)
   d7e7e:	b570      	push	{r4, r5, r6, lr}
   d7e80:	681c      	ldr	r4, [r3, #0]
   d7e82:	6c25      	ldr	r5, [r4, #64]	; 0x40
   d7e84:	4606      	mov	r6, r0
   d7e86:	b93d      	cbnz	r5, d7e98 <asctime+0x1c>
   d7e88:	201a      	movs	r0, #26
   d7e8a:	f7fd fa01 	bl	d5290 <malloc>
   d7e8e:	221a      	movs	r2, #26
   d7e90:	6420      	str	r0, [r4, #64]	; 0x40
   d7e92:	4629      	mov	r1, r5
   d7e94:	f000 fa04 	bl	d82a0 <memset>
   d7e98:	6c21      	ldr	r1, [r4, #64]	; 0x40
   d7e9a:	4630      	mov	r0, r6
   d7e9c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7ea0:	f000 b802 	b.w	d7ea8 <asctime_r>
   d7ea4:	2003e168 	.word	0x2003e168

000d7ea8 <asctime_r>:
   d7ea8:	b510      	push	{r4, lr}
   d7eaa:	460c      	mov	r4, r1
   d7eac:	6941      	ldr	r1, [r0, #20]
   d7eae:	6903      	ldr	r3, [r0, #16]
   d7eb0:	6982      	ldr	r2, [r0, #24]
   d7eb2:	b086      	sub	sp, #24
   d7eb4:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d7eb8:	9104      	str	r1, [sp, #16]
   d7eba:	6801      	ldr	r1, [r0, #0]
   d7ebc:	9103      	str	r1, [sp, #12]
   d7ebe:	6841      	ldr	r1, [r0, #4]
   d7ec0:	9102      	str	r1, [sp, #8]
   d7ec2:	6881      	ldr	r1, [r0, #8]
   d7ec4:	9101      	str	r1, [sp, #4]
   d7ec6:	68c1      	ldr	r1, [r0, #12]
   d7ec8:	9100      	str	r1, [sp, #0]
   d7eca:	4907      	ldr	r1, [pc, #28]	; (d7ee8 <asctime_r+0x40>)
   d7ecc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d7ed0:	440b      	add	r3, r1
   d7ed2:	4906      	ldr	r1, [pc, #24]	; (d7eec <asctime_r+0x44>)
   d7ed4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d7ed8:	440a      	add	r2, r1
   d7eda:	4620      	mov	r0, r4
   d7edc:	4904      	ldr	r1, [pc, #16]	; (d7ef0 <asctime_r+0x48>)
   d7ede:	f7fd f9ef 	bl	d52c0 <siprintf>
   d7ee2:	4620      	mov	r0, r4
   d7ee4:	b006      	add	sp, #24
   d7ee6:	bd10      	pop	{r4, pc}
   d7ee8:	000da022 	.word	0x000da022
   d7eec:	000da00d 	.word	0x000da00d
   d7ef0:	000da046 	.word	0x000da046

000d7ef4 <__cxa_atexit>:
   d7ef4:	b510      	push	{r4, lr}
   d7ef6:	4c05      	ldr	r4, [pc, #20]	; (d7f0c <__cxa_atexit+0x18>)
   d7ef8:	4613      	mov	r3, r2
   d7efa:	b12c      	cbz	r4, d7f08 <__cxa_atexit+0x14>
   d7efc:	460a      	mov	r2, r1
   d7efe:	4601      	mov	r1, r0
   d7f00:	2002      	movs	r0, #2
   d7f02:	f3af 8000 	nop.w
   d7f06:	bd10      	pop	{r4, pc}
   d7f08:	4620      	mov	r0, r4
   d7f0a:	bd10      	pop	{r4, pc}
   d7f0c:	00000000 	.word	0x00000000

000d7f10 <gmtime>:
   d7f10:	b538      	push	{r3, r4, r5, lr}
   d7f12:	4b07      	ldr	r3, [pc, #28]	; (d7f30 <gmtime+0x20>)
   d7f14:	681c      	ldr	r4, [r3, #0]
   d7f16:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d7f18:	4605      	mov	r5, r0
   d7f1a:	b91b      	cbnz	r3, d7f24 <gmtime+0x14>
   d7f1c:	2024      	movs	r0, #36	; 0x24
   d7f1e:	f7fd f9b7 	bl	d5290 <malloc>
   d7f22:	63e0      	str	r0, [r4, #60]	; 0x3c
   d7f24:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7f26:	4628      	mov	r0, r5
   d7f28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d7f2c:	f000 b802 	b.w	d7f34 <gmtime_r>
   d7f30:	2003e168 	.word	0x2003e168

000d7f34 <gmtime_r>:
   d7f34:	6802      	ldr	r2, [r0, #0]
   d7f36:	4b47      	ldr	r3, [pc, #284]	; (d8054 <gmtime_r+0x120>)
   d7f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7f3a:	fb92 f4f3 	sdiv	r4, r2, r3
   d7f3e:	fb03 2214 	mls	r2, r3, r4, r2
   d7f42:	2a00      	cmp	r2, #0
   d7f44:	bfbc      	itt	lt
   d7f46:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   d7f4a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   d7f4e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
   d7f52:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
   d7f56:	fb92 f3f0 	sdiv	r3, r2, r0
   d7f5a:	fb00 2213 	mls	r2, r0, r3, r2
   d7f5e:	f04f 003c 	mov.w	r0, #60	; 0x3c
   d7f62:	bfac      	ite	ge
   d7f64:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
   d7f68:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
   d7f6c:	608b      	str	r3, [r1, #8]
   d7f6e:	fb92 f3f0 	sdiv	r3, r2, r0
   d7f72:	fb00 2213 	mls	r2, r0, r3, r2
   d7f76:	604b      	str	r3, [r1, #4]
   d7f78:	600a      	str	r2, [r1, #0]
   d7f7a:	2307      	movs	r3, #7
   d7f7c:	1ce2      	adds	r2, r4, #3
   d7f7e:	fb92 f3f3 	sdiv	r3, r2, r3
   d7f82:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d7f86:	1ad3      	subs	r3, r2, r3
   d7f88:	618b      	str	r3, [r1, #24]
   d7f8a:	4b33      	ldr	r3, [pc, #204]	; (d8058 <gmtime_r+0x124>)
   d7f8c:	4d33      	ldr	r5, [pc, #204]	; (d805c <gmtime_r+0x128>)
   d7f8e:	fb94 f5f5 	sdiv	r5, r4, r5
   d7f92:	fb03 4405 	mla	r4, r3, r5, r4
   d7f96:	f648 62ac 	movw	r2, #36524	; 0x8eac
   d7f9a:	fbb4 f2f2 	udiv	r2, r4, r2
   d7f9e:	4422      	add	r2, r4
   d7fa0:	f240 57b4 	movw	r7, #1460	; 0x5b4
   d7fa4:	fbb4 f3f7 	udiv	r3, r4, r7
   d7fa8:	1ad2      	subs	r2, r2, r3
   d7faa:	482d      	ldr	r0, [pc, #180]	; (d8060 <gmtime_r+0x12c>)
   d7fac:	fbb4 f0f0 	udiv	r0, r4, r0
   d7fb0:	f648 6694 	movw	r6, #36500	; 0x8e94
   d7fb4:	1a13      	subs	r3, r2, r0
   d7fb6:	fbb3 f6f6 	udiv	r6, r3, r6
   d7fba:	4434      	add	r4, r6
   d7fbc:	f240 126d 	movw	r2, #365	; 0x16d
   d7fc0:	fbb3 f0f2 	udiv	r0, r3, r2
   d7fc4:	fbb3 f3f7 	udiv	r3, r3, r7
   d7fc8:	1ae3      	subs	r3, r4, r3
   d7fca:	fb02 3310 	mls	r3, r2, r0, r3
   d7fce:	2499      	movs	r4, #153	; 0x99
   d7fd0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   d7fd4:	3202      	adds	r2, #2
   d7fd6:	fbb2 f2f4 	udiv	r2, r2, r4
   d7fda:	2a0a      	cmp	r2, #10
   d7fdc:	fb04 f402 	mul.w	r4, r4, r2
   d7fe0:	f104 0602 	add.w	r6, r4, #2
   d7fe4:	f04f 0405 	mov.w	r4, #5
   d7fe8:	fbb6 f4f4 	udiv	r4, r6, r4
   d7fec:	bf34      	ite	cc
   d7fee:	2602      	movcc	r6, #2
   d7ff0:	f06f 0609 	mvncs.w	r6, #9
   d7ff4:	4416      	add	r6, r2
   d7ff6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d7ffa:	fb02 0505 	mla	r5, r2, r5, r0
   d7ffe:	1c5f      	adds	r7, r3, #1
   d8000:	2e01      	cmp	r6, #1
   d8002:	bf98      	it	ls
   d8004:	3501      	addls	r5, #1
   d8006:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   d800a:	eba7 0704 	sub.w	r7, r7, r4
   d800e:	d302      	bcc.n	d8016 <gmtime_r+0xe2>
   d8010:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
   d8014:	e014      	b.n	d8040 <gmtime_r+0x10c>
   d8016:	0782      	lsls	r2, r0, #30
   d8018:	d105      	bne.n	d8026 <gmtime_r+0xf2>
   d801a:	2464      	movs	r4, #100	; 0x64
   d801c:	fbb0 f2f4 	udiv	r2, r0, r4
   d8020:	fb04 0212 	mls	r2, r4, r2, r0
   d8024:	b94a      	cbnz	r2, d803a <gmtime_r+0x106>
   d8026:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d802a:	fbb0 f4f2 	udiv	r4, r0, r2
   d802e:	fb02 0014 	mls	r0, r2, r4, r0
   d8032:	fab0 f280 	clz	r2, r0
   d8036:	0952      	lsrs	r2, r2, #5
   d8038:	e000      	b.n	d803c <gmtime_r+0x108>
   d803a:	2201      	movs	r2, #1
   d803c:	333b      	adds	r3, #59	; 0x3b
   d803e:	441a      	add	r2, r3
   d8040:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
   d8044:	2300      	movs	r3, #0
   d8046:	61ca      	str	r2, [r1, #28]
   d8048:	614d      	str	r5, [r1, #20]
   d804a:	610e      	str	r6, [r1, #16]
   d804c:	60cf      	str	r7, [r1, #12]
   d804e:	620b      	str	r3, [r1, #32]
   d8050:	4608      	mov	r0, r1
   d8052:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8054:	00015180 	.word	0x00015180
   d8058:	fffdc54f 	.word	0xfffdc54f
   d805c:	00023ab1 	.word	0x00023ab1
   d8060:	00023ab0 	.word	0x00023ab0

000d8064 <localtime>:
   d8064:	b538      	push	{r3, r4, r5, lr}
   d8066:	4b07      	ldr	r3, [pc, #28]	; (d8084 <localtime+0x20>)
   d8068:	681c      	ldr	r4, [r3, #0]
   d806a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d806c:	4605      	mov	r5, r0
   d806e:	b91b      	cbnz	r3, d8078 <localtime+0x14>
   d8070:	2024      	movs	r0, #36	; 0x24
   d8072:	f7fd f90d 	bl	d5290 <malloc>
   d8076:	63e0      	str	r0, [r4, #60]	; 0x3c
   d8078:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d807a:	4628      	mov	r0, r5
   d807c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d8080:	f000 b802 	b.w	d8088 <localtime_r>
   d8084:	2003e168 	.word	0x2003e168

000d8088 <localtime_r>:
   d8088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d808c:	460c      	mov	r4, r1
   d808e:	4680      	mov	r8, r0
   d8090:	f001 fcba 	bl	d9a08 <__gettzinfo>
   d8094:	4621      	mov	r1, r4
   d8096:	4607      	mov	r7, r0
   d8098:	4640      	mov	r0, r8
   d809a:	f7ff ff4b 	bl	d7f34 <gmtime_r>
   d809e:	6946      	ldr	r6, [r0, #20]
   d80a0:	f206 766c 	addw	r6, r6, #1900	; 0x76c
   d80a4:	07b3      	lsls	r3, r6, #30
   d80a6:	4604      	mov	r4, r0
   d80a8:	d105      	bne.n	d80b6 <localtime_r+0x2e>
   d80aa:	2264      	movs	r2, #100	; 0x64
   d80ac:	fb96 f3f2 	sdiv	r3, r6, r2
   d80b0:	fb02 6313 	mls	r3, r2, r3, r6
   d80b4:	b94b      	cbnz	r3, d80ca <localtime_r+0x42>
   d80b6:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d80ba:	fb96 f3f5 	sdiv	r3, r6, r5
   d80be:	fb05 6513 	mls	r5, r5, r3, r6
   d80c2:	fab5 f385 	clz	r3, r5
   d80c6:	095b      	lsrs	r3, r3, #5
   d80c8:	e000      	b.n	d80cc <localtime_r+0x44>
   d80ca:	2301      	movs	r3, #1
   d80cc:	4a5f      	ldr	r2, [pc, #380]	; (d824c <localtime_r+0x1c4>)
   d80ce:	2530      	movs	r5, #48	; 0x30
   d80d0:	fb05 2503 	mla	r5, r5, r3, r2
   d80d4:	f001 fab4 	bl	d9640 <__tz_lock>
   d80d8:	f001 fab4 	bl	d9644 <_tzset_unlocked>
   d80dc:	4b5c      	ldr	r3, [pc, #368]	; (d8250 <localtime_r+0x1c8>)
   d80de:	681b      	ldr	r3, [r3, #0]
   d80e0:	b1f3      	cbz	r3, d8120 <localtime_r+0x98>
   d80e2:	687b      	ldr	r3, [r7, #4]
   d80e4:	429e      	cmp	r6, r3
   d80e6:	d105      	bne.n	d80f4 <localtime_r+0x6c>
   d80e8:	6839      	ldr	r1, [r7, #0]
   d80ea:	f8d8 3000 	ldr.w	r3, [r8]
   d80ee:	69fa      	ldr	r2, [r7, #28]
   d80f0:	b941      	cbnz	r1, d8104 <localtime_r+0x7c>
   d80f2:	e00a      	b.n	d810a <localtime_r+0x82>
   d80f4:	4630      	mov	r0, r6
   d80f6:	f001 f9fb 	bl	d94f0 <__tzcalc_limits>
   d80fa:	2800      	cmp	r0, #0
   d80fc:	d1f4      	bne.n	d80e8 <localtime_r+0x60>
   d80fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d8102:	e00d      	b.n	d8120 <localtime_r+0x98>
   d8104:	4293      	cmp	r3, r2
   d8106:	db08      	blt.n	d811a <localtime_r+0x92>
   d8108:	e001      	b.n	d810e <localtime_r+0x86>
   d810a:	4293      	cmp	r3, r2
   d810c:	da07      	bge.n	d811e <localtime_r+0x96>
   d810e:	6bba      	ldr	r2, [r7, #56]	; 0x38
   d8110:	4293      	cmp	r3, r2
   d8112:	bfac      	ite	ge
   d8114:	2300      	movge	r3, #0
   d8116:	2301      	movlt	r3, #1
   d8118:	e002      	b.n	d8120 <localtime_r+0x98>
   d811a:	2300      	movs	r3, #0
   d811c:	e000      	b.n	d8120 <localtime_r+0x98>
   d811e:	2301      	movs	r3, #1
   d8120:	6223      	str	r3, [r4, #32]
   d8122:	6a23      	ldr	r3, [r4, #32]
   d8124:	2b01      	cmp	r3, #1
   d8126:	bf0c      	ite	eq
   d8128:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
   d812a:	6a39      	ldrne	r1, [r7, #32]
   d812c:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d8130:	203c      	movs	r0, #60	; 0x3c
   d8132:	fb91 f6f3 	sdiv	r6, r1, r3
   d8136:	fb03 1316 	mls	r3, r3, r6, r1
   d813a:	6861      	ldr	r1, [r4, #4]
   d813c:	fb93 f2f0 	sdiv	r2, r3, r0
   d8140:	fb00 3012 	mls	r0, r0, r2, r3
   d8144:	6823      	ldr	r3, [r4, #0]
   d8146:	1a89      	subs	r1, r1, r2
   d8148:	68a2      	ldr	r2, [r4, #8]
   d814a:	6061      	str	r1, [r4, #4]
   d814c:	1a1b      	subs	r3, r3, r0
   d814e:	1b92      	subs	r2, r2, r6
   d8150:	2b3b      	cmp	r3, #59	; 0x3b
   d8152:	6023      	str	r3, [r4, #0]
   d8154:	60a2      	str	r2, [r4, #8]
   d8156:	dd03      	ble.n	d8160 <localtime_r+0xd8>
   d8158:	3101      	adds	r1, #1
   d815a:	6061      	str	r1, [r4, #4]
   d815c:	3b3c      	subs	r3, #60	; 0x3c
   d815e:	e004      	b.n	d816a <localtime_r+0xe2>
   d8160:	2b00      	cmp	r3, #0
   d8162:	da03      	bge.n	d816c <localtime_r+0xe4>
   d8164:	3901      	subs	r1, #1
   d8166:	6061      	str	r1, [r4, #4]
   d8168:	333c      	adds	r3, #60	; 0x3c
   d816a:	6023      	str	r3, [r4, #0]
   d816c:	6863      	ldr	r3, [r4, #4]
   d816e:	2b3b      	cmp	r3, #59	; 0x3b
   d8170:	dd03      	ble.n	d817a <localtime_r+0xf2>
   d8172:	3201      	adds	r2, #1
   d8174:	60a2      	str	r2, [r4, #8]
   d8176:	3b3c      	subs	r3, #60	; 0x3c
   d8178:	e004      	b.n	d8184 <localtime_r+0xfc>
   d817a:	2b00      	cmp	r3, #0
   d817c:	da03      	bge.n	d8186 <localtime_r+0xfe>
   d817e:	3a01      	subs	r2, #1
   d8180:	60a2      	str	r2, [r4, #8]
   d8182:	333c      	adds	r3, #60	; 0x3c
   d8184:	6063      	str	r3, [r4, #4]
   d8186:	68a3      	ldr	r3, [r4, #8]
   d8188:	2b17      	cmp	r3, #23
   d818a:	dd22      	ble.n	d81d2 <localtime_r+0x14a>
   d818c:	69e2      	ldr	r2, [r4, #28]
   d818e:	3201      	adds	r2, #1
   d8190:	61e2      	str	r2, [r4, #28]
   d8192:	69a2      	ldr	r2, [r4, #24]
   d8194:	3201      	adds	r2, #1
   d8196:	2a06      	cmp	r2, #6
   d8198:	bfc8      	it	gt
   d819a:	2200      	movgt	r2, #0
   d819c:	61a2      	str	r2, [r4, #24]
   d819e:	68e2      	ldr	r2, [r4, #12]
   d81a0:	3b18      	subs	r3, #24
   d81a2:	3201      	adds	r2, #1
   d81a4:	60a3      	str	r3, [r4, #8]
   d81a6:	6923      	ldr	r3, [r4, #16]
   d81a8:	60e2      	str	r2, [r4, #12]
   d81aa:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
   d81ae:	428a      	cmp	r2, r1
   d81b0:	dd46      	ble.n	d8240 <localtime_r+0x1b8>
   d81b2:	3301      	adds	r3, #1
   d81b4:	2b0c      	cmp	r3, #12
   d81b6:	bf0c      	ite	eq
   d81b8:	6963      	ldreq	r3, [r4, #20]
   d81ba:	6123      	strne	r3, [r4, #16]
   d81bc:	eba2 0201 	sub.w	r2, r2, r1
   d81c0:	60e2      	str	r2, [r4, #12]
   d81c2:	bf01      	itttt	eq
   d81c4:	3301      	addeq	r3, #1
   d81c6:	2200      	moveq	r2, #0
   d81c8:	6122      	streq	r2, [r4, #16]
   d81ca:	6163      	streq	r3, [r4, #20]
   d81cc:	bf08      	it	eq
   d81ce:	61e2      	streq	r2, [r4, #28]
   d81d0:	e036      	b.n	d8240 <localtime_r+0x1b8>
   d81d2:	2b00      	cmp	r3, #0
   d81d4:	da34      	bge.n	d8240 <localtime_r+0x1b8>
   d81d6:	69e2      	ldr	r2, [r4, #28]
   d81d8:	3a01      	subs	r2, #1
   d81da:	61e2      	str	r2, [r4, #28]
   d81dc:	69a2      	ldr	r2, [r4, #24]
   d81de:	3a01      	subs	r2, #1
   d81e0:	bf48      	it	mi
   d81e2:	2206      	movmi	r2, #6
   d81e4:	61a2      	str	r2, [r4, #24]
   d81e6:	68e2      	ldr	r2, [r4, #12]
   d81e8:	3318      	adds	r3, #24
   d81ea:	3a01      	subs	r2, #1
   d81ec:	60e2      	str	r2, [r4, #12]
   d81ee:	60a3      	str	r3, [r4, #8]
   d81f0:	bb32      	cbnz	r2, d8240 <localtime_r+0x1b8>
   d81f2:	6923      	ldr	r3, [r4, #16]
   d81f4:	3b01      	subs	r3, #1
   d81f6:	d401      	bmi.n	d81fc <localtime_r+0x174>
   d81f8:	6123      	str	r3, [r4, #16]
   d81fa:	e01d      	b.n	d8238 <localtime_r+0x1b0>
   d81fc:	230b      	movs	r3, #11
   d81fe:	6123      	str	r3, [r4, #16]
   d8200:	6963      	ldr	r3, [r4, #20]
   d8202:	1e5a      	subs	r2, r3, #1
   d8204:	f012 0f03 	tst.w	r2, #3
   d8208:	6162      	str	r2, [r4, #20]
   d820a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d820e:	d105      	bne.n	d821c <localtime_r+0x194>
   d8210:	2164      	movs	r1, #100	; 0x64
   d8212:	fb93 f2f1 	sdiv	r2, r3, r1
   d8216:	fb01 3212 	mls	r2, r1, r2, r3
   d821a:	b94a      	cbnz	r2, d8230 <localtime_r+0x1a8>
   d821c:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d8220:	fb93 f2f1 	sdiv	r2, r3, r1
   d8224:	fb01 3312 	mls	r3, r1, r2, r3
   d8228:	fab3 f383 	clz	r3, r3
   d822c:	095b      	lsrs	r3, r3, #5
   d822e:	e000      	b.n	d8232 <localtime_r+0x1aa>
   d8230:	2301      	movs	r3, #1
   d8232:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
   d8236:	61e3      	str	r3, [r4, #28]
   d8238:	6923      	ldr	r3, [r4, #16]
   d823a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
   d823e:	60e3      	str	r3, [r4, #12]
   d8240:	f001 f9ff 	bl	d9642 <__tz_unlock>
   d8244:	4620      	mov	r0, r4
   d8246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d824a:	bf00      	nop
   d824c:	000da22c 	.word	0x000da22c
   d8250:	2003e7e4 	.word	0x2003e7e4

000d8254 <memcpy>:
   d8254:	b510      	push	{r4, lr}
   d8256:	1e43      	subs	r3, r0, #1
   d8258:	440a      	add	r2, r1
   d825a:	4291      	cmp	r1, r2
   d825c:	d004      	beq.n	d8268 <memcpy+0x14>
   d825e:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8262:	f803 4f01 	strb.w	r4, [r3, #1]!
   d8266:	e7f8      	b.n	d825a <memcpy+0x6>
   d8268:	bd10      	pop	{r4, pc}

000d826a <memmove>:
   d826a:	4288      	cmp	r0, r1
   d826c:	b510      	push	{r4, lr}
   d826e:	eb01 0302 	add.w	r3, r1, r2
   d8272:	d801      	bhi.n	d8278 <memmove+0xe>
   d8274:	1e42      	subs	r2, r0, #1
   d8276:	e00b      	b.n	d8290 <memmove+0x26>
   d8278:	4298      	cmp	r0, r3
   d827a:	d2fb      	bcs.n	d8274 <memmove+0xa>
   d827c:	1881      	adds	r1, r0, r2
   d827e:	1ad2      	subs	r2, r2, r3
   d8280:	42d3      	cmn	r3, r2
   d8282:	d004      	beq.n	d828e <memmove+0x24>
   d8284:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d8288:	f801 4d01 	strb.w	r4, [r1, #-1]!
   d828c:	e7f8      	b.n	d8280 <memmove+0x16>
   d828e:	bd10      	pop	{r4, pc}
   d8290:	4299      	cmp	r1, r3
   d8292:	d004      	beq.n	d829e <memmove+0x34>
   d8294:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8298:	f802 4f01 	strb.w	r4, [r2, #1]!
   d829c:	e7f8      	b.n	d8290 <memmove+0x26>
   d829e:	bd10      	pop	{r4, pc}

000d82a0 <memset>:
   d82a0:	4402      	add	r2, r0
   d82a2:	4603      	mov	r3, r0
   d82a4:	4293      	cmp	r3, r2
   d82a6:	d002      	beq.n	d82ae <memset+0xe>
   d82a8:	f803 1b01 	strb.w	r1, [r3], #1
   d82ac:	e7fa      	b.n	d82a4 <memset+0x4>
   d82ae:	4770      	bx	lr

000d82b0 <validate_structure>:
   d82b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d82b2:	6801      	ldr	r1, [r0, #0]
   d82b4:	293b      	cmp	r1, #59	; 0x3b
   d82b6:	4604      	mov	r4, r0
   d82b8:	d911      	bls.n	d82de <validate_structure+0x2e>
   d82ba:	223c      	movs	r2, #60	; 0x3c
   d82bc:	4668      	mov	r0, sp
   d82be:	f001 fb4b 	bl	d9958 <div>
   d82c2:	9a01      	ldr	r2, [sp, #4]
   d82c4:	6863      	ldr	r3, [r4, #4]
   d82c6:	9900      	ldr	r1, [sp, #0]
   d82c8:	2a00      	cmp	r2, #0
   d82ca:	440b      	add	r3, r1
   d82cc:	6063      	str	r3, [r4, #4]
   d82ce:	bfbb      	ittet	lt
   d82d0:	323c      	addlt	r2, #60	; 0x3c
   d82d2:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d82d6:	6022      	strge	r2, [r4, #0]
   d82d8:	6022      	strlt	r2, [r4, #0]
   d82da:	bfb8      	it	lt
   d82dc:	6063      	strlt	r3, [r4, #4]
   d82de:	6861      	ldr	r1, [r4, #4]
   d82e0:	293b      	cmp	r1, #59	; 0x3b
   d82e2:	d911      	bls.n	d8308 <validate_structure+0x58>
   d82e4:	223c      	movs	r2, #60	; 0x3c
   d82e6:	4668      	mov	r0, sp
   d82e8:	f001 fb36 	bl	d9958 <div>
   d82ec:	9a01      	ldr	r2, [sp, #4]
   d82ee:	68a1      	ldr	r1, [r4, #8]
   d82f0:	9b00      	ldr	r3, [sp, #0]
   d82f2:	2a00      	cmp	r2, #0
   d82f4:	440b      	add	r3, r1
   d82f6:	60a3      	str	r3, [r4, #8]
   d82f8:	bfbb      	ittet	lt
   d82fa:	323c      	addlt	r2, #60	; 0x3c
   d82fc:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d8300:	6062      	strge	r2, [r4, #4]
   d8302:	6062      	strlt	r2, [r4, #4]
   d8304:	bfb8      	it	lt
   d8306:	60a3      	strlt	r3, [r4, #8]
   d8308:	68a1      	ldr	r1, [r4, #8]
   d830a:	2917      	cmp	r1, #23
   d830c:	d911      	bls.n	d8332 <validate_structure+0x82>
   d830e:	2218      	movs	r2, #24
   d8310:	4668      	mov	r0, sp
   d8312:	f001 fb21 	bl	d9958 <div>
   d8316:	9a01      	ldr	r2, [sp, #4]
   d8318:	68e1      	ldr	r1, [r4, #12]
   d831a:	9b00      	ldr	r3, [sp, #0]
   d831c:	2a00      	cmp	r2, #0
   d831e:	440b      	add	r3, r1
   d8320:	60e3      	str	r3, [r4, #12]
   d8322:	bfbb      	ittet	lt
   d8324:	3218      	addlt	r2, #24
   d8326:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d832a:	60a2      	strge	r2, [r4, #8]
   d832c:	60a2      	strlt	r2, [r4, #8]
   d832e:	bfb8      	it	lt
   d8330:	60e3      	strlt	r3, [r4, #12]
   d8332:	6921      	ldr	r1, [r4, #16]
   d8334:	290b      	cmp	r1, #11
   d8336:	d911      	bls.n	d835c <validate_structure+0xac>
   d8338:	220c      	movs	r2, #12
   d833a:	4668      	mov	r0, sp
   d833c:	f001 fb0c 	bl	d9958 <div>
   d8340:	9a01      	ldr	r2, [sp, #4]
   d8342:	6961      	ldr	r1, [r4, #20]
   d8344:	9b00      	ldr	r3, [sp, #0]
   d8346:	2a00      	cmp	r2, #0
   d8348:	440b      	add	r3, r1
   d834a:	6163      	str	r3, [r4, #20]
   d834c:	bfbb      	ittet	lt
   d834e:	320c      	addlt	r2, #12
   d8350:	f103 33ff 	addlt.w	r3, r3, #4294967295	; 0xffffffff
   d8354:	6122      	strge	r2, [r4, #16]
   d8356:	6122      	strlt	r2, [r4, #16]
   d8358:	bfb8      	it	lt
   d835a:	6163      	strlt	r3, [r4, #20]
   d835c:	6963      	ldr	r3, [r4, #20]
   d835e:	0799      	lsls	r1, r3, #30
   d8360:	d112      	bne.n	d8388 <validate_structure+0xd8>
   d8362:	2164      	movs	r1, #100	; 0x64
   d8364:	fb93 f2f1 	sdiv	r2, r3, r1
   d8368:	fb01 3212 	mls	r2, r1, r2, r3
   d836c:	b972      	cbnz	r2, d838c <validate_structure+0xdc>
   d836e:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   d8372:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d8376:	fb93 f2f1 	sdiv	r2, r3, r1
   d837a:	fb01 3312 	mls	r3, r1, r2, r3
   d837e:	2b00      	cmp	r3, #0
   d8380:	bf14      	ite	ne
   d8382:	231c      	movne	r3, #28
   d8384:	231d      	moveq	r3, #29
   d8386:	e002      	b.n	d838e <validate_structure+0xde>
   d8388:	231c      	movs	r3, #28
   d838a:	e000      	b.n	d838e <validate_structure+0xde>
   d838c:	231d      	movs	r3, #29
   d838e:	68e2      	ldr	r2, [r4, #12]
   d8390:	2a00      	cmp	r2, #0
   d8392:	dd06      	ble.n	d83a2 <validate_structure+0xf2>
   d8394:	4f33      	ldr	r7, [pc, #204]	; (d8464 <validate_structure+0x1b4>)
   d8396:	f04f 0e00 	mov.w	lr, #0
   d839a:	2564      	movs	r5, #100	; 0x64
   d839c:	f44f 76c8 	mov.w	r6, #400	; 0x190
   d83a0:	e039      	b.n	d8416 <validate_structure+0x166>
   d83a2:	4f30      	ldr	r7, [pc, #192]	; (d8464 <validate_structure+0x1b4>)
   d83a4:	260b      	movs	r6, #11
   d83a6:	2064      	movs	r0, #100	; 0x64
   d83a8:	f44f 75c8 	mov.w	r5, #400	; 0x190
   d83ac:	f8d4 e00c 	ldr.w	lr, [r4, #12]
   d83b0:	f1be 0f00 	cmp.w	lr, #0
   d83b4:	dc53      	bgt.n	d845e <validate_structure+0x1ae>
   d83b6:	6921      	ldr	r1, [r4, #16]
   d83b8:	3901      	subs	r1, #1
   d83ba:	6121      	str	r1, [r4, #16]
   d83bc:	3101      	adds	r1, #1
   d83be:	d118      	bne.n	d83f2 <validate_structure+0x142>
   d83c0:	6963      	ldr	r3, [r4, #20]
   d83c2:	6126      	str	r6, [r4, #16]
   d83c4:	1e59      	subs	r1, r3, #1
   d83c6:	078a      	lsls	r2, r1, #30
   d83c8:	6161      	str	r1, [r4, #20]
   d83ca:	d10f      	bne.n	d83ec <validate_structure+0x13c>
   d83cc:	fb91 f2f0 	sdiv	r2, r1, r0
   d83d0:	fb00 1112 	mls	r1, r0, r2, r1
   d83d4:	b961      	cbnz	r1, d83f0 <validate_structure+0x140>
   d83d6:	f203 736b 	addw	r3, r3, #1899	; 0x76b
   d83da:	fb93 f2f5 	sdiv	r2, r3, r5
   d83de:	fb05 3312 	mls	r3, r5, r2, r3
   d83e2:	2b00      	cmp	r3, #0
   d83e4:	bf14      	ite	ne
   d83e6:	231c      	movne	r3, #28
   d83e8:	231d      	moveq	r3, #29
   d83ea:	e002      	b.n	d83f2 <validate_structure+0x142>
   d83ec:	231c      	movs	r3, #28
   d83ee:	e000      	b.n	d83f2 <validate_structure+0x142>
   d83f0:	231d      	movs	r3, #29
   d83f2:	6922      	ldr	r2, [r4, #16]
   d83f4:	2a01      	cmp	r2, #1
   d83f6:	bf14      	ite	ne
   d83f8:	f857 2022 	ldrne.w	r2, [r7, r2, lsl #2]
   d83fc:	461a      	moveq	r2, r3
   d83fe:	4472      	add	r2, lr
   d8400:	60e2      	str	r2, [r4, #12]
   d8402:	e7d3      	b.n	d83ac <validate_structure+0xfc>
   d8404:	428b      	cmp	r3, r1
   d8406:	da2a      	bge.n	d845e <validate_structure+0x1ae>
   d8408:	4618      	mov	r0, r3
   d840a:	3201      	adds	r2, #1
   d840c:	1a09      	subs	r1, r1, r0
   d840e:	2a0c      	cmp	r2, #12
   d8410:	60e1      	str	r1, [r4, #12]
   d8412:	6122      	str	r2, [r4, #16]
   d8414:	d008      	beq.n	d8428 <validate_structure+0x178>
   d8416:	6922      	ldr	r2, [r4, #16]
   d8418:	68e1      	ldr	r1, [r4, #12]
   d841a:	2a01      	cmp	r2, #1
   d841c:	d0f2      	beq.n	d8404 <validate_structure+0x154>
   d841e:	f857 0022 	ldr.w	r0, [r7, r2, lsl #2]
   d8422:	4281      	cmp	r1, r0
   d8424:	dcf1      	bgt.n	d840a <validate_structure+0x15a>
   d8426:	e01a      	b.n	d845e <validate_structure+0x1ae>
   d8428:	6963      	ldr	r3, [r4, #20]
   d842a:	f8c4 e010 	str.w	lr, [r4, #16]
   d842e:	1c5a      	adds	r2, r3, #1
   d8430:	0791      	lsls	r1, r2, #30
   d8432:	6162      	str	r2, [r4, #20]
   d8434:	d10f      	bne.n	d8456 <validate_structure+0x1a6>
   d8436:	fb92 f1f5 	sdiv	r1, r2, r5
   d843a:	fb05 2211 	mls	r2, r5, r1, r2
   d843e:	b962      	cbnz	r2, d845a <validate_structure+0x1aa>
   d8440:	f203 736d 	addw	r3, r3, #1901	; 0x76d
   d8444:	fb93 f2f6 	sdiv	r2, r3, r6
   d8448:	fb06 3312 	mls	r3, r6, r2, r3
   d844c:	2b00      	cmp	r3, #0
   d844e:	bf14      	ite	ne
   d8450:	231c      	movne	r3, #28
   d8452:	231d      	moveq	r3, #29
   d8454:	e7df      	b.n	d8416 <validate_structure+0x166>
   d8456:	231c      	movs	r3, #28
   d8458:	e7dd      	b.n	d8416 <validate_structure+0x166>
   d845a:	231d      	movs	r3, #29
   d845c:	e7db      	b.n	d8416 <validate_structure+0x166>
   d845e:	b003      	add	sp, #12
   d8460:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8462:	bf00      	nop
   d8464:	000da1fc 	.word	0x000da1fc

000d8468 <mktime>:
   d8468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d846c:	4605      	mov	r5, r0
   d846e:	f001 facb 	bl	d9a08 <__gettzinfo>
   d8472:	4681      	mov	r9, r0
   d8474:	4628      	mov	r0, r5
   d8476:	f7ff ff1b 	bl	d82b0 <validate_structure>
   d847a:	e895 000c 	ldmia.w	r5, {r2, r3}
   d847e:	213c      	movs	r1, #60	; 0x3c
   d8480:	fb01 2303 	mla	r3, r1, r3, r2
   d8484:	68aa      	ldr	r2, [r5, #8]
   d8486:	68ec      	ldr	r4, [r5, #12]
   d8488:	f44f 6861 	mov.w	r8, #3600	; 0xe10
   d848c:	fb08 3102 	mla	r1, r8, r2, r3
   d8490:	692b      	ldr	r3, [r5, #16]
   d8492:	4aab      	ldr	r2, [pc, #684]	; (d8740 <mktime+0x2d8>)
   d8494:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   d8498:	3c01      	subs	r4, #1
   d849a:	2b01      	cmp	r3, #1
   d849c:	4414      	add	r4, r2
   d849e:	696b      	ldr	r3, [r5, #20]
   d84a0:	dd11      	ble.n	d84c6 <mktime+0x5e>
   d84a2:	079e      	lsls	r6, r3, #30
   d84a4:	d10f      	bne.n	d84c6 <mktime+0x5e>
   d84a6:	2064      	movs	r0, #100	; 0x64
   d84a8:	fb93 f2f0 	sdiv	r2, r3, r0
   d84ac:	fb00 3212 	mls	r2, r0, r2, r3
   d84b0:	b942      	cbnz	r2, d84c4 <mktime+0x5c>
   d84b2:	f203 766c 	addw	r6, r3, #1900	; 0x76c
   d84b6:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d84ba:	fb96 f0f2 	sdiv	r0, r6, r2
   d84be:	fb02 6210 	mls	r2, r2, r0, r6
   d84c2:	b902      	cbnz	r2, d84c6 <mktime+0x5e>
   d84c4:	3401      	adds	r4, #1
   d84c6:	f503 521c 	add.w	r2, r3, #9984	; 0x2700
   d84ca:	3210      	adds	r2, #16
   d84cc:	f644 6020 	movw	r0, #20000	; 0x4e20
   d84d0:	4282      	cmp	r2, r0
   d84d2:	61ec      	str	r4, [r5, #28]
   d84d4:	461f      	mov	r7, r3
   d84d6:	f200 812e 	bhi.w	d8736 <mktime+0x2ce>
   d84da:	2b46      	cmp	r3, #70	; 0x46
   d84dc:	dd22      	ble.n	d8524 <mktime+0xbc>
   d84de:	2246      	movs	r2, #70	; 0x46
   d84e0:	f240 1c6d 	movw	ip, #365	; 0x16d
   d84e4:	2664      	movs	r6, #100	; 0x64
   d84e6:	f44f 7ec8 	mov.w	lr, #400	; 0x190
   d84ea:	0790      	lsls	r0, r2, #30
   d84ec:	d110      	bne.n	d8510 <mktime+0xa8>
   d84ee:	fb92 f0f6 	sdiv	r0, r2, r6
   d84f2:	fb06 2010 	mls	r0, r6, r0, r2
   d84f6:	b970      	cbnz	r0, d8516 <mktime+0xae>
   d84f8:	f202 786c 	addw	r8, r2, #1900	; 0x76c
   d84fc:	fb98 f0fe 	sdiv	r0, r8, lr
   d8500:	fb0e 8010 	mls	r0, lr, r0, r8
   d8504:	2800      	cmp	r0, #0
   d8506:	bf14      	ite	ne
   d8508:	4660      	movne	r0, ip
   d850a:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   d850e:	e004      	b.n	d851a <mktime+0xb2>
   d8510:	f240 106d 	movw	r0, #365	; 0x16d
   d8514:	e001      	b.n	d851a <mktime+0xb2>
   d8516:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   d851a:	3201      	adds	r2, #1
   d851c:	4293      	cmp	r3, r2
   d851e:	4404      	add	r4, r0
   d8520:	d1e3      	bne.n	d84ea <mktime+0x82>
   d8522:	e044      	b.n	d85ae <mktime+0x146>
   d8524:	d043      	beq.n	d85ae <mktime+0x146>
   d8526:	2245      	movs	r2, #69	; 0x45
   d8528:	f240 1e6d 	movw	lr, #365	; 0x16d
   d852c:	2664      	movs	r6, #100	; 0x64
   d852e:	f44f 77c8 	mov.w	r7, #400	; 0x190
   d8532:	429a      	cmp	r2, r3
   d8534:	dd1a      	ble.n	d856c <mktime+0x104>
   d8536:	0790      	lsls	r0, r2, #30
   d8538:	d110      	bne.n	d855c <mktime+0xf4>
   d853a:	fb92 f0f6 	sdiv	r0, r2, r6
   d853e:	fb06 2010 	mls	r0, r6, r0, r2
   d8542:	b970      	cbnz	r0, d8562 <mktime+0xfa>
   d8544:	f202 7c6c 	addw	ip, r2, #1900	; 0x76c
   d8548:	fb9c f0f7 	sdiv	r0, ip, r7
   d854c:	fb07 c010 	mls	r0, r7, r0, ip
   d8550:	2800      	cmp	r0, #0
   d8552:	bf14      	ite	ne
   d8554:	4670      	movne	r0, lr
   d8556:	f44f 70b7 	moveq.w	r0, #366	; 0x16e
   d855a:	e004      	b.n	d8566 <mktime+0xfe>
   d855c:	f240 106d 	movw	r0, #365	; 0x16d
   d8560:	e001      	b.n	d8566 <mktime+0xfe>
   d8562:	f44f 70b7 	mov.w	r0, #366	; 0x16e
   d8566:	1a24      	subs	r4, r4, r0
   d8568:	3a01      	subs	r2, #1
   d856a:	e7e2      	b.n	d8532 <mktime+0xca>
   d856c:	2b45      	cmp	r3, #69	; 0x45
   d856e:	bfa8      	it	ge
   d8570:	2345      	movge	r3, #69	; 0x45
   d8572:	079e      	lsls	r6, r3, #30
   d8574:	461f      	mov	r7, r3
   d8576:	d114      	bne.n	d85a2 <mktime+0x13a>
   d8578:	2264      	movs	r2, #100	; 0x64
   d857a:	fb93 f3f2 	sdiv	r3, r3, r2
   d857e:	fb02 7313 	mls	r3, r2, r3, r7
   d8582:	b98b      	cbnz	r3, d85a8 <mktime+0x140>
   d8584:	f207 706c 	addw	r0, r7, #1900	; 0x76c
   d8588:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d858c:	fb90 f2f3 	sdiv	r2, r0, r3
   d8590:	fb03 0312 	mls	r3, r3, r2, r0
   d8594:	2b00      	cmp	r3, #0
   d8596:	f240 136d 	movw	r3, #365	; 0x16d
   d859a:	bf08      	it	eq
   d859c:	f44f 73b7 	moveq.w	r3, #366	; 0x16e
   d85a0:	e004      	b.n	d85ac <mktime+0x144>
   d85a2:	f240 136d 	movw	r3, #365	; 0x16d
   d85a6:	e001      	b.n	d85ac <mktime+0x144>
   d85a8:	f44f 73b7 	mov.w	r3, #366	; 0x16e
   d85ac:	1ae4      	subs	r4, r4, r3
   d85ae:	4865      	ldr	r0, [pc, #404]	; (d8744 <mktime+0x2dc>)
   d85b0:	fb00 1804 	mla	r8, r0, r4, r1
   d85b4:	f001 f844 	bl	d9640 <__tz_lock>
   d85b8:	f001 f844 	bl	d9644 <_tzset_unlocked>
   d85bc:	4b62      	ldr	r3, [pc, #392]	; (d8748 <mktime+0x2e0>)
   d85be:	681e      	ldr	r6, [r3, #0]
   d85c0:	2e00      	cmp	r6, #0
   d85c2:	f000 80a4 	beq.w	d870e <mktime+0x2a6>
   d85c6:	6a2b      	ldr	r3, [r5, #32]
   d85c8:	6968      	ldr	r0, [r5, #20]
   d85ca:	2b01      	cmp	r3, #1
   d85cc:	bfa8      	it	ge
   d85ce:	2301      	movge	r3, #1
   d85d0:	469a      	mov	sl, r3
   d85d2:	f8d9 3004 	ldr.w	r3, [r9, #4]
   d85d6:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d85da:	4298      	cmp	r0, r3
   d85dc:	d10d      	bne.n	d85fa <mktime+0x192>
   d85de:	f8d9 2038 	ldr.w	r2, [r9, #56]	; 0x38
   d85e2:	f8d9 3020 	ldr.w	r3, [r9, #32]
   d85e6:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   d85ea:	f8d9 101c 	ldr.w	r1, [r9, #28]
   d85ee:	1ad6      	subs	r6, r2, r3
   d85f0:	45b0      	cmp	r8, r6
   d85f2:	eba1 0100 	sub.w	r1, r1, r0
   d85f6:	da05      	bge.n	d8604 <mktime+0x19c>
   d85f8:	e007      	b.n	d860a <mktime+0x1a2>
   d85fa:	f000 ff79 	bl	d94f0 <__tzcalc_limits>
   d85fe:	2800      	cmp	r0, #0
   d8600:	d1ed      	bne.n	d85de <mktime+0x176>
   d8602:	e076      	b.n	d86f2 <mktime+0x28a>
   d8604:	1a12      	subs	r2, r2, r0
   d8606:	4590      	cmp	r8, r2
   d8608:	db73      	blt.n	d86f2 <mktime+0x28a>
   d860a:	f8d9 2000 	ldr.w	r2, [r9]
   d860e:	b112      	cbz	r2, d8616 <mktime+0x1ae>
   d8610:	4588      	cmp	r8, r1
   d8612:	db77      	blt.n	d8704 <mktime+0x29c>
   d8614:	e001      	b.n	d861a <mktime+0x1b2>
   d8616:	4588      	cmp	r8, r1
   d8618:	da07      	bge.n	d862a <mktime+0x1c2>
   d861a:	45b0      	cmp	r8, r6
   d861c:	bfac      	ite	ge
   d861e:	2600      	movge	r6, #0
   d8620:	2601      	movlt	r6, #1
   d8622:	f1ba 0f00 	cmp.w	sl, #0
   d8626:	da04      	bge.n	d8632 <mktime+0x1ca>
   d8628:	e064      	b.n	d86f4 <mktime+0x28c>
   d862a:	f1ba 0f00 	cmp.w	sl, #0
   d862e:	db63      	blt.n	d86f8 <mktime+0x290>
   d8630:	2601      	movs	r6, #1
   d8632:	ea8a 0a06 	eor.w	sl, sl, r6
   d8636:	f1ba 0f01 	cmp.w	sl, #1
   d863a:	d15b      	bne.n	d86f4 <mktime+0x28c>
   d863c:	1a1b      	subs	r3, r3, r0
   d863e:	b906      	cbnz	r6, d8642 <mktime+0x1da>
   d8640:	425b      	negs	r3, r3
   d8642:	682a      	ldr	r2, [r5, #0]
   d8644:	f8d5 a00c 	ldr.w	sl, [r5, #12]
   d8648:	441a      	add	r2, r3
   d864a:	602a      	str	r2, [r5, #0]
   d864c:	4628      	mov	r0, r5
   d864e:	4498      	add	r8, r3
   d8650:	f7ff fe2e 	bl	d82b0 <validate_structure>
   d8654:	68eb      	ldr	r3, [r5, #12]
   d8656:	ebb3 030a 	subs.w	r3, r3, sl
   d865a:	d04b      	beq.n	d86f4 <mktime+0x28c>
   d865c:	2b01      	cmp	r3, #1
   d865e:	dc03      	bgt.n	d8668 <mktime+0x200>
   d8660:	1c98      	adds	r0, r3, #2
   d8662:	bfd8      	it	le
   d8664:	2301      	movle	r3, #1
   d8666:	e001      	b.n	d866c <mktime+0x204>
   d8668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d866c:	69ea      	ldr	r2, [r5, #28]
   d866e:	441c      	add	r4, r3
   d8670:	189b      	adds	r3, r3, r2
   d8672:	d51d      	bpl.n	d86b0 <mktime+0x248>
   d8674:	1e7b      	subs	r3, r7, #1
   d8676:	0799      	lsls	r1, r3, #30
   d8678:	d114      	bne.n	d86a4 <mktime+0x23c>
   d867a:	2164      	movs	r1, #100	; 0x64
   d867c:	fb93 f2f1 	sdiv	r2, r3, r1
   d8680:	fb01 3312 	mls	r3, r1, r2, r3
   d8684:	b98b      	cbnz	r3, d86aa <mktime+0x242>
   d8686:	f207 776b 	addw	r7, r7, #1899	; 0x76b
   d868a:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d868e:	fb97 f3f2 	sdiv	r3, r7, r2
   d8692:	fb02 7713 	mls	r7, r2, r3, r7
   d8696:	2f00      	cmp	r7, #0
   d8698:	f240 136d 	movw	r3, #365	; 0x16d
   d869c:	bf18      	it	ne
   d869e:	f44f 73b6 	movne.w	r3, #364	; 0x16c
   d86a2:	e024      	b.n	d86ee <mktime+0x286>
   d86a4:	f44f 73b6 	mov.w	r3, #364	; 0x16c
   d86a8:	e021      	b.n	d86ee <mktime+0x286>
   d86aa:	f240 136d 	movw	r3, #365	; 0x16d
   d86ae:	e01e      	b.n	d86ee <mktime+0x286>
   d86b0:	07ba      	lsls	r2, r7, #30
   d86b2:	d114      	bne.n	d86de <mktime+0x276>
   d86b4:	2164      	movs	r1, #100	; 0x64
   d86b6:	fb97 f2f1 	sdiv	r2, r7, r1
   d86ba:	fb01 7212 	mls	r2, r1, r2, r7
   d86be:	b98a      	cbnz	r2, d86e4 <mktime+0x27c>
   d86c0:	f207 776c 	addw	r7, r7, #1900	; 0x76c
   d86c4:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d86c8:	fb97 f2f1 	sdiv	r2, r7, r1
   d86cc:	fb01 7712 	mls	r7, r1, r2, r7
   d86d0:	2f00      	cmp	r7, #0
   d86d2:	f240 126d 	movw	r2, #365	; 0x16d
   d86d6:	bf08      	it	eq
   d86d8:	f44f 72b7 	moveq.w	r2, #366	; 0x16e
   d86dc:	e004      	b.n	d86e8 <mktime+0x280>
   d86de:	f240 126d 	movw	r2, #365	; 0x16d
   d86e2:	e001      	b.n	d86e8 <mktime+0x280>
   d86e4:	f44f 72b7 	mov.w	r2, #366	; 0x16e
   d86e8:	429a      	cmp	r2, r3
   d86ea:	bfd8      	it	le
   d86ec:	1a9b      	suble	r3, r3, r2
   d86ee:	61eb      	str	r3, [r5, #28]
   d86f0:	e000      	b.n	d86f4 <mktime+0x28c>
   d86f2:	4656      	mov	r6, sl
   d86f4:	2e01      	cmp	r6, #1
   d86f6:	d10a      	bne.n	d870e <mktime+0x2a6>
   d86f8:	f8d9 003c 	ldr.w	r0, [r9, #60]	; 0x3c
   d86fc:	2601      	movs	r6, #1
   d86fe:	eb08 0700 	add.w	r7, r8, r0
   d8702:	e008      	b.n	d8716 <mktime+0x2ae>
   d8704:	f1ba 0f00 	cmp.w	sl, #0
   d8708:	f04f 0600 	mov.w	r6, #0
   d870c:	da91      	bge.n	d8632 <mktime+0x1ca>
   d870e:	f8d9 0020 	ldr.w	r0, [r9, #32]
   d8712:	eb08 0700 	add.w	r7, r8, r0
   d8716:	f000 ff94 	bl	d9642 <__tz_unlock>
   d871a:	3404      	adds	r4, #4
   d871c:	2307      	movs	r3, #7
   d871e:	fb94 f3f3 	sdiv	r3, r4, r3
   d8722:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d8726:	1ae4      	subs	r4, r4, r3
   d8728:	bf48      	it	mi
   d872a:	3407      	addmi	r4, #7
   d872c:	622e      	str	r6, [r5, #32]
   d872e:	61ac      	str	r4, [r5, #24]
   d8730:	4638      	mov	r0, r7
   d8732:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d8736:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d873a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d873e:	bf00      	nop
   d8740:	000da1cc 	.word	0x000da1cc
   d8744:	00015180 	.word	0x00015180
   d8748:	2003e7e4 	.word	0x2003e7e4

000d874c <srand>:
   d874c:	b538      	push	{r3, r4, r5, lr}
   d874e:	4b12      	ldr	r3, [pc, #72]	; (d8798 <srand+0x4c>)
   d8750:	681c      	ldr	r4, [r3, #0]
   d8752:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8754:	4605      	mov	r5, r0
   d8756:	b9d3      	cbnz	r3, d878e <srand+0x42>
   d8758:	2018      	movs	r0, #24
   d875a:	f7fc fd99 	bl	d5290 <malloc>
   d875e:	f243 330e 	movw	r3, #13070	; 0x330e
   d8762:	63a0      	str	r0, [r4, #56]	; 0x38
   d8764:	8003      	strh	r3, [r0, #0]
   d8766:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d876a:	8043      	strh	r3, [r0, #2]
   d876c:	f241 2334 	movw	r3, #4660	; 0x1234
   d8770:	8083      	strh	r3, [r0, #4]
   d8772:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d8776:	80c3      	strh	r3, [r0, #6]
   d8778:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d877c:	8103      	strh	r3, [r0, #8]
   d877e:	2305      	movs	r3, #5
   d8780:	8143      	strh	r3, [r0, #10]
   d8782:	230b      	movs	r3, #11
   d8784:	8183      	strh	r3, [r0, #12]
   d8786:	2201      	movs	r2, #1
   d8788:	2300      	movs	r3, #0
   d878a:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d878e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d8790:	2200      	movs	r2, #0
   d8792:	611d      	str	r5, [r3, #16]
   d8794:	615a      	str	r2, [r3, #20]
   d8796:	bd38      	pop	{r3, r4, r5, pc}
   d8798:	2003e168 	.word	0x2003e168

000d879c <strchr>:
   d879c:	b2c9      	uxtb	r1, r1
   d879e:	4603      	mov	r3, r0
   d87a0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d87a4:	b11a      	cbz	r2, d87ae <strchr+0x12>
   d87a6:	4291      	cmp	r1, r2
   d87a8:	d1f9      	bne.n	d879e <strchr+0x2>
   d87aa:	4618      	mov	r0, r3
   d87ac:	4770      	bx	lr
   d87ae:	2900      	cmp	r1, #0
   d87b0:	bf0c      	ite	eq
   d87b2:	4618      	moveq	r0, r3
   d87b4:	2000      	movne	r0, #0
   d87b6:	4770      	bx	lr

000d87b8 <strchrnul>:
   d87b8:	b510      	push	{r4, lr}
   d87ba:	4604      	mov	r4, r0
   d87bc:	f7ff ffee 	bl	d879c <strchr>
   d87c0:	b918      	cbnz	r0, d87ca <strchrnul+0x12>
   d87c2:	4620      	mov	r0, r4
   d87c4:	f000 fd28 	bl	d9218 <strlen>
   d87c8:	4420      	add	r0, r4
   d87ca:	bd10      	pop	{r4, pc}

000d87cc <strcmp>:
   d87cc:	f810 2b01 	ldrb.w	r2, [r0], #1
   d87d0:	f811 3b01 	ldrb.w	r3, [r1], #1
   d87d4:	2a01      	cmp	r2, #1
   d87d6:	bf28      	it	cs
   d87d8:	429a      	cmpcs	r2, r3
   d87da:	d0f7      	beq.n	d87cc <strcmp>
   d87dc:	1ad0      	subs	r0, r2, r3
   d87de:	4770      	bx	lr

000d87e0 <strcpy>:
   d87e0:	4603      	mov	r3, r0
   d87e2:	f811 2b01 	ldrb.w	r2, [r1], #1
   d87e6:	f803 2b01 	strb.w	r2, [r3], #1
   d87ea:	2a00      	cmp	r2, #0
   d87ec:	d1f9      	bne.n	d87e2 <strcpy+0x2>
   d87ee:	4770      	bx	lr

000d87f0 <iso_year_adjust>:
   d87f0:	6941      	ldr	r1, [r0, #20]
   d87f2:	078b      	lsls	r3, r1, #30
   d87f4:	b510      	push	{r4, lr}
   d87f6:	d10c      	bne.n	d8812 <iso_year_adjust+0x22>
   d87f8:	2900      	cmp	r1, #0
   d87fa:	f240 736c 	movw	r3, #1900	; 0x76c
   d87fe:	bfa8      	it	ge
   d8800:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   d8804:	440b      	add	r3, r1
   d8806:	2464      	movs	r4, #100	; 0x64
   d8808:	fb93 f2f4 	sdiv	r2, r3, r4
   d880c:	fb04 3312 	mls	r3, r4, r2, r3
   d8810:	b983      	cbnz	r3, d8834 <iso_year_adjust+0x44>
   d8812:	2900      	cmp	r1, #0
   d8814:	f240 736c 	movw	r3, #1900	; 0x76c
   d8818:	bfa8      	it	ge
   d881a:	f06f 0363 	mvnge.w	r3, #99	; 0x63
   d881e:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d8822:	440b      	add	r3, r1
   d8824:	fb93 f1f2 	sdiv	r1, r3, r2
   d8828:	fb02 3311 	mls	r3, r2, r1, r3
   d882c:	fab3 f283 	clz	r2, r3
   d8830:	0952      	lsrs	r2, r2, #5
   d8832:	e000      	b.n	d8836 <iso_year_adjust+0x46>
   d8834:	2201      	movs	r2, #1
   d8836:	6983      	ldr	r3, [r0, #24]
   d8838:	69c1      	ldr	r1, [r0, #28]
   d883a:	005b      	lsls	r3, r3, #1
   d883c:	eb03 1301 	add.w	r3, r3, r1, lsl #4
   d8840:	4413      	add	r3, r2
   d8842:	2b21      	cmp	r3, #33	; 0x21
   d8844:	dc0e      	bgt.n	d8864 <iso_year_adjust+0x74>
   d8846:	2b20      	cmp	r3, #32
   d8848:	da2f      	bge.n	d88aa <iso_year_adjust+0xba>
   d884a:	2b0d      	cmp	r3, #13
   d884c:	dc02      	bgt.n	d8854 <iso_year_adjust+0x64>
   d884e:	2b0a      	cmp	r3, #10
   d8850:	db05      	blt.n	d885e <iso_year_adjust+0x6e>
   d8852:	e02a      	b.n	d88aa <iso_year_adjust+0xba>
   d8854:	2b10      	cmp	r3, #16
   d8856:	db26      	blt.n	d88a6 <iso_year_adjust+0xb6>
   d8858:	2b11      	cmp	r3, #17
   d885a:	dd26      	ble.n	d88aa <iso_year_adjust+0xba>
   d885c:	3b1c      	subs	r3, #28
   d885e:	2b01      	cmp	r3, #1
   d8860:	d923      	bls.n	d88aa <iso_year_adjust+0xba>
   d8862:	e020      	b.n	d88a6 <iso_year_adjust+0xb6>
   d8864:	f241 62c6 	movw	r2, #5830	; 0x16c6
   d8868:	4293      	cmp	r3, r2
   d886a:	dc0e      	bgt.n	d888a <iso_year_adjust+0x9a>
   d886c:	f241 62c2 	movw	r2, #5826	; 0x16c2
   d8870:	4293      	cmp	r3, r2
   d8872:	da16      	bge.n	d88a2 <iso_year_adjust+0xb2>
   d8874:	f241 62a2 	movw	r2, #5794	; 0x16a2
   d8878:	4293      	cmp	r3, r2
   d887a:	d012      	beq.n	d88a2 <iso_year_adjust+0xb2>
   d887c:	db13      	blt.n	d88a6 <iso_year_adjust+0xb6>
   d887e:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
   d8882:	3b12      	subs	r3, #18
   d8884:	2b02      	cmp	r3, #2
   d8886:	d90c      	bls.n	d88a2 <iso_year_adjust+0xb2>
   d8888:	e00d      	b.n	d88a6 <iso_year_adjust+0xb6>
   d888a:	f241 62d5 	movw	r2, #5845	; 0x16d5
   d888e:	4293      	cmp	r3, r2
   d8890:	d007      	beq.n	d88a2 <iso_year_adjust+0xb2>
   d8892:	f241 62d7 	movw	r2, #5847	; 0x16d7
   d8896:	4293      	cmp	r3, r2
   d8898:	d003      	beq.n	d88a2 <iso_year_adjust+0xb2>
   d889a:	f241 62d3 	movw	r2, #5843	; 0x16d3
   d889e:	4293      	cmp	r3, r2
   d88a0:	d101      	bne.n	d88a6 <iso_year_adjust+0xb6>
   d88a2:	2001      	movs	r0, #1
   d88a4:	bd10      	pop	{r4, pc}
   d88a6:	2000      	movs	r0, #0
   d88a8:	bd10      	pop	{r4, pc}
   d88aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d88ae:	bd10      	pop	{r4, pc}

000d88b0 <strftime>:
   d88b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d88b4:	b093      	sub	sp, #76	; 0x4c
   d88b6:	460e      	mov	r6, r1
   d88b8:	461d      	mov	r5, r3
   d88ba:	4607      	mov	r7, r0
   d88bc:	4691      	mov	r9, r2
   d88be:	f000 fe07 	bl	d94d0 <__get_current_time_locale>
   d88c2:	2300      	movs	r3, #0
   d88c4:	9306      	str	r3, [sp, #24]
   d88c6:	461c      	mov	r4, r3
   d88c8:	1e73      	subs	r3, r6, #1
   d88ca:	9003      	str	r0, [sp, #12]
   d88cc:	9302      	str	r3, [sp, #8]
   d88ce:	f899 3000 	ldrb.w	r3, [r9]
   d88d2:	2b00      	cmp	r3, #0
   d88d4:	f000 8492 	beq.w	d91fc <strftime+0x94c>
   d88d8:	2b25      	cmp	r3, #37	; 0x25
   d88da:	d008      	beq.n	d88ee <strftime+0x3e>
   d88dc:	9a02      	ldr	r2, [sp, #8]
   d88de:	4294      	cmp	r4, r2
   d88e0:	f080 8490 	bcs.w	d9204 <strftime+0x954>
   d88e4:	553b      	strb	r3, [r7, r4]
   d88e6:	f109 0901 	add.w	r9, r9, #1
   d88ea:	3401      	adds	r4, #1
   d88ec:	e7ef      	b.n	d88ce <strftime+0x1e>
   d88ee:	f899 a001 	ldrb.w	sl, [r9, #1]
   d88f2:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
   d88f6:	d007      	beq.n	d8908 <strftime+0x58>
   d88f8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d88fc:	d004      	beq.n	d8908 <strftime+0x58>
   d88fe:	f109 0901 	add.w	r9, r9, #1
   d8902:	f04f 0a00 	mov.w	sl, #0
   d8906:	e001      	b.n	d890c <strftime+0x5c>
   d8908:	f109 0902 	add.w	r9, r9, #2
   d890c:	f899 3000 	ldrb.w	r3, [r9]
   d8910:	3b31      	subs	r3, #49	; 0x31
   d8912:	2b08      	cmp	r3, #8
   d8914:	d808      	bhi.n	d8928 <strftime+0x78>
   d8916:	4648      	mov	r0, r9
   d8918:	220a      	movs	r2, #10
   d891a:	a90a      	add	r1, sp, #40	; 0x28
   d891c:	f000 fdce 	bl	d94bc <strtoul>
   d8920:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   d8924:	4680      	mov	r8, r0
   d8926:	e001      	b.n	d892c <strftime+0x7c>
   d8928:	f04f 0800 	mov.w	r8, #0
   d892c:	f899 3000 	ldrb.w	r3, [r9]
   d8930:	2b45      	cmp	r3, #69	; 0x45
   d8932:	d001      	beq.n	d8938 <strftime+0x88>
   d8934:	2b4f      	cmp	r3, #79	; 0x4f
   d8936:	d101      	bne.n	d893c <strftime+0x8c>
   d8938:	f109 0901 	add.w	r9, r9, #1
   d893c:	f899 0000 	ldrb.w	r0, [r9]
   d8940:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
   d8944:	2b55      	cmp	r3, #85	; 0x55
   d8946:	f200 845d 	bhi.w	d9204 <strftime+0x954>
   d894a:	e8df f013 	tbh	[pc, r3, lsl #1]
   d894e:	044a      	.short	0x044a
   d8950:	045b045b 	.word	0x045b045b
   d8954:	045b045b 	.word	0x045b045b
   d8958:	045b045b 	.word	0x045b045b
   d895c:	045b045b 	.word	0x045b045b
   d8960:	045b045b 	.word	0x045b045b
   d8964:	045b045b 	.word	0x045b045b
   d8968:	045b045b 	.word	0x045b045b
   d896c:	045b045b 	.word	0x045b045b
   d8970:	045b045b 	.word	0x045b045b
   d8974:	045b045b 	.word	0x045b045b
   d8978:	045b045b 	.word	0x045b045b
   d897c:	045b045b 	.word	0x045b045b
   d8980:	045b045b 	.word	0x045b045b
   d8984:	006f045b 	.word	0x006f045b
   d8988:	00d400a1 	.word	0x00d400a1
   d898c:	045b011a 	.word	0x045b011a
   d8990:	01a0013f 	.word	0x01a0013f
   d8994:	022d0226 	.word	0x022d0226
   d8998:	045b045b 	.word	0x045b045b
   d899c:	0260045b 	.word	0x0260045b
   d89a0:	045b045b 	.word	0x045b045b
   d89a4:	045b0268 	.word	0x045b0268
   d89a8:	031d0297 	.word	0x031d0297
   d89ac:	033b0325 	.word	0x033b0325
   d89b0:	03860343 	.word	0x03860343
   d89b4:	03a000c6 	.word	0x03a000c6
   d89b8:	045b041f 	.word	0x045b041f
   d89bc:	045b045b 	.word	0x045b045b
   d89c0:	045b045b 	.word	0x045b045b
   d89c4:	0056045b 	.word	0x0056045b
   d89c8:	00ba0089 	.word	0x00ba0089
   d89cc:	010c010c 	.word	0x010c010c
   d89d0:	0171045b 	.word	0x0171045b
   d89d4:	045b0089 	.word	0x045b0089
   d89d8:	0226023d 	.word	0x0226023d
   d89dc:	025d022d 	.word	0x025d022d
   d89e0:	045b0262 	.word	0x045b0262
   d89e4:	045b0268 	.word	0x045b0268
   d89e8:	029c00be 	.word	0x029c00be
   d89ec:	032e031f 	.word	0x032e031f
   d89f0:	037f045b 	.word	0x037f045b
   d89f4:	039200c2 	.word	0x039200c2
   d89f8:	03e7      	.short	0x03e7
   d89fa:	69ab      	ldr	r3, [r5, #24]
   d89fc:	9a03      	ldr	r2, [sp, #12]
   d89fe:	3318      	adds	r3, #24
   d8a00:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d8a04:	4640      	mov	r0, r8
   d8a06:	f000 fc07 	bl	d9218 <strlen>
   d8a0a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d8a0e:	193b      	adds	r3, r7, r4
   d8a10:	4420      	add	r0, r4
   d8a12:	4284      	cmp	r4, r0
   d8a14:	f000 83eb 	beq.w	d91ee <strftime+0x93e>
   d8a18:	9a02      	ldr	r2, [sp, #8]
   d8a1a:	4294      	cmp	r4, r2
   d8a1c:	f080 83f2 	bcs.w	d9204 <strftime+0x954>
   d8a20:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d8a24:	f803 2b01 	strb.w	r2, [r3], #1
   d8a28:	3401      	adds	r4, #1
   d8a2a:	e7f2      	b.n	d8a12 <strftime+0x162>
   d8a2c:	69ab      	ldr	r3, [r5, #24]
   d8a2e:	9a03      	ldr	r2, [sp, #12]
   d8a30:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   d8a34:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
   d8a38:	4640      	mov	r0, r8
   d8a3a:	f000 fbed 	bl	d9218 <strlen>
   d8a3e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d8a42:	193b      	adds	r3, r7, r4
   d8a44:	4420      	add	r0, r4
   d8a46:	4284      	cmp	r4, r0
   d8a48:	f000 83d1 	beq.w	d91ee <strftime+0x93e>
   d8a4c:	9a02      	ldr	r2, [sp, #8]
   d8a4e:	4294      	cmp	r4, r2
   d8a50:	f080 83d8 	bcs.w	d9204 <strftime+0x954>
   d8a54:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d8a58:	f803 2b01 	strb.w	r2, [r3], #1
   d8a5c:	3401      	adds	r4, #1
   d8a5e:	e7f2      	b.n	d8a46 <strftime+0x196>
   d8a60:	692b      	ldr	r3, [r5, #16]
   d8a62:	9a03      	ldr	r2, [sp, #12]
   d8a64:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d8a68:	4640      	mov	r0, r8
   d8a6a:	f000 fbd5 	bl	d9218 <strlen>
   d8a6e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d8a72:	193b      	adds	r3, r7, r4
   d8a74:	4420      	add	r0, r4
   d8a76:	4284      	cmp	r4, r0
   d8a78:	f000 83b9 	beq.w	d91ee <strftime+0x93e>
   d8a7c:	9a02      	ldr	r2, [sp, #8]
   d8a7e:	4294      	cmp	r4, r2
   d8a80:	f080 83c0 	bcs.w	d9204 <strftime+0x954>
   d8a84:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d8a88:	f803 2b01 	strb.w	r2, [r3], #1
   d8a8c:	3401      	adds	r4, #1
   d8a8e:	e7f2      	b.n	d8a76 <strftime+0x1c6>
   d8a90:	692b      	ldr	r3, [r5, #16]
   d8a92:	9a03      	ldr	r2, [sp, #12]
   d8a94:	330c      	adds	r3, #12
   d8a96:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d8a9a:	4640      	mov	r0, r8
   d8a9c:	f000 fbbc 	bl	d9218 <strlen>
   d8aa0:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d8aa4:	193b      	adds	r3, r7, r4
   d8aa6:	4420      	add	r0, r4
   d8aa8:	4284      	cmp	r4, r0
   d8aaa:	f000 83a0 	beq.w	d91ee <strftime+0x93e>
   d8aae:	9a02      	ldr	r2, [sp, #8]
   d8ab0:	4294      	cmp	r4, r2
   d8ab2:	f080 83a7 	bcs.w	d9204 <strftime+0x954>
   d8ab6:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d8aba:	f803 2b01 	strb.w	r2, [r3], #1
   d8abe:	3401      	adds	r4, #1
   d8ac0:	e7f2      	b.n	d8aa8 <strftime+0x1f8>
   d8ac2:	9b03      	ldr	r3, [sp, #12]
   d8ac4:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
   d8ac8:	e00a      	b.n	d8ae0 <strftime+0x230>
   d8aca:	9b03      	ldr	r3, [sp, #12]
   d8acc:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
   d8ad0:	e006      	b.n	d8ae0 <strftime+0x230>
   d8ad2:	9b03      	ldr	r3, [sp, #12]
   d8ad4:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
   d8ad8:	e002      	b.n	d8ae0 <strftime+0x230>
   d8ada:	9b03      	ldr	r3, [sp, #12]
   d8adc:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
   d8ae0:	4640      	mov	r0, r8
   d8ae2:	f000 fb99 	bl	d9218 <strlen>
   d8ae6:	f898 3000 	ldrb.w	r3, [r8]
   d8aea:	2b00      	cmp	r3, #0
   d8aec:	f000 837f 	beq.w	d91ee <strftime+0x93e>
   d8af0:	462b      	mov	r3, r5
   d8af2:	4642      	mov	r2, r8
   d8af4:	e093      	b.n	d8c1e <strftime+0x36e>
   d8af6:	49b6      	ldr	r1, [pc, #728]	; (d8dd0 <strftime+0x520>)
   d8af8:	f8d5 b014 	ldr.w	fp, [r5, #20]
   d8afc:	458b      	cmp	fp, r1
   d8afe:	bfac      	ite	ge
   d8b00:	2100      	movge	r1, #0
   d8b02:	2101      	movlt	r1, #1
   d8b04:	f1bb 0f00 	cmp.w	fp, #0
   d8b08:	db04      	blt.n	d8b14 <strftime+0x264>
   d8b0a:	2064      	movs	r0, #100	; 0x64
   d8b0c:	fb9b f0f0 	sdiv	r0, fp, r0
   d8b10:	3013      	adds	r0, #19
   d8b12:	e008      	b.n	d8b26 <strftime+0x276>
   d8b14:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
   d8b18:	9107      	str	r1, [sp, #28]
   d8b1a:	f000 ff19 	bl	d9950 <abs>
   d8b1e:	9907      	ldr	r1, [sp, #28]
   d8b20:	2364      	movs	r3, #100	; 0x64
   d8b22:	fb90 f0f3 	sdiv	r0, r0, r3
   d8b26:	f1ba 0f00 	cmp.w	sl, #0
   d8b2a:	d008      	beq.n	d8b3e <strftime+0x28e>
   d8b2c:	2863      	cmp	r0, #99	; 0x63
   d8b2e:	dd09      	ble.n	d8b44 <strftime+0x294>
   d8b30:	4ba8      	ldr	r3, [pc, #672]	; (d8dd4 <strftime+0x524>)
   d8b32:	4aa9      	ldr	r2, [pc, #676]	; (d8dd8 <strftime+0x528>)
   d8b34:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d8b38:	bf18      	it	ne
   d8b3a:	4613      	movne	r3, r2
   d8b3c:	e003      	b.n	d8b46 <strftime+0x296>
   d8b3e:	4ba6      	ldr	r3, [pc, #664]	; (d8dd8 <strftime+0x528>)
   d8b40:	4aa6      	ldr	r2, [pc, #664]	; (d8ddc <strftime+0x52c>)
   d8b42:	e001      	b.n	d8b48 <strftime+0x298>
   d8b44:	4ba4      	ldr	r3, [pc, #656]	; (d8dd8 <strftime+0x528>)
   d8b46:	4aa6      	ldr	r2, [pc, #664]	; (d8de0 <strftime+0x530>)
   d8b48:	9001      	str	r0, [sp, #4]
   d8b4a:	f1b8 0f01 	cmp.w	r8, #1
   d8b4e:	bf98      	it	ls
   d8b50:	f04f 0802 	movls.w	r8, #2
   d8b54:	ebc1 0108 	rsb	r1, r1, r8
   d8b58:	9100      	str	r1, [sp, #0]
   d8b5a:	489d      	ldr	r0, [pc, #628]	; (d8dd0 <strftime+0x520>)
   d8b5c:	49a1      	ldr	r1, [pc, #644]	; (d8de4 <strftime+0x534>)
   d8b5e:	4583      	cmp	fp, r0
   d8b60:	bfb8      	it	lt
   d8b62:	460b      	movlt	r3, r1
   d8b64:	e21e      	b.n	d8fa4 <strftime+0x6f4>
   d8b66:	4aa0      	ldr	r2, [pc, #640]	; (d8de8 <strftime+0x538>)
   d8b68:	49a0      	ldr	r1, [pc, #640]	; (d8dec <strftime+0x53c>)
   d8b6a:	68eb      	ldr	r3, [r5, #12]
   d8b6c:	2864      	cmp	r0, #100	; 0x64
   d8b6e:	bf08      	it	eq
   d8b70:	460a      	moveq	r2, r1
   d8b72:	1b31      	subs	r1, r6, r4
   d8b74:	1938      	adds	r0, r7, r4
   d8b76:	f7fc fbbb 	bl	d52f0 <sniprintf>
   d8b7a:	2800      	cmp	r0, #0
   d8b7c:	f280 8302 	bge.w	d9184 <strftime+0x8d4>
   d8b80:	e340      	b.n	d9204 <strftime+0x954>
   d8b82:	6968      	ldr	r0, [r5, #20]
   d8b84:	692b      	ldr	r3, [r5, #16]
   d8b86:	2800      	cmp	r0, #0
   d8b88:	f103 0b01 	add.w	fp, r3, #1
   d8b8c:	eb07 0804 	add.w	r8, r7, r4
   d8b90:	ebc4 0a06 	rsb	sl, r4, r6
   d8b94:	68eb      	ldr	r3, [r5, #12]
   d8b96:	db05      	blt.n	d8ba4 <strftime+0x2f4>
   d8b98:	2264      	movs	r2, #100	; 0x64
   d8b9a:	fb90 f1f2 	sdiv	r1, r0, r2
   d8b9e:	fb02 0011 	mls	r0, r2, r1, r0
   d8ba2:	e00a      	b.n	d8bba <strftime+0x30a>
   d8ba4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d8ba8:	9307      	str	r3, [sp, #28]
   d8baa:	f000 fed1 	bl	d9950 <abs>
   d8bae:	2264      	movs	r2, #100	; 0x64
   d8bb0:	9b07      	ldr	r3, [sp, #28]
   d8bb2:	fb90 f1f2 	sdiv	r1, r0, r2
   d8bb6:	fb01 0012 	mls	r0, r1, r2, r0
   d8bba:	4a8d      	ldr	r2, [pc, #564]	; (d8df0 <strftime+0x540>)
   d8bbc:	9001      	str	r0, [sp, #4]
   d8bbe:	9300      	str	r3, [sp, #0]
   d8bc0:	4651      	mov	r1, sl
   d8bc2:	465b      	mov	r3, fp
   d8bc4:	4640      	mov	r0, r8
   d8bc6:	f7fc fb93 	bl	d52f0 <sniprintf>
   d8bca:	e7d6      	b.n	d8b7a <strftime+0x2ca>
   d8bcc:	2325      	movs	r3, #37	; 0x25
   d8bce:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d8bd2:	f1ba 0f00 	cmp.w	sl, #0
   d8bd6:	d007      	beq.n	d8be8 <strftime+0x338>
   d8bd8:	f1b8 0f05 	cmp.w	r8, #5
   d8bdc:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
   d8be0:	bf98      	it	ls
   d8be2:	f04f 0806 	movls.w	r8, #6
   d8be6:	e004      	b.n	d8bf2 <strftime+0x342>
   d8be8:	232b      	movs	r3, #43	; 0x2b
   d8bea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   d8bee:	f04f 080a 	mov.w	r8, #10
   d8bf2:	f1b8 0306 	subs.w	r3, r8, #6
   d8bf6:	d102      	bne.n	d8bfe <strftime+0x34e>
   d8bf8:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   d8bfc:	e00a      	b.n	d8c14 <strftime+0x364>
   d8bfe:	4a7d      	ldr	r2, [pc, #500]	; (d8df4 <strftime+0x544>)
   d8c00:	211e      	movs	r1, #30
   d8c02:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
   d8c06:	f7fc fb73 	bl	d52f0 <sniprintf>
   d8c0a:	2800      	cmp	r0, #0
   d8c0c:	ddf4      	ble.n	d8bf8 <strftime+0x348>
   d8c0e:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
   d8c12:	4418      	add	r0, r3
   d8c14:	4978      	ldr	r1, [pc, #480]	; (d8df8 <strftime+0x548>)
   d8c16:	f7ff fde3 	bl	d87e0 <strcpy>
   d8c1a:	462b      	mov	r3, r5
   d8c1c:	aa0a      	add	r2, sp, #40	; 0x28
   d8c1e:	1b31      	subs	r1, r6, r4
   d8c20:	1938      	adds	r0, r7, r4
   d8c22:	f7ff fe45 	bl	d88b0 <strftime>
   d8c26:	2800      	cmp	r0, #0
   d8c28:	f340 82ec 	ble.w	d9204 <strftime+0x954>
   d8c2c:	4404      	add	r4, r0
   d8c2e:	e2de      	b.n	d91ee <strftime+0x93e>
   d8c30:	4628      	mov	r0, r5
   d8c32:	f7ff fddd 	bl	d87f0 <iso_year_adjust>
   d8c36:	4680      	mov	r8, r0
   d8c38:	6968      	ldr	r0, [r5, #20]
   d8c3a:	2800      	cmp	r0, #0
   d8c3c:	db05      	blt.n	d8c4a <strftime+0x39a>
   d8c3e:	2264      	movs	r2, #100	; 0x64
   d8c40:	fb90 f1f2 	sdiv	r1, r0, r2
   d8c44:	fb02 0011 	mls	r0, r2, r1, r0
   d8c48:	e008      	b.n	d8c5c <strftime+0x3ac>
   d8c4a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d8c4e:	f000 fe7f 	bl	d9950 <abs>
   d8c52:	2264      	movs	r2, #100	; 0x64
   d8c54:	fb90 f3f2 	sdiv	r3, r0, r2
   d8c58:	fb03 0012 	mls	r0, r3, r2, r0
   d8c5c:	f1b8 0f00 	cmp.w	r8, #0
   d8c60:	da06      	bge.n	d8c70 <strftime+0x3c0>
   d8c62:	696a      	ldr	r2, [r5, #20]
   d8c64:	4b65      	ldr	r3, [pc, #404]	; (d8dfc <strftime+0x54c>)
   d8c66:	429a      	cmp	r2, r3
   d8c68:	bfb8      	it	lt
   d8c6a:	f04f 0801 	movlt.w	r8, #1
   d8c6e:	e006      	b.n	d8c7e <strftime+0x3ce>
   d8c70:	d005      	beq.n	d8c7e <strftime+0x3ce>
   d8c72:	696a      	ldr	r2, [r5, #20]
   d8c74:	4b56      	ldr	r3, [pc, #344]	; (d8dd0 <strftime+0x520>)
   d8c76:	429a      	cmp	r2, r3
   d8c78:	bfb8      	it	lt
   d8c7a:	f04f 38ff 	movlt.w	r8, #4294967295	; 0xffffffff
   d8c7e:	2364      	movs	r3, #100	; 0x64
   d8c80:	4440      	add	r0, r8
   d8c82:	fb90 f2f3 	sdiv	r2, r0, r3
   d8c86:	fb03 0012 	mls	r0, r3, r2, r0
   d8c8a:	4418      	add	r0, r3
   d8c8c:	e1f9      	b.n	d9082 <strftime+0x7d2>
   d8c8e:	4b50      	ldr	r3, [pc, #320]	; (d8dd0 <strftime+0x520>)
   d8c90:	6969      	ldr	r1, [r5, #20]
   d8c92:	9108      	str	r1, [sp, #32]
   d8c94:	4299      	cmp	r1, r3
   d8c96:	bfac      	ite	ge
   d8c98:	2300      	movge	r3, #0
   d8c9a:	2301      	movlt	r3, #1
   d8c9c:	4628      	mov	r0, r5
   d8c9e:	9307      	str	r3, [sp, #28]
   d8ca0:	f7ff fda6 	bl	d87f0 <iso_year_adjust>
   d8ca4:	9908      	ldr	r1, [sp, #32]
   d8ca6:	2900      	cmp	r1, #0
   d8ca8:	4683      	mov	fp, r0
   d8caa:	db04      	blt.n	d8cb6 <strftime+0x406>
   d8cac:	2364      	movs	r3, #100	; 0x64
   d8cae:	fb91 f3f3 	sdiv	r3, r1, r3
   d8cb2:	3313      	adds	r3, #19
   d8cb4:	e008      	b.n	d8cc8 <strftime+0x418>
   d8cb6:	f201 706c 	addw	r0, r1, #1900	; 0x76c
   d8cba:	9108      	str	r1, [sp, #32]
   d8cbc:	f000 fe48 	bl	d9950 <abs>
   d8cc0:	9908      	ldr	r1, [sp, #32]
   d8cc2:	2364      	movs	r3, #100	; 0x64
   d8cc4:	fb90 f3f3 	sdiv	r3, r0, r3
   d8cc8:	6968      	ldr	r0, [r5, #20]
   d8cca:	2800      	cmp	r0, #0
   d8ccc:	db06      	blt.n	d8cdc <strftime+0x42c>
   d8cce:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d8cd2:	fb90 fcfe 	sdiv	ip, r0, lr
   d8cd6:	fb0e 001c 	mls	r0, lr, ip, r0
   d8cda:	e00d      	b.n	d8cf8 <strftime+0x448>
   d8cdc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d8ce0:	9109      	str	r1, [sp, #36]	; 0x24
   d8ce2:	9308      	str	r3, [sp, #32]
   d8ce4:	f000 fe34 	bl	d9950 <abs>
   d8ce8:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d8cec:	9909      	ldr	r1, [sp, #36]	; 0x24
   d8cee:	9b08      	ldr	r3, [sp, #32]
   d8cf0:	fb90 fcfe 	sdiv	ip, r0, lr
   d8cf4:	fb0c 001e 	mls	r0, ip, lr, r0
   d8cf8:	f1bb 0f00 	cmp.w	fp, #0
   d8cfc:	da08      	bge.n	d8d10 <strftime+0x460>
   d8cfe:	6969      	ldr	r1, [r5, #20]
   d8d00:	4a3e      	ldr	r2, [pc, #248]	; (d8dfc <strftime+0x54c>)
   d8d02:	4291      	cmp	r1, r2
   d8d04:	da0a      	bge.n	d8d1c <strftime+0x46c>
   d8d06:	f04f 0b01 	mov.w	fp, #1
   d8d0a:	f8cd b01c 	str.w	fp, [sp, #28]
   d8d0e:	e005      	b.n	d8d1c <strftime+0x46c>
   d8d10:	d004      	beq.n	d8d1c <strftime+0x46c>
   d8d12:	4a2f      	ldr	r2, [pc, #188]	; (d8dd0 <strftime+0x520>)
   d8d14:	4291      	cmp	r1, r2
   d8d16:	bfb8      	it	lt
   d8d18:	f04f 3bff 	movlt.w	fp, #4294967295	; 0xffffffff
   d8d1c:	eb0b 0200 	add.w	r2, fp, r0
   d8d20:	1c50      	adds	r0, r2, #1
   d8d22:	d102      	bne.n	d8d2a <strftime+0x47a>
   d8d24:	3b01      	subs	r3, #1
   d8d26:	2263      	movs	r2, #99	; 0x63
   d8d28:	e003      	b.n	d8d32 <strftime+0x482>
   d8d2a:	2a64      	cmp	r2, #100	; 0x64
   d8d2c:	bf04      	itt	eq
   d8d2e:	3301      	addeq	r3, #1
   d8d30:	2200      	moveq	r2, #0
   d8d32:	2064      	movs	r0, #100	; 0x64
   d8d34:	fb00 2303 	mla	r3, r0, r3, r2
   d8d38:	9a07      	ldr	r2, [sp, #28]
   d8d3a:	b142      	cbz	r2, d8d4e <strftime+0x49e>
   d8d3c:	222d      	movs	r2, #45	; 0x2d
   d8d3e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
   d8d42:	f1b8 0f00 	cmp.w	r8, #0
   d8d46:	d013      	beq.n	d8d70 <strftime+0x4c0>
   d8d48:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d8d4c:	e010      	b.n	d8d70 <strftime+0x4c0>
   d8d4e:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d8d52:	d110      	bne.n	d8d76 <strftime+0x4c6>
   d8d54:	f242 720f 	movw	r2, #9999	; 0x270f
   d8d58:	4293      	cmp	r3, r2
   d8d5a:	d90c      	bls.n	d8d76 <strftime+0x4c6>
   d8d5c:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   d8d60:	f1b8 0f00 	cmp.w	r8, #0
   d8d64:	d1f0      	bne.n	d8d48 <strftime+0x498>
   d8d66:	aa12      	add	r2, sp, #72	; 0x48
   d8d68:	2125      	movs	r1, #37	; 0x25
   d8d6a:	f802 1d1f 	strb.w	r1, [r2, #-31]!
   d8d6e:	e00a      	b.n	d8d86 <strftime+0x4d6>
   d8d70:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   d8d74:	e000      	b.n	d8d78 <strftime+0x4c8>
   d8d76:	aa0a      	add	r2, sp, #40	; 0x28
   d8d78:	2125      	movs	r1, #37	; 0x25
   d8d7a:	7011      	strb	r1, [r2, #0]
   d8d7c:	f1ba 0f00 	cmp.w	sl, #0
   d8d80:	d101      	bne.n	d8d86 <strftime+0x4d6>
   d8d82:	1c50      	adds	r0, r2, #1
   d8d84:	e002      	b.n	d8d8c <strftime+0x4dc>
   d8d86:	2130      	movs	r1, #48	; 0x30
   d8d88:	1c90      	adds	r0, r2, #2
   d8d8a:	7051      	strb	r1, [r2, #1]
   d8d8c:	491c      	ldr	r1, [pc, #112]	; (d8e00 <strftime+0x550>)
   d8d8e:	9307      	str	r3, [sp, #28]
   d8d90:	f7ff fd26 	bl	d87e0 <strcpy>
   d8d94:	9b07      	ldr	r3, [sp, #28]
   d8d96:	9300      	str	r3, [sp, #0]
   d8d98:	e1ad      	b.n	d90f6 <strftime+0x846>
   d8d9a:	4a14      	ldr	r2, [pc, #80]	; (d8dec <strftime+0x53c>)
   d8d9c:	4912      	ldr	r1, [pc, #72]	; (d8de8 <strftime+0x538>)
   d8d9e:	68ab      	ldr	r3, [r5, #8]
   d8da0:	286b      	cmp	r0, #107	; 0x6b
   d8da2:	bf08      	it	eq
   d8da4:	460a      	moveq	r2, r1
   d8da6:	e6e4      	b.n	d8b72 <strftime+0x2c2>
   d8da8:	68a9      	ldr	r1, [r5, #8]
   d8daa:	230c      	movs	r3, #12
   d8dac:	b131      	cbz	r1, d8dbc <strftime+0x50c>
   d8dae:	4299      	cmp	r1, r3
   d8db0:	bf0e      	itee	eq
   d8db2:	460b      	moveq	r3, r1
   d8db4:	fb91 f2f3 	sdivne	r2, r1, r3
   d8db8:	fb03 1312 	mlsne	r3, r3, r2, r1
   d8dbc:	4a0a      	ldr	r2, [pc, #40]	; (d8de8 <strftime+0x538>)
   d8dbe:	490b      	ldr	r1, [pc, #44]	; (d8dec <strftime+0x53c>)
   d8dc0:	2849      	cmp	r0, #73	; 0x49
   d8dc2:	bf08      	it	eq
   d8dc4:	460a      	moveq	r2, r1
   d8dc6:	e6d4      	b.n	d8b72 <strftime+0x2c2>
   d8dc8:	69eb      	ldr	r3, [r5, #28]
   d8dca:	4a0e      	ldr	r2, [pc, #56]	; (d8e04 <strftime+0x554>)
   d8dcc:	3301      	adds	r3, #1
   d8dce:	e6d0      	b.n	d8b72 <strftime+0x2c2>
   d8dd0:	fffff894 	.word	0xfffff894
   d8dd4:	000da29b 	.word	0x000da29b
   d8dd8:	000d9e89 	.word	0x000d9e89
   d8ddc:	000da28c 	.word	0x000da28c
   d8de0:	000da293 	.word	0x000da293
   d8de4:	000da29d 	.word	0x000da29d
   d8de8:	000da29f 	.word	0x000da29f
   d8dec:	000da2ad 	.word	0x000da2ad
   d8df0:	000da2a3 	.word	0x000da2a3
   d8df4:	000da2b2 	.word	0x000da2b2
   d8df8:	000da2b6 	.word	0x000da2b6
   d8dfc:	fffff895 	.word	0xfffff895
   d8e00:	000da2be 	.word	0x000da2be
   d8e04:	000da2c2 	.word	0x000da2c2
   d8e08:	692b      	ldr	r3, [r5, #16]
   d8e0a:	3301      	adds	r3, #1
   d8e0c:	e13d      	b.n	d908a <strftime+0x7da>
   d8e0e:	686b      	ldr	r3, [r5, #4]
   d8e10:	e13b      	b.n	d908a <strftime+0x7da>
   d8e12:	9b02      	ldr	r3, [sp, #8]
   d8e14:	429c      	cmp	r4, r3
   d8e16:	f080 81f5 	bcs.w	d9204 <strftime+0x954>
   d8e1a:	230a      	movs	r3, #10
   d8e1c:	e1e5      	b.n	d91ea <strftime+0x93a>
   d8e1e:	68ab      	ldr	r3, [r5, #8]
   d8e20:	9a03      	ldr	r2, [sp, #12]
   d8e22:	2b0b      	cmp	r3, #11
   d8e24:	bfcc      	ite	gt
   d8e26:	23a4      	movgt	r3, #164	; 0xa4
   d8e28:	23a0      	movle	r3, #160	; 0xa0
   d8e2a:	4413      	add	r3, r2
   d8e2c:	f8d3 8004 	ldr.w	r8, [r3, #4]
   d8e30:	4640      	mov	r0, r8
   d8e32:	f000 f9f1 	bl	d9218 <strlen>
   d8e36:	4bb2      	ldr	r3, [pc, #712]	; (d9100 <strftime+0x850>)
   d8e38:	f8d3 e000 	ldr.w	lr, [r3]
   d8e3c:	1939      	adds	r1, r7, r4
   d8e3e:	4642      	mov	r2, r8
   d8e40:	4420      	add	r0, r4
   d8e42:	4284      	cmp	r4, r0
   d8e44:	f000 81d3 	beq.w	d91ee <strftime+0x93e>
   d8e48:	9b02      	ldr	r3, [sp, #8]
   d8e4a:	429c      	cmp	r4, r3
   d8e4c:	f080 81da 	bcs.w	d9204 <strftime+0x954>
   d8e50:	f899 3000 	ldrb.w	r3, [r9]
   d8e54:	2b50      	cmp	r3, #80	; 0x50
   d8e56:	f104 0401 	add.w	r4, r4, #1
   d8e5a:	7813      	ldrb	r3, [r2, #0]
   d8e5c:	d10a      	bne.n	d8e74 <strftime+0x5c4>
   d8e5e:	eb0e 0c03 	add.w	ip, lr, r3
   d8e62:	f89c c001 	ldrb.w	ip, [ip, #1]
   d8e66:	f00c 0c03 	and.w	ip, ip, #3
   d8e6a:	f1bc 0f01 	cmp.w	ip, #1
   d8e6e:	bf08      	it	eq
   d8e70:	3320      	addeq	r3, #32
   d8e72:	b2db      	uxtb	r3, r3
   d8e74:	f801 3b01 	strb.w	r3, [r1], #1
   d8e78:	3201      	adds	r2, #1
   d8e7a:	e7e2      	b.n	d8e42 <strftime+0x592>
   d8e7c:	686b      	ldr	r3, [r5, #4]
   d8e7e:	9300      	str	r3, [sp, #0]
   d8e80:	4aa0      	ldr	r2, [pc, #640]	; (d9104 <strftime+0x854>)
   d8e82:	68ab      	ldr	r3, [r5, #8]
   d8e84:	e139      	b.n	d90fa <strftime+0x84a>
   d8e86:	6a2b      	ldr	r3, [r5, #32]
   d8e88:	2b00      	cmp	r3, #0
   d8e8a:	db17      	blt.n	d8ebc <strftime+0x60c>
   d8e8c:	f000 fbd8 	bl	d9640 <__tz_lock>
   d8e90:	9b06      	ldr	r3, [sp, #24]
   d8e92:	b91b      	cbnz	r3, d8e9c <strftime+0x5ec>
   d8e94:	f000 fbd6 	bl	d9644 <_tzset_unlocked>
   d8e98:	2301      	movs	r3, #1
   d8e9a:	9306      	str	r3, [sp, #24]
   d8e9c:	f000 fdb4 	bl	d9a08 <__gettzinfo>
   d8ea0:	6a2b      	ldr	r3, [r5, #32]
   d8ea2:	2b00      	cmp	r3, #0
   d8ea4:	bfd4      	ite	le
   d8ea6:	2300      	movle	r3, #0
   d8ea8:	2301      	movgt	r3, #1
   d8eaa:	221c      	movs	r2, #28
   d8eac:	fb02 0003 	mla	r0, r2, r3, r0
   d8eb0:	6a03      	ldr	r3, [r0, #32]
   d8eb2:	f1c3 0800 	rsb	r8, r3, #0
   d8eb6:	f000 fbc4 	bl	d9642 <__tz_unlock>
   d8eba:	e001      	b.n	d8ec0 <strftime+0x610>
   d8ebc:	f04f 0800 	mov.w	r8, #0
   d8ec0:	f8d5 e014 	ldr.w	lr, [r5, #20]
   d8ec4:	4670      	mov	r0, lr
   d8ec6:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
   d8eca:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d8ece:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   d8ed2:	2a00      	cmp	r2, #0
   d8ed4:	f173 0b00 	sbcs.w	fp, r3, #0
   d8ed8:	ebc4 0c06 	rsb	ip, r4, r6
   d8edc:	eb07 0a04 	add.w	sl, r7, r4
   d8ee0:	da03      	bge.n	d8eea <strftime+0x63a>
   d8ee2:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
   d8ee6:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   d8eea:	0891      	lsrs	r1, r2, #2
   d8eec:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
   d8ef0:	109b      	asrs	r3, r3, #2
   d8ef2:	9104      	str	r1, [sp, #16]
   d8ef4:	9305      	str	r3, [sp, #20]
   d8ef6:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
   d8efa:	2364      	movs	r3, #100	; 0x64
   d8efc:	fb91 f1f3 	sdiv	r1, r1, r3
   d8f00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8f04:	1a52      	subs	r2, r2, r1
   d8f06:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
   d8f0a:	f20e 102b 	addw	r0, lr, #299	; 0x12b
   d8f0e:	f44f 71c8 	mov.w	r1, #400	; 0x190
   d8f12:	fb90 f1f1 	sdiv	r1, r0, r1
   d8f16:	1852      	adds	r2, r2, r1
   d8f18:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d8f1c:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
   d8f20:	f240 116d 	movw	r1, #365	; 0x16d
   d8f24:	fb01 fe0e 	mul.w	lr, r1, lr
   d8f28:	69e9      	ldr	r1, [r5, #28]
   d8f2a:	eb12 020e 	adds.w	r2, r2, lr
   d8f2e:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
   d8f32:	1852      	adds	r2, r2, r1
   d8f34:	f04f 0e18 	mov.w	lr, #24
   d8f38:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d8f3c:	fba2 010e 	umull	r0, r1, r2, lr
   d8f40:	fb0e 1103 	mla	r1, lr, r3, r1
   d8f44:	68ab      	ldr	r3, [r5, #8]
   d8f46:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
   d8f4a:	18c0      	adds	r0, r0, r3
   d8f4c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   d8f50:	fba0 230e 	umull	r2, r3, r0, lr
   d8f54:	fb0e 3301 	mla	r3, lr, r1, r3
   d8f58:	6869      	ldr	r1, [r5, #4]
   d8f5a:	1852      	adds	r2, r2, r1
   d8f5c:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   d8f60:	fba2 010e 	umull	r0, r1, r2, lr
   d8f64:	fb0e 1103 	mla	r1, lr, r3, r1
   d8f68:	682b      	ldr	r3, [r5, #0]
   d8f6a:	4a67      	ldr	r2, [pc, #412]	; (d9108 <strftime+0x858>)
   d8f6c:	18c0      	adds	r0, r0, r3
   d8f6e:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
   d8f72:	ebb0 0008 	subs.w	r0, r0, r8
   d8f76:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
   d8f7a:	e9cd 0100 	strd	r0, r1, [sp]
   d8f7e:	4661      	mov	r1, ip
   d8f80:	4650      	mov	r0, sl
   d8f82:	f7fc f9b5 	bl	d52f0 <sniprintf>
   d8f86:	e5f8      	b.n	d8b7a <strftime+0x2ca>
   d8f88:	682b      	ldr	r3, [r5, #0]
   d8f8a:	e07e      	b.n	d908a <strftime+0x7da>
   d8f8c:	9b02      	ldr	r3, [sp, #8]
   d8f8e:	429c      	cmp	r4, r3
   d8f90:	f080 8138 	bcs.w	d9204 <strftime+0x954>
   d8f94:	2309      	movs	r3, #9
   d8f96:	e128      	b.n	d91ea <strftime+0x93a>
   d8f98:	682b      	ldr	r3, [r5, #0]
   d8f9a:	9301      	str	r3, [sp, #4]
   d8f9c:	686b      	ldr	r3, [r5, #4]
   d8f9e:	9300      	str	r3, [sp, #0]
   d8fa0:	4a5a      	ldr	r2, [pc, #360]	; (d910c <strftime+0x85c>)
   d8fa2:	68ab      	ldr	r3, [r5, #8]
   d8fa4:	1b31      	subs	r1, r6, r4
   d8fa6:	1938      	adds	r0, r7, r4
   d8fa8:	e60d      	b.n	d8bc6 <strftime+0x316>
   d8faa:	9b02      	ldr	r3, [sp, #8]
   d8fac:	429c      	cmp	r4, r3
   d8fae:	f080 8129 	bcs.w	d9204 <strftime+0x954>
   d8fb2:	69ab      	ldr	r3, [r5, #24]
   d8fb4:	1c62      	adds	r2, r4, #1
   d8fb6:	b90b      	cbnz	r3, d8fbc <strftime+0x70c>
   d8fb8:	2337      	movs	r3, #55	; 0x37
   d8fba:	e000      	b.n	d8fbe <strftime+0x70e>
   d8fbc:	3330      	adds	r3, #48	; 0x30
   d8fbe:	553b      	strb	r3, [r7, r4]
   d8fc0:	4614      	mov	r4, r2
   d8fc2:	e114      	b.n	d91ee <strftime+0x93e>
   d8fc4:	69eb      	ldr	r3, [r5, #28]
   d8fc6:	69aa      	ldr	r2, [r5, #24]
   d8fc8:	3307      	adds	r3, #7
   d8fca:	1a9b      	subs	r3, r3, r2
   d8fcc:	2207      	movs	r2, #7
   d8fce:	fb93 f3f2 	sdiv	r3, r3, r2
   d8fd2:	e05a      	b.n	d908a <strftime+0x7da>
   d8fd4:	4628      	mov	r0, r5
   d8fd6:	f7ff fc0b 	bl	d87f0 <iso_year_adjust>
   d8fda:	69aa      	ldr	r2, [r5, #24]
   d8fdc:	b10a      	cbz	r2, d8fe2 <strftime+0x732>
   d8fde:	1e53      	subs	r3, r2, #1
   d8fe0:	e000      	b.n	d8fe4 <strftime+0x734>
   d8fe2:	2306      	movs	r3, #6
   d8fe4:	2800      	cmp	r0, #0
   d8fe6:	dc2f      	bgt.n	d9048 <strftime+0x798>
   d8fe8:	69ea      	ldr	r2, [r5, #28]
   d8fea:	d101      	bne.n	d8ff0 <strftime+0x740>
   d8fec:	320a      	adds	r2, #10
   d8fee:	e03b      	b.n	d9068 <strftime+0x7b8>
   d8ff0:	1a9a      	subs	r2, r3, r2
   d8ff2:	696b      	ldr	r3, [r5, #20]
   d8ff4:	f240 716b 	movw	r1, #1899	; 0x76b
   d8ff8:	2b00      	cmp	r3, #0
   d8ffa:	bfb4      	ite	lt
   d8ffc:	4608      	movlt	r0, r1
   d8ffe:	f06f 0064 	mvnge.w	r0, #100	; 0x64
   d9002:	4418      	add	r0, r3
   d9004:	0781      	lsls	r1, r0, #30
   d9006:	d107      	bne.n	d9018 <strftime+0x768>
   d9008:	4601      	mov	r1, r0
   d900a:	f04f 0e64 	mov.w	lr, #100	; 0x64
   d900e:	fb90 f0fe 	sdiv	r0, r0, lr
   d9012:	fb0e 1110 	mls	r1, lr, r0, r1
   d9016:	b981      	cbnz	r1, d903a <strftime+0x78a>
   d9018:	2b00      	cmp	r3, #0
   d901a:	f240 716b 	movw	r1, #1899	; 0x76b
   d901e:	bfa8      	it	ge
   d9020:	f06f 0164 	mvnge.w	r1, #100	; 0x64
   d9024:	4419      	add	r1, r3
   d9026:	f44f 73c8 	mov.w	r3, #400	; 0x190
   d902a:	fb91 f0f3 	sdiv	r0, r1, r3
   d902e:	fb03 1110 	mls	r1, r3, r0, r1
   d9032:	fab1 f181 	clz	r1, r1
   d9036:	0949      	lsrs	r1, r1, #5
   d9038:	e000      	b.n	d903c <strftime+0x78c>
   d903a:	2101      	movs	r1, #1
   d903c:	1a52      	subs	r2, r2, r1
   d903e:	2a05      	cmp	r2, #5
   d9040:	bfb4      	ite	lt
   d9042:	2335      	movlt	r3, #53	; 0x35
   d9044:	2334      	movge	r3, #52	; 0x34
   d9046:	e020      	b.n	d908a <strftime+0x7da>
   d9048:	2301      	movs	r3, #1
   d904a:	e01e      	b.n	d908a <strftime+0x7da>
   d904c:	9b02      	ldr	r3, [sp, #8]
   d904e:	429c      	cmp	r4, r3
   d9050:	f080 80d8 	bcs.w	d9204 <strftime+0x954>
   d9054:	69ab      	ldr	r3, [r5, #24]
   d9056:	3330      	adds	r3, #48	; 0x30
   d9058:	e0c7      	b.n	d91ea <strftime+0x93a>
   d905a:	69aa      	ldr	r2, [r5, #24]
   d905c:	b10a      	cbz	r2, d9062 <strftime+0x7b2>
   d905e:	1e53      	subs	r3, r2, #1
   d9060:	e000      	b.n	d9064 <strftime+0x7b4>
   d9062:	2306      	movs	r3, #6
   d9064:	69ea      	ldr	r2, [r5, #28]
   d9066:	3207      	adds	r2, #7
   d9068:	1ad2      	subs	r2, r2, r3
   d906a:	2307      	movs	r3, #7
   d906c:	fb92 f3f3 	sdiv	r3, r2, r3
   d9070:	e00b      	b.n	d908a <strftime+0x7da>
   d9072:	6968      	ldr	r0, [r5, #20]
   d9074:	2800      	cmp	r0, #0
   d9076:	da03      	bge.n	d9080 <strftime+0x7d0>
   d9078:	f200 706c 	addw	r0, r0, #1900	; 0x76c
   d907c:	f000 fc68 	bl	d9950 <abs>
   d9080:	2364      	movs	r3, #100	; 0x64
   d9082:	fb90 f2f3 	sdiv	r2, r0, r3
   d9086:	fb02 0313 	mls	r3, r2, r3, r0
   d908a:	4a21      	ldr	r2, [pc, #132]	; (d9110 <strftime+0x860>)
   d908c:	e571      	b.n	d8b72 <strftime+0x2c2>
   d908e:	696b      	ldr	r3, [r5, #20]
   d9090:	4a20      	ldr	r2, [pc, #128]	; (d9114 <strftime+0x864>)
   d9092:	4293      	cmp	r3, r2
   d9094:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
   d9098:	da05      	bge.n	d90a6 <strftime+0x7f6>
   d909a:	232d      	movs	r3, #45	; 0x2d
   d909c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d90a0:	f1cb 0b00 	rsb	fp, fp, #0
   d90a4:	e008      	b.n	d90b8 <strftime+0x808>
   d90a6:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
   d90aa:	d10d      	bne.n	d90c8 <strftime+0x818>
   d90ac:	f242 730f 	movw	r3, #9999	; 0x270f
   d90b0:	459b      	cmp	fp, r3
   d90b2:	d911      	bls.n	d90d8 <strftime+0x828>
   d90b4:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
   d90b8:	f1b8 0f00 	cmp.w	r8, #0
   d90bc:	d001      	beq.n	d90c2 <strftime+0x812>
   d90be:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d90c2:	f10d 0329 	add.w	r3, sp, #41	; 0x29
   d90c6:	e000      	b.n	d90ca <strftime+0x81a>
   d90c8:	ab0a      	add	r3, sp, #40	; 0x28
   d90ca:	2225      	movs	r2, #37	; 0x25
   d90cc:	701a      	strb	r2, [r3, #0]
   d90ce:	f1ba 0f00 	cmp.w	sl, #0
   d90d2:	d108      	bne.n	d90e6 <strftime+0x836>
   d90d4:	1c58      	adds	r0, r3, #1
   d90d6:	e009      	b.n	d90ec <strftime+0x83c>
   d90d8:	f1b8 0f00 	cmp.w	r8, #0
   d90dc:	d1f4      	bne.n	d90c8 <strftime+0x818>
   d90de:	2325      	movs	r3, #37	; 0x25
   d90e0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   d90e4:	ab0a      	add	r3, sp, #40	; 0x28
   d90e6:	2230      	movs	r2, #48	; 0x30
   d90e8:	1c98      	adds	r0, r3, #2
   d90ea:	705a      	strb	r2, [r3, #1]
   d90ec:	490a      	ldr	r1, [pc, #40]	; (d9118 <strftime+0x868>)
   d90ee:	f7ff fb77 	bl	d87e0 <strcpy>
   d90f2:	f8cd b000 	str.w	fp, [sp]
   d90f6:	4643      	mov	r3, r8
   d90f8:	aa0a      	add	r2, sp, #40	; 0x28
   d90fa:	1b31      	subs	r1, r6, r4
   d90fc:	1938      	adds	r0, r7, r4
   d90fe:	e03e      	b.n	d917e <strftime+0x8ce>
   d9100:	2003e104 	.word	0x2003e104
   d9104:	000da2d1 	.word	0x000da2d1
   d9108:	000da2c7 	.word	0x000da2c7
   d910c:	000da2cc 	.word	0x000da2cc
   d9110:	000da2ad 	.word	0x000da2ad
   d9114:	fffff894 	.word	0xfffff894
   d9118:	000da2be 	.word	0x000da2be
   d911c:	6a2b      	ldr	r3, [r5, #32]
   d911e:	2b00      	cmp	r3, #0
   d9120:	db65      	blt.n	d91ee <strftime+0x93e>
   d9122:	f000 fa8d 	bl	d9640 <__tz_lock>
   d9126:	9b06      	ldr	r3, [sp, #24]
   d9128:	b91b      	cbnz	r3, d9132 <strftime+0x882>
   d912a:	f000 fa8b 	bl	d9644 <_tzset_unlocked>
   d912e:	2301      	movs	r3, #1
   d9130:	9306      	str	r3, [sp, #24]
   d9132:	f000 fc69 	bl	d9a08 <__gettzinfo>
   d9136:	6a2b      	ldr	r3, [r5, #32]
   d9138:	2b00      	cmp	r3, #0
   d913a:	bfd4      	ite	le
   d913c:	2300      	movle	r3, #0
   d913e:	2301      	movgt	r3, #1
   d9140:	221c      	movs	r2, #28
   d9142:	fb02 0003 	mla	r0, r2, r3, r0
   d9146:	eb07 0a04 	add.w	sl, r7, r4
   d914a:	6a03      	ldr	r3, [r0, #32]
   d914c:	f1c3 0800 	rsb	r8, r3, #0
   d9150:	f000 fa77 	bl	d9642 <__tz_unlock>
   d9154:	233c      	movs	r3, #60	; 0x3c
   d9156:	fb98 f0f3 	sdiv	r0, r8, r3
   d915a:	9307      	str	r3, [sp, #28]
   d915c:	f000 fc58 	bl	d9a10 <labs>
   d9160:	9b07      	ldr	r3, [sp, #28]
   d9162:	fb90 f2f3 	sdiv	r2, r0, r3
   d9166:	ebc4 0b06 	rsb	fp, r4, r6
   d916a:	fb02 0013 	mls	r0, r2, r3, r0
   d916e:	4a28      	ldr	r2, [pc, #160]	; (d9210 <strftime+0x960>)
   d9170:	9000      	str	r0, [sp, #0]
   d9172:	4659      	mov	r1, fp
   d9174:	4650      	mov	r0, sl
   d9176:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d917a:	fb98 f3f3 	sdiv	r3, r8, r3
   d917e:	f7fc f8b7 	bl	d52f0 <sniprintf>
   d9182:	e4fa      	b.n	d8b7a <strftime+0x2ca>
   d9184:	4404      	add	r4, r0
   d9186:	42a6      	cmp	r6, r4
   d9188:	d831      	bhi.n	d91ee <strftime+0x93e>
   d918a:	e03b      	b.n	d9204 <strftime+0x954>
   d918c:	6a2b      	ldr	r3, [r5, #32]
   d918e:	2b00      	cmp	r3, #0
   d9190:	db2d      	blt.n	d91ee <strftime+0x93e>
   d9192:	f000 fa55 	bl	d9640 <__tz_lock>
   d9196:	9b06      	ldr	r3, [sp, #24]
   d9198:	b91b      	cbnz	r3, d91a2 <strftime+0x8f2>
   d919a:	f000 fa53 	bl	d9644 <_tzset_unlocked>
   d919e:	2301      	movs	r3, #1
   d91a0:	9306      	str	r3, [sp, #24]
   d91a2:	6a2b      	ldr	r3, [r5, #32]
   d91a4:	4a1b      	ldr	r2, [pc, #108]	; (d9214 <strftime+0x964>)
   d91a6:	2b00      	cmp	r3, #0
   d91a8:	bfd4      	ite	le
   d91aa:	2300      	movle	r3, #0
   d91ac:	2301      	movgt	r3, #1
   d91ae:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
   d91b2:	4640      	mov	r0, r8
   d91b4:	f000 f830 	bl	d9218 <strlen>
   d91b8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   d91bc:	193b      	adds	r3, r7, r4
   d91be:	4420      	add	r0, r4
   d91c0:	4284      	cmp	r4, r0
   d91c2:	d00b      	beq.n	d91dc <strftime+0x92c>
   d91c4:	9a02      	ldr	r2, [sp, #8]
   d91c6:	4294      	cmp	r4, r2
   d91c8:	d205      	bcs.n	d91d6 <strftime+0x926>
   d91ca:	f818 2f01 	ldrb.w	r2, [r8, #1]!
   d91ce:	f803 2b01 	strb.w	r2, [r3], #1
   d91d2:	3401      	adds	r4, #1
   d91d4:	e7f4      	b.n	d91c0 <strftime+0x910>
   d91d6:	f000 fa34 	bl	d9642 <__tz_unlock>
   d91da:	e013      	b.n	d9204 <strftime+0x954>
   d91dc:	f000 fa31 	bl	d9642 <__tz_unlock>
   d91e0:	e005      	b.n	d91ee <strftime+0x93e>
   d91e2:	9b02      	ldr	r3, [sp, #8]
   d91e4:	429c      	cmp	r4, r3
   d91e6:	d20d      	bcs.n	d9204 <strftime+0x954>
   d91e8:	2325      	movs	r3, #37	; 0x25
   d91ea:	553b      	strb	r3, [r7, r4]
   d91ec:	3401      	adds	r4, #1
   d91ee:	f899 3000 	ldrb.w	r3, [r9]
   d91f2:	b11b      	cbz	r3, d91fc <strftime+0x94c>
   d91f4:	f109 0901 	add.w	r9, r9, #1
   d91f8:	f7ff bb69 	b.w	d88ce <strftime+0x1e>
   d91fc:	b126      	cbz	r6, d9208 <strftime+0x958>
   d91fe:	2300      	movs	r3, #0
   d9200:	553b      	strb	r3, [r7, r4]
   d9202:	e001      	b.n	d9208 <strftime+0x958>
   d9204:	2000      	movs	r0, #0
   d9206:	e000      	b.n	d920a <strftime+0x95a>
   d9208:	4620      	mov	r0, r4
   d920a:	b013      	add	sp, #76	; 0x4c
   d920c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9210:	000da2db 	.word	0x000da2db
   d9214:	2003e16c 	.word	0x2003e16c

000d9218 <strlen>:
   d9218:	4603      	mov	r3, r0
   d921a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d921e:	2a00      	cmp	r2, #0
   d9220:	d1fb      	bne.n	d921a <strlen+0x2>
   d9222:	1a18      	subs	r0, r3, r0
   d9224:	3801      	subs	r0, #1
   d9226:	4770      	bx	lr

000d9228 <strncmp>:
   d9228:	b530      	push	{r4, r5, lr}
   d922a:	b182      	cbz	r2, d924e <strncmp+0x26>
   d922c:	1e45      	subs	r5, r0, #1
   d922e:	3901      	subs	r1, #1
   d9230:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d9234:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9238:	42a3      	cmp	r3, r4
   d923a:	d106      	bne.n	d924a <strncmp+0x22>
   d923c:	43ec      	mvns	r4, r5
   d923e:	4414      	add	r4, r2
   d9240:	42e0      	cmn	r0, r4
   d9242:	d001      	beq.n	d9248 <strncmp+0x20>
   d9244:	2b00      	cmp	r3, #0
   d9246:	d1f3      	bne.n	d9230 <strncmp+0x8>
   d9248:	461c      	mov	r4, r3
   d924a:	1b18      	subs	r0, r3, r4
   d924c:	bd30      	pop	{r4, r5, pc}
   d924e:	4610      	mov	r0, r2
   d9250:	bd30      	pop	{r4, r5, pc}

000d9252 <strncpy>:
   d9252:	b510      	push	{r4, lr}
   d9254:	4603      	mov	r3, r0
   d9256:	b142      	cbz	r2, d926a <strncpy+0x18>
   d9258:	f811 4b01 	ldrb.w	r4, [r1], #1
   d925c:	f803 4b01 	strb.w	r4, [r3], #1
   d9260:	3a01      	subs	r2, #1
   d9262:	2c00      	cmp	r4, #0
   d9264:	d1f7      	bne.n	d9256 <strncpy+0x4>
   d9266:	441a      	add	r2, r3
   d9268:	e000      	b.n	d926c <strncpy+0x1a>
   d926a:	bd10      	pop	{r4, pc}
   d926c:	4293      	cmp	r3, r2
   d926e:	d002      	beq.n	d9276 <strncpy+0x24>
   d9270:	f803 4b01 	strb.w	r4, [r3], #1
   d9274:	e7fa      	b.n	d926c <strncpy+0x1a>
   d9276:	bd10      	pop	{r4, pc}

000d9278 <strrchr>:
   d9278:	b538      	push	{r3, r4, r5, lr}
   d927a:	4603      	mov	r3, r0
   d927c:	460d      	mov	r5, r1
   d927e:	b141      	cbz	r1, d9292 <strrchr+0x1a>
   d9280:	2400      	movs	r4, #0
   d9282:	4629      	mov	r1, r5
   d9284:	4618      	mov	r0, r3
   d9286:	f7ff fa89 	bl	d879c <strchr>
   d928a:	b130      	cbz	r0, d929a <strrchr+0x22>
   d928c:	1c43      	adds	r3, r0, #1
   d928e:	4604      	mov	r4, r0
   d9290:	e7f7      	b.n	d9282 <strrchr+0xa>
   d9292:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d9296:	f7ff ba81 	b.w	d879c <strchr>
   d929a:	4620      	mov	r0, r4
   d929c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d92a0 <_strtol_r>:
   d92a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d92a4:	4680      	mov	r8, r0
   d92a6:	4840      	ldr	r0, [pc, #256]	; (d93a8 <_strtol_r+0x108>)
   d92a8:	f8d0 9000 	ldr.w	r9, [r0]
   d92ac:	460f      	mov	r7, r1
   d92ae:	463d      	mov	r5, r7
   d92b0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d92b4:	eb09 0004 	add.w	r0, r9, r4
   d92b8:	7840      	ldrb	r0, [r0, #1]
   d92ba:	f000 0008 	and.w	r0, r0, #8
   d92be:	f000 06ff 	and.w	r6, r0, #255	; 0xff
   d92c2:	b108      	cbz	r0, d92c8 <_strtol_r+0x28>
   d92c4:	462f      	mov	r7, r5
   d92c6:	e7f2      	b.n	d92ae <_strtol_r+0xe>
   d92c8:	2c2d      	cmp	r4, #45	; 0x2d
   d92ca:	d103      	bne.n	d92d4 <_strtol_r+0x34>
   d92cc:	1cbd      	adds	r5, r7, #2
   d92ce:	787c      	ldrb	r4, [r7, #1]
   d92d0:	2601      	movs	r6, #1
   d92d2:	e003      	b.n	d92dc <_strtol_r+0x3c>
   d92d4:	2c2b      	cmp	r4, #43	; 0x2b
   d92d6:	bf04      	itt	eq
   d92d8:	787c      	ldrbeq	r4, [r7, #1]
   d92da:	1cbd      	addeq	r5, r7, #2
   d92dc:	b113      	cbz	r3, d92e4 <_strtol_r+0x44>
   d92de:	2b10      	cmp	r3, #16
   d92e0:	d10a      	bne.n	d92f8 <_strtol_r+0x58>
   d92e2:	e05b      	b.n	d939c <_strtol_r+0xfc>
   d92e4:	2c30      	cmp	r4, #48	; 0x30
   d92e6:	d157      	bne.n	d9398 <_strtol_r+0xf8>
   d92e8:	7828      	ldrb	r0, [r5, #0]
   d92ea:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d92ee:	2858      	cmp	r0, #88	; 0x58
   d92f0:	d14d      	bne.n	d938e <_strtol_r+0xee>
   d92f2:	786c      	ldrb	r4, [r5, #1]
   d92f4:	2310      	movs	r3, #16
   d92f6:	3502      	adds	r5, #2
   d92f8:	2e00      	cmp	r6, #0
   d92fa:	bf14      	ite	ne
   d92fc:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
   d9300:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
   d9304:	2700      	movs	r7, #0
   d9306:	fbbc faf3 	udiv	sl, ip, r3
   d930a:	4638      	mov	r0, r7
   d930c:	fb03 cc1a 	mls	ip, r3, sl, ip
   d9310:	eb09 0e04 	add.w	lr, r9, r4
   d9314:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9318:	f01e 0f04 	tst.w	lr, #4
   d931c:	d001      	beq.n	d9322 <_strtol_r+0x82>
   d931e:	3c30      	subs	r4, #48	; 0x30
   d9320:	e00b      	b.n	d933a <_strtol_r+0x9a>
   d9322:	f01e 0e03 	ands.w	lr, lr, #3
   d9326:	d01b      	beq.n	d9360 <_strtol_r+0xc0>
   d9328:	f1be 0f01 	cmp.w	lr, #1
   d932c:	bf0c      	ite	eq
   d932e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d9332:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9336:	ebce 0404 	rsb	r4, lr, r4
   d933a:	42a3      	cmp	r3, r4
   d933c:	dd10      	ble.n	d9360 <_strtol_r+0xc0>
   d933e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   d9342:	d00a      	beq.n	d935a <_strtol_r+0xba>
   d9344:	4550      	cmp	r0, sl
   d9346:	d806      	bhi.n	d9356 <_strtol_r+0xb6>
   d9348:	d101      	bne.n	d934e <_strtol_r+0xae>
   d934a:	4564      	cmp	r4, ip
   d934c:	dc03      	bgt.n	d9356 <_strtol_r+0xb6>
   d934e:	fb03 4000 	mla	r0, r3, r0, r4
   d9352:	2701      	movs	r7, #1
   d9354:	e001      	b.n	d935a <_strtol_r+0xba>
   d9356:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d935a:	f815 4b01 	ldrb.w	r4, [r5], #1
   d935e:	e7d7      	b.n	d9310 <_strtol_r+0x70>
   d9360:	1c7b      	adds	r3, r7, #1
   d9362:	d10c      	bne.n	d937e <_strtol_r+0xde>
   d9364:	2e00      	cmp	r6, #0
   d9366:	f04f 0322 	mov.w	r3, #34	; 0x22
   d936a:	bf14      	ite	ne
   d936c:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
   d9370:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d9374:	f8c8 3000 	str.w	r3, [r8]
   d9378:	b92a      	cbnz	r2, d9386 <_strtol_r+0xe6>
   d937a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d937e:	b106      	cbz	r6, d9382 <_strtol_r+0xe2>
   d9380:	4240      	negs	r0, r0
   d9382:	b172      	cbz	r2, d93a2 <_strtol_r+0x102>
   d9384:	b107      	cbz	r7, d9388 <_strtol_r+0xe8>
   d9386:	1e69      	subs	r1, r5, #1
   d9388:	6011      	str	r1, [r2, #0]
   d938a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d938e:	2430      	movs	r4, #48	; 0x30
   d9390:	2b00      	cmp	r3, #0
   d9392:	d1b1      	bne.n	d92f8 <_strtol_r+0x58>
   d9394:	2308      	movs	r3, #8
   d9396:	e7af      	b.n	d92f8 <_strtol_r+0x58>
   d9398:	230a      	movs	r3, #10
   d939a:	e7ad      	b.n	d92f8 <_strtol_r+0x58>
   d939c:	2c30      	cmp	r4, #48	; 0x30
   d939e:	d0a3      	beq.n	d92e8 <_strtol_r+0x48>
   d93a0:	e7aa      	b.n	d92f8 <_strtol_r+0x58>
   d93a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d93a6:	bf00      	nop
   d93a8:	2003e104 	.word	0x2003e104

000d93ac <strtol>:
   d93ac:	4613      	mov	r3, r2
   d93ae:	460a      	mov	r2, r1
   d93b0:	4601      	mov	r1, r0
   d93b2:	4802      	ldr	r0, [pc, #8]	; (d93bc <strtol+0x10>)
   d93b4:	6800      	ldr	r0, [r0, #0]
   d93b6:	f7ff bf73 	b.w	d92a0 <_strtol_r>
   d93ba:	bf00      	nop
   d93bc:	2003e168 	.word	0x2003e168

000d93c0 <_strtoul_r>:
   d93c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d93c4:	4680      	mov	r8, r0
   d93c6:	483c      	ldr	r0, [pc, #240]	; (d94b8 <_strtoul_r+0xf8>)
   d93c8:	f8d0 9000 	ldr.w	r9, [r0]
   d93cc:	460e      	mov	r6, r1
   d93ce:	4635      	mov	r5, r6
   d93d0:	f815 4b01 	ldrb.w	r4, [r5], #1
   d93d4:	eb09 0004 	add.w	r0, r9, r4
   d93d8:	7840      	ldrb	r0, [r0, #1]
   d93da:	f000 0008 	and.w	r0, r0, #8
   d93de:	f000 07ff 	and.w	r7, r0, #255	; 0xff
   d93e2:	b108      	cbz	r0, d93e8 <_strtoul_r+0x28>
   d93e4:	462e      	mov	r6, r5
   d93e6:	e7f2      	b.n	d93ce <_strtoul_r+0xe>
   d93e8:	2c2d      	cmp	r4, #45	; 0x2d
   d93ea:	d103      	bne.n	d93f4 <_strtoul_r+0x34>
   d93ec:	1cb5      	adds	r5, r6, #2
   d93ee:	7874      	ldrb	r4, [r6, #1]
   d93f0:	2701      	movs	r7, #1
   d93f2:	e003      	b.n	d93fc <_strtoul_r+0x3c>
   d93f4:	2c2b      	cmp	r4, #43	; 0x2b
   d93f6:	bf04      	itt	eq
   d93f8:	7874      	ldrbeq	r4, [r6, #1]
   d93fa:	1cb5      	addeq	r5, r6, #2
   d93fc:	b113      	cbz	r3, d9404 <_strtoul_r+0x44>
   d93fe:	2b10      	cmp	r3, #16
   d9400:	d10a      	bne.n	d9418 <_strtoul_r+0x58>
   d9402:	e053      	b.n	d94ac <_strtoul_r+0xec>
   d9404:	2c30      	cmp	r4, #48	; 0x30
   d9406:	d14f      	bne.n	d94a8 <_strtoul_r+0xe8>
   d9408:	7828      	ldrb	r0, [r5, #0]
   d940a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d940e:	2858      	cmp	r0, #88	; 0x58
   d9410:	d145      	bne.n	d949e <_strtoul_r+0xde>
   d9412:	786c      	ldrb	r4, [r5, #1]
   d9414:	2310      	movs	r3, #16
   d9416:	3502      	adds	r5, #2
   d9418:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d941c:	2600      	movs	r6, #0
   d941e:	fbbc fcf3 	udiv	ip, ip, r3
   d9422:	fb03 fa0c 	mul.w	sl, r3, ip
   d9426:	ea6f 0a0a 	mvn.w	sl, sl
   d942a:	4630      	mov	r0, r6
   d942c:	eb09 0e04 	add.w	lr, r9, r4
   d9430:	f89e e001 	ldrb.w	lr, [lr, #1]
   d9434:	f01e 0f04 	tst.w	lr, #4
   d9438:	d001      	beq.n	d943e <_strtoul_r+0x7e>
   d943a:	3c30      	subs	r4, #48	; 0x30
   d943c:	e00b      	b.n	d9456 <_strtoul_r+0x96>
   d943e:	f01e 0e03 	ands.w	lr, lr, #3
   d9442:	d01a      	beq.n	d947a <_strtoul_r+0xba>
   d9444:	f1be 0f01 	cmp.w	lr, #1
   d9448:	bf0c      	ite	eq
   d944a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
   d944e:	f04f 0e57 	movne.w	lr, #87	; 0x57
   d9452:	ebce 0404 	rsb	r4, lr, r4
   d9456:	42a3      	cmp	r3, r4
   d9458:	dd0f      	ble.n	d947a <_strtoul_r+0xba>
   d945a:	2e00      	cmp	r6, #0
   d945c:	db08      	blt.n	d9470 <_strtoul_r+0xb0>
   d945e:	4560      	cmp	r0, ip
   d9460:	d806      	bhi.n	d9470 <_strtoul_r+0xb0>
   d9462:	d101      	bne.n	d9468 <_strtoul_r+0xa8>
   d9464:	4554      	cmp	r4, sl
   d9466:	dc03      	bgt.n	d9470 <_strtoul_r+0xb0>
   d9468:	fb03 4000 	mla	r0, r3, r0, r4
   d946c:	2601      	movs	r6, #1
   d946e:	e001      	b.n	d9474 <_strtoul_r+0xb4>
   d9470:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d9474:	f815 4b01 	ldrb.w	r4, [r5], #1
   d9478:	e7d8      	b.n	d942c <_strtoul_r+0x6c>
   d947a:	2e00      	cmp	r6, #0
   d947c:	da07      	bge.n	d948e <_strtoul_r+0xce>
   d947e:	2322      	movs	r3, #34	; 0x22
   d9480:	f8c8 3000 	str.w	r3, [r8]
   d9484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9488:	b92a      	cbnz	r2, d9496 <_strtoul_r+0xd6>
   d948a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d948e:	b107      	cbz	r7, d9492 <_strtoul_r+0xd2>
   d9490:	4240      	negs	r0, r0
   d9492:	b172      	cbz	r2, d94b2 <_strtoul_r+0xf2>
   d9494:	b106      	cbz	r6, d9498 <_strtoul_r+0xd8>
   d9496:	1e69      	subs	r1, r5, #1
   d9498:	6011      	str	r1, [r2, #0]
   d949a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d949e:	2430      	movs	r4, #48	; 0x30
   d94a0:	2b00      	cmp	r3, #0
   d94a2:	d1b9      	bne.n	d9418 <_strtoul_r+0x58>
   d94a4:	2308      	movs	r3, #8
   d94a6:	e7b7      	b.n	d9418 <_strtoul_r+0x58>
   d94a8:	230a      	movs	r3, #10
   d94aa:	e7b5      	b.n	d9418 <_strtoul_r+0x58>
   d94ac:	2c30      	cmp	r4, #48	; 0x30
   d94ae:	d0ab      	beq.n	d9408 <_strtoul_r+0x48>
   d94b0:	e7b2      	b.n	d9418 <_strtoul_r+0x58>
   d94b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d94b6:	bf00      	nop
   d94b8:	2003e104 	.word	0x2003e104

000d94bc <strtoul>:
   d94bc:	4613      	mov	r3, r2
   d94be:	460a      	mov	r2, r1
   d94c0:	4601      	mov	r1, r0
   d94c2:	4802      	ldr	r0, [pc, #8]	; (d94cc <strtoul+0x10>)
   d94c4:	6800      	ldr	r0, [r0, #0]
   d94c6:	f7ff bf7b 	b.w	d93c0 <_strtoul_r>
   d94ca:	bf00      	nop
   d94cc:	2003e168 	.word	0x2003e168

000d94d0 <__get_current_time_locale>:
   d94d0:	4b04      	ldr	r3, [pc, #16]	; (d94e4 <__get_current_time_locale+0x14>)
   d94d2:	4a05      	ldr	r2, [pc, #20]	; (d94e8 <__get_current_time_locale+0x18>)
   d94d4:	6818      	ldr	r0, [r3, #0]
   d94d6:	4b05      	ldr	r3, [pc, #20]	; (d94ec <__get_current_time_locale+0x1c>)
   d94d8:	2800      	cmp	r0, #0
   d94da:	bf14      	ite	ne
   d94dc:	4610      	movne	r0, r2
   d94de:	4618      	moveq	r0, r3
   d94e0:	4770      	bx	lr
   d94e2:	bf00      	nop
   d94e4:	2003e6c8 	.word	0x2003e6c8
   d94e8:	2003e6cc 	.word	0x2003e6cc
   d94ec:	000da418 	.word	0x000da418

000d94f0 <__tzcalc_limits>:
   d94f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d94f4:	4604      	mov	r4, r0
   d94f6:	f000 fa87 	bl	d9a08 <__gettzinfo>
   d94fa:	f240 73b1 	movw	r3, #1969	; 0x7b1
   d94fe:	429c      	cmp	r4, r3
   d9500:	f340 8096 	ble.w	d9630 <__tzcalc_limits+0x140>
   d9504:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
   d9508:	18e3      	adds	r3, r4, r3
   d950a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
   d950e:	109b      	asrs	r3, r3, #2
   d9510:	f240 156d 	movw	r5, #365	; 0x16d
   d9514:	fb05 3502 	mla	r5, r5, r2, r3
   d9518:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
   d951c:	f06f 0363 	mvn.w	r3, #99	; 0x63
   d9520:	fb92 f3f3 	sdiv	r3, r2, r3
   d9524:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
   d9528:	442b      	add	r3, r5
   d952a:	18a5      	adds	r5, r4, r2
   d952c:	f44f 72c8 	mov.w	r2, #400	; 0x190
   d9530:	fb95 f5f2 	sdiv	r5, r5, r2
   d9534:	441d      	add	r5, r3
   d9536:	2364      	movs	r3, #100	; 0x64
   d9538:	fb94 f7f2 	sdiv	r7, r4, r2
   d953c:	fb94 f6f3 	sdiv	r6, r4, r3
   d9540:	fb02 4717 	mls	r7, r2, r7, r4
   d9544:	fb03 4616 	mls	r6, r3, r6, r4
   d9548:	f100 0338 	add.w	r3, r0, #56	; 0x38
   d954c:	fab7 fe87 	clz	lr, r7
   d9550:	9301      	str	r3, [sp, #4]
   d9552:	f004 0303 	and.w	r3, r4, #3
   d9556:	6044      	str	r4, [r0, #4]
   d9558:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
   d955c:	4601      	mov	r1, r0
   d955e:	9300      	str	r3, [sp, #0]
   d9560:	f04f 0c07 	mov.w	ip, #7
   d9564:	7a0b      	ldrb	r3, [r1, #8]
   d9566:	2b4a      	cmp	r3, #74	; 0x4a
   d9568:	d10e      	bne.n	d9588 <__tzcalc_limits+0x98>
   d956a:	694b      	ldr	r3, [r1, #20]
   d956c:	9a00      	ldr	r2, [sp, #0]
   d956e:	18ec      	adds	r4, r5, r3
   d9570:	b902      	cbnz	r2, d9574 <__tzcalc_limits+0x84>
   d9572:	b906      	cbnz	r6, d9576 <__tzcalc_limits+0x86>
   d9574:	b927      	cbnz	r7, d9580 <__tzcalc_limits+0x90>
   d9576:	2b3b      	cmp	r3, #59	; 0x3b
   d9578:	bfd4      	ite	le
   d957a:	2300      	movle	r3, #0
   d957c:	2301      	movgt	r3, #1
   d957e:	e000      	b.n	d9582 <__tzcalc_limits+0x92>
   d9580:	2300      	movs	r3, #0
   d9582:	4423      	add	r3, r4
   d9584:	3b01      	subs	r3, #1
   d9586:	e03f      	b.n	d9608 <__tzcalc_limits+0x118>
   d9588:	2b44      	cmp	r3, #68	; 0x44
   d958a:	d102      	bne.n	d9592 <__tzcalc_limits+0xa2>
   d958c:	694b      	ldr	r3, [r1, #20]
   d958e:	442b      	add	r3, r5
   d9590:	e03a      	b.n	d9608 <__tzcalc_limits+0x118>
   d9592:	9b00      	ldr	r3, [sp, #0]
   d9594:	b92b      	cbnz	r3, d95a2 <__tzcalc_limits+0xb2>
   d9596:	2e00      	cmp	r6, #0
   d9598:	bf0c      	ite	eq
   d959a:	46f0      	moveq	r8, lr
   d959c:	f04f 0801 	movne.w	r8, #1
   d95a0:	e000      	b.n	d95a4 <__tzcalc_limits+0xb4>
   d95a2:	46f0      	mov	r8, lr
   d95a4:	4b24      	ldr	r3, [pc, #144]	; (d9638 <__tzcalc_limits+0x148>)
   d95a6:	68cc      	ldr	r4, [r1, #12]
   d95a8:	2230      	movs	r2, #48	; 0x30
   d95aa:	fb02 3808 	mla	r8, r2, r8, r3
   d95ae:	f1a8 0a04 	sub.w	sl, r8, #4
   d95b2:	46a9      	mov	r9, r5
   d95b4:	2301      	movs	r3, #1
   d95b6:	42a3      	cmp	r3, r4
   d95b8:	da04      	bge.n	d95c4 <__tzcalc_limits+0xd4>
   d95ba:	f85a bf04 	ldr.w	fp, [sl, #4]!
   d95be:	3301      	adds	r3, #1
   d95c0:	44d9      	add	r9, fp
   d95c2:	e7f8      	b.n	d95b6 <__tzcalc_limits+0xc6>
   d95c4:	f109 0304 	add.w	r3, r9, #4
   d95c8:	fb93 fbfc 	sdiv	fp, r3, ip
   d95cc:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
   d95d0:	2c01      	cmp	r4, #1
   d95d2:	ebca 0a03 	rsb	sl, sl, r3
   d95d6:	694b      	ldr	r3, [r1, #20]
   d95d8:	bfb8      	it	lt
   d95da:	2401      	movlt	r4, #1
   d95dc:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
   d95e0:	ebb3 0a0a 	subs.w	sl, r3, sl
   d95e4:	690b      	ldr	r3, [r1, #16]
   d95e6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
   d95ea:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d95ee:	bf48      	it	mi
   d95f0:	f10a 0a07 	addmi.w	sl, sl, #7
   d95f4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   d95f8:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
   d95fc:	4453      	add	r3, sl
   d95fe:	42a3      	cmp	r3, r4
   d9600:	db01      	blt.n	d9606 <__tzcalc_limits+0x116>
   d9602:	3b07      	subs	r3, #7
   d9604:	e7fb      	b.n	d95fe <__tzcalc_limits+0x10e>
   d9606:	444b      	add	r3, r9
   d9608:	698c      	ldr	r4, [r1, #24]
   d960a:	4a0c      	ldr	r2, [pc, #48]	; (d963c <__tzcalc_limits+0x14c>)
   d960c:	fb02 4303 	mla	r3, r2, r3, r4
   d9610:	6a0c      	ldr	r4, [r1, #32]
   d9612:	4423      	add	r3, r4
   d9614:	f841 3f1c 	str.w	r3, [r1, #28]!
   d9618:	9b01      	ldr	r3, [sp, #4]
   d961a:	4299      	cmp	r1, r3
   d961c:	d1a2      	bne.n	d9564 <__tzcalc_limits+0x74>
   d961e:	69c3      	ldr	r3, [r0, #28]
   d9620:	6b82      	ldr	r2, [r0, #56]	; 0x38
   d9622:	4293      	cmp	r3, r2
   d9624:	bfac      	ite	ge
   d9626:	2300      	movge	r3, #0
   d9628:	2301      	movlt	r3, #1
   d962a:	6003      	str	r3, [r0, #0]
   d962c:	2001      	movs	r0, #1
   d962e:	e000      	b.n	d9632 <__tzcalc_limits+0x142>
   d9630:	2000      	movs	r0, #0
   d9632:	b003      	add	sp, #12
   d9634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d9638:	000da22c 	.word	0x000da22c
   d963c:	00015180 	.word	0x00015180

000d9640 <__tz_lock>:
   d9640:	4770      	bx	lr

000d9642 <__tz_unlock>:
   d9642:	4770      	bx	lr

000d9644 <_tzset_unlocked>:
   d9644:	4b01      	ldr	r3, [pc, #4]	; (d964c <_tzset_unlocked+0x8>)
   d9646:	6818      	ldr	r0, [r3, #0]
   d9648:	f000 b802 	b.w	d9650 <_tzset_unlocked_r>
   d964c:	2003e168 	.word	0x2003e168

000d9650 <_tzset_unlocked_r>:
   d9650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9654:	b08d      	sub	sp, #52	; 0x34
   d9656:	4607      	mov	r7, r0
   d9658:	f000 f9d6 	bl	d9a08 <__gettzinfo>
   d965c:	49b0      	ldr	r1, [pc, #704]	; (d9920 <_tzset_unlocked_r+0x2d0>)
   d965e:	4eb1      	ldr	r6, [pc, #708]	; (d9924 <_tzset_unlocked_r+0x2d4>)
   d9660:	4604      	mov	r4, r0
   d9662:	4638      	mov	r0, r7
   d9664:	f000 f9c8 	bl	d99f8 <_getenv_r>
   d9668:	4605      	mov	r5, r0
   d966a:	b960      	cbnz	r0, d9686 <_tzset_unlocked_r+0x36>
   d966c:	4bae      	ldr	r3, [pc, #696]	; (d9928 <_tzset_unlocked_r+0x2d8>)
   d966e:	4aaf      	ldr	r2, [pc, #700]	; (d992c <_tzset_unlocked_r+0x2dc>)
   d9670:	6018      	str	r0, [r3, #0]
   d9672:	4baf      	ldr	r3, [pc, #700]	; (d9930 <_tzset_unlocked_r+0x2e0>)
   d9674:	6018      	str	r0, [r3, #0]
   d9676:	4baf      	ldr	r3, [pc, #700]	; (d9934 <_tzset_unlocked_r+0x2e4>)
   d9678:	6830      	ldr	r0, [r6, #0]
   d967a:	601a      	str	r2, [r3, #0]
   d967c:	605a      	str	r2, [r3, #4]
   d967e:	f7fb fe0f 	bl	d52a0 <free>
   d9682:	6035      	str	r5, [r6, #0]
   d9684:	e148      	b.n	d9918 <_tzset_unlocked_r+0x2c8>
   d9686:	6831      	ldr	r1, [r6, #0]
   d9688:	b979      	cbnz	r1, d96aa <_tzset_unlocked_r+0x5a>
   d968a:	6830      	ldr	r0, [r6, #0]
   d968c:	f7fb fe08 	bl	d52a0 <free>
   d9690:	4628      	mov	r0, r5
   d9692:	f7ff fdc1 	bl	d9218 <strlen>
   d9696:	1c41      	adds	r1, r0, #1
   d9698:	4638      	mov	r0, r7
   d969a:	f7fb fe39 	bl	d5310 <_malloc_r>
   d969e:	6030      	str	r0, [r6, #0]
   d96a0:	b148      	cbz	r0, d96b6 <_tzset_unlocked_r+0x66>
   d96a2:	4629      	mov	r1, r5
   d96a4:	f7ff f89c 	bl	d87e0 <strcpy>
   d96a8:	e005      	b.n	d96b6 <_tzset_unlocked_r+0x66>
   d96aa:	f7ff f88f 	bl	d87cc <strcmp>
   d96ae:	2800      	cmp	r0, #0
   d96b0:	f000 8132 	beq.w	d9918 <_tzset_unlocked_r+0x2c8>
   d96b4:	e7e9      	b.n	d968a <_tzset_unlocked_r+0x3a>
   d96b6:	782b      	ldrb	r3, [r5, #0]
   d96b8:	4a9f      	ldr	r2, [pc, #636]	; (d9938 <_tzset_unlocked_r+0x2e8>)
   d96ba:	49a0      	ldr	r1, [pc, #640]	; (d993c <_tzset_unlocked_r+0x2ec>)
   d96bc:	2b3a      	cmp	r3, #58	; 0x3a
   d96be:	bf08      	it	eq
   d96c0:	3501      	addeq	r5, #1
   d96c2:	ae0a      	add	r6, sp, #40	; 0x28
   d96c4:	4633      	mov	r3, r6
   d96c6:	4628      	mov	r0, r5
   d96c8:	f7fb fe02 	bl	d52d0 <siscanf>
   d96cc:	2800      	cmp	r0, #0
   d96ce:	f340 8123 	ble.w	d9918 <_tzset_unlocked_r+0x2c8>
   d96d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d96d4:	18ef      	adds	r7, r5, r3
   d96d6:	5ceb      	ldrb	r3, [r5, r3]
   d96d8:	2b2d      	cmp	r3, #45	; 0x2d
   d96da:	d103      	bne.n	d96e4 <_tzset_unlocked_r+0x94>
   d96dc:	3701      	adds	r7, #1
   d96de:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   d96e2:	e003      	b.n	d96ec <_tzset_unlocked_r+0x9c>
   d96e4:	2b2b      	cmp	r3, #43	; 0x2b
   d96e6:	bf08      	it	eq
   d96e8:	3701      	addeq	r7, #1
   d96ea:	2501      	movs	r5, #1
   d96ec:	f10d 0a20 	add.w	sl, sp, #32
   d96f0:	f10d 0b1e 	add.w	fp, sp, #30
   d96f4:	f04f 0800 	mov.w	r8, #0
   d96f8:	9603      	str	r6, [sp, #12]
   d96fa:	f8cd a008 	str.w	sl, [sp, #8]
   d96fe:	9601      	str	r6, [sp, #4]
   d9700:	f8cd b000 	str.w	fp, [sp]
   d9704:	4633      	mov	r3, r6
   d9706:	aa07      	add	r2, sp, #28
   d9708:	498d      	ldr	r1, [pc, #564]	; (d9940 <_tzset_unlocked_r+0x2f0>)
   d970a:	f8ad 801e 	strh.w	r8, [sp, #30]
   d970e:	4638      	mov	r0, r7
   d9710:	f8ad 8020 	strh.w	r8, [sp, #32]
   d9714:	f7fb fddc 	bl	d52d0 <siscanf>
   d9718:	4540      	cmp	r0, r8
   d971a:	f340 80fd 	ble.w	d9918 <_tzset_unlocked_r+0x2c8>
   d971e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d9722:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d9726:	f8df 9224 	ldr.w	r9, [pc, #548]	; d994c <_tzset_unlocked_r+0x2fc>
   d972a:	213c      	movs	r1, #60	; 0x3c
   d972c:	fb01 3302 	mla	r3, r1, r2, r3
   d9730:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d9734:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d9738:	fb01 3302 	mla	r3, r1, r2, r3
   d973c:	435d      	muls	r5, r3
   d973e:	6225      	str	r5, [r4, #32]
   d9740:	4d7c      	ldr	r5, [pc, #496]	; (d9934 <_tzset_unlocked_r+0x2e4>)
   d9742:	4b7d      	ldr	r3, [pc, #500]	; (d9938 <_tzset_unlocked_r+0x2e8>)
   d9744:	602b      	str	r3, [r5, #0]
   d9746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9748:	497c      	ldr	r1, [pc, #496]	; (d993c <_tzset_unlocked_r+0x2ec>)
   d974a:	441f      	add	r7, r3
   d974c:	464a      	mov	r2, r9
   d974e:	4633      	mov	r3, r6
   d9750:	4638      	mov	r0, r7
   d9752:	f7fb fdbd 	bl	d52d0 <siscanf>
   d9756:	4540      	cmp	r0, r8
   d9758:	dc08      	bgt.n	d976c <_tzset_unlocked_r+0x11c>
   d975a:	682b      	ldr	r3, [r5, #0]
   d975c:	606b      	str	r3, [r5, #4]
   d975e:	4b72      	ldr	r3, [pc, #456]	; (d9928 <_tzset_unlocked_r+0x2d8>)
   d9760:	6a22      	ldr	r2, [r4, #32]
   d9762:	601a      	str	r2, [r3, #0]
   d9764:	4b72      	ldr	r3, [pc, #456]	; (d9930 <_tzset_unlocked_r+0x2e0>)
   d9766:	f8c3 8000 	str.w	r8, [r3]
   d976a:	e0d5      	b.n	d9918 <_tzset_unlocked_r+0x2c8>
   d976c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d976e:	f8c5 9004 	str.w	r9, [r5, #4]
   d9772:	18fd      	adds	r5, r7, r3
   d9774:	5cfb      	ldrb	r3, [r7, r3]
   d9776:	2b2d      	cmp	r3, #45	; 0x2d
   d9778:	d103      	bne.n	d9782 <_tzset_unlocked_r+0x132>
   d977a:	3501      	adds	r5, #1
   d977c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   d9780:	e003      	b.n	d978a <_tzset_unlocked_r+0x13a>
   d9782:	2b2b      	cmp	r3, #43	; 0x2b
   d9784:	bf08      	it	eq
   d9786:	3501      	addeq	r5, #1
   d9788:	2701      	movs	r7, #1
   d978a:	2300      	movs	r3, #0
   d978c:	f8ad 301c 	strh.w	r3, [sp, #28]
   d9790:	f8ad 301e 	strh.w	r3, [sp, #30]
   d9794:	f8ad 3020 	strh.w	r3, [sp, #32]
   d9798:	930a      	str	r3, [sp, #40]	; 0x28
   d979a:	9603      	str	r6, [sp, #12]
   d979c:	f8cd a008 	str.w	sl, [sp, #8]
   d97a0:	9601      	str	r6, [sp, #4]
   d97a2:	f8cd b000 	str.w	fp, [sp]
   d97a6:	4633      	mov	r3, r6
   d97a8:	aa07      	add	r2, sp, #28
   d97aa:	4965      	ldr	r1, [pc, #404]	; (d9940 <_tzset_unlocked_r+0x2f0>)
   d97ac:	4628      	mov	r0, r5
   d97ae:	f7fb fd8f 	bl	d52d0 <siscanf>
   d97b2:	2800      	cmp	r0, #0
   d97b4:	dc04      	bgt.n	d97c0 <_tzset_unlocked_r+0x170>
   d97b6:	6a23      	ldr	r3, [r4, #32]
   d97b8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
   d97bc:	63e3      	str	r3, [r4, #60]	; 0x3c
   d97be:	e00e      	b.n	d97de <_tzset_unlocked_r+0x18e>
   d97c0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d97c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d97c8:	213c      	movs	r1, #60	; 0x3c
   d97ca:	fb01 3302 	mla	r3, r1, r2, r3
   d97ce:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d97d2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d97d6:	fb01 3302 	mla	r3, r1, r2, r3
   d97da:	435f      	muls	r7, r3
   d97dc:	63e7      	str	r7, [r4, #60]	; 0x3c
   d97de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d97e0:	4627      	mov	r7, r4
   d97e2:	441d      	add	r5, r3
   d97e4:	f04f 0900 	mov.w	r9, #0
   d97e8:	782b      	ldrb	r3, [r5, #0]
   d97ea:	2b2c      	cmp	r3, #44	; 0x2c
   d97ec:	bf08      	it	eq
   d97ee:	3501      	addeq	r5, #1
   d97f0:	f895 8000 	ldrb.w	r8, [r5]
   d97f4:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
   d97f8:	d126      	bne.n	d9848 <_tzset_unlocked_r+0x1f8>
   d97fa:	f10d 0326 	add.w	r3, sp, #38	; 0x26
   d97fe:	9302      	str	r3, [sp, #8]
   d9800:	ab09      	add	r3, sp, #36	; 0x24
   d9802:	9300      	str	r3, [sp, #0]
   d9804:	9603      	str	r6, [sp, #12]
   d9806:	9601      	str	r6, [sp, #4]
   d9808:	4633      	mov	r3, r6
   d980a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
   d980e:	494d      	ldr	r1, [pc, #308]	; (d9944 <_tzset_unlocked_r+0x2f4>)
   d9810:	4628      	mov	r0, r5
   d9812:	f7fb fd5d 	bl	d52d0 <siscanf>
   d9816:	2803      	cmp	r0, #3
   d9818:	d17e      	bne.n	d9918 <_tzset_unlocked_r+0x2c8>
   d981a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
   d981e:	1e4b      	subs	r3, r1, #1
   d9820:	2b0b      	cmp	r3, #11
   d9822:	d879      	bhi.n	d9918 <_tzset_unlocked_r+0x2c8>
   d9824:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   d9828:	1e53      	subs	r3, r2, #1
   d982a:	2b04      	cmp	r3, #4
   d982c:	d874      	bhi.n	d9918 <_tzset_unlocked_r+0x2c8>
   d982e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
   d9832:	2b06      	cmp	r3, #6
   d9834:	d870      	bhi.n	d9918 <_tzset_unlocked_r+0x2c8>
   d9836:	f887 8008 	strb.w	r8, [r7, #8]
   d983a:	60f9      	str	r1, [r7, #12]
   d983c:	613a      	str	r2, [r7, #16]
   d983e:	617b      	str	r3, [r7, #20]
   d9840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d9842:	eb05 0803 	add.w	r8, r5, r3
   d9846:	e02a      	b.n	d989e <_tzset_unlocked_r+0x24e>
   d9848:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
   d984c:	bf06      	itte	eq
   d984e:	3501      	addeq	r5, #1
   d9850:	4643      	moveq	r3, r8
   d9852:	2344      	movne	r3, #68	; 0x44
   d9854:	220a      	movs	r2, #10
   d9856:	a90b      	add	r1, sp, #44	; 0x2c
   d9858:	4628      	mov	r0, r5
   d985a:	9305      	str	r3, [sp, #20]
   d985c:	f7ff fe2e 	bl	d94bc <strtoul>
   d9860:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   d9864:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
   d9868:	4545      	cmp	r5, r8
   d986a:	9b05      	ldr	r3, [sp, #20]
   d986c:	d114      	bne.n	d9898 <_tzset_unlocked_r+0x248>
   d986e:	234d      	movs	r3, #77	; 0x4d
   d9870:	f1b9 0f00 	cmp.w	r9, #0
   d9874:	d107      	bne.n	d9886 <_tzset_unlocked_r+0x236>
   d9876:	7223      	strb	r3, [r4, #8]
   d9878:	2303      	movs	r3, #3
   d987a:	60e3      	str	r3, [r4, #12]
   d987c:	2302      	movs	r3, #2
   d987e:	6123      	str	r3, [r4, #16]
   d9880:	f8c4 9014 	str.w	r9, [r4, #20]
   d9884:	e00b      	b.n	d989e <_tzset_unlocked_r+0x24e>
   d9886:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
   d988a:	230b      	movs	r3, #11
   d988c:	62a3      	str	r3, [r4, #40]	; 0x28
   d988e:	2301      	movs	r3, #1
   d9890:	62e3      	str	r3, [r4, #44]	; 0x2c
   d9892:	2300      	movs	r3, #0
   d9894:	6323      	str	r3, [r4, #48]	; 0x30
   d9896:	e002      	b.n	d989e <_tzset_unlocked_r+0x24e>
   d9898:	b280      	uxth	r0, r0
   d989a:	723b      	strb	r3, [r7, #8]
   d989c:	6178      	str	r0, [r7, #20]
   d989e:	2302      	movs	r3, #2
   d98a0:	f8ad 301c 	strh.w	r3, [sp, #28]
   d98a4:	2300      	movs	r3, #0
   d98a6:	f8ad 301e 	strh.w	r3, [sp, #30]
   d98aa:	f8ad 3020 	strh.w	r3, [sp, #32]
   d98ae:	930a      	str	r3, [sp, #40]	; 0x28
   d98b0:	f898 3000 	ldrb.w	r3, [r8]
   d98b4:	2b2f      	cmp	r3, #47	; 0x2f
   d98b6:	d10b      	bne.n	d98d0 <_tzset_unlocked_r+0x280>
   d98b8:	9603      	str	r6, [sp, #12]
   d98ba:	f8cd a008 	str.w	sl, [sp, #8]
   d98be:	9601      	str	r6, [sp, #4]
   d98c0:	f8cd b000 	str.w	fp, [sp]
   d98c4:	4633      	mov	r3, r6
   d98c6:	aa07      	add	r2, sp, #28
   d98c8:	491f      	ldr	r1, [pc, #124]	; (d9948 <_tzset_unlocked_r+0x2f8>)
   d98ca:	4640      	mov	r0, r8
   d98cc:	f7fb fd00 	bl	d52d0 <siscanf>
   d98d0:	f8bd 201e 	ldrh.w	r2, [sp, #30]
   d98d4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   d98d8:	213c      	movs	r1, #60	; 0x3c
   d98da:	fb01 3302 	mla	r3, r1, r2, r3
   d98de:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   d98e2:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   d98e6:	fb01 3302 	mla	r3, r1, r2, r3
   d98ea:	61bb      	str	r3, [r7, #24]
   d98ec:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   d98ee:	f109 0901 	add.w	r9, r9, #1
   d98f2:	f1b9 0f02 	cmp.w	r9, #2
   d98f6:	4445      	add	r5, r8
   d98f8:	f107 071c 	add.w	r7, r7, #28
   d98fc:	f47f af74 	bne.w	d97e8 <_tzset_unlocked_r+0x198>
   d9900:	6860      	ldr	r0, [r4, #4]
   d9902:	f7ff fdf5 	bl	d94f0 <__tzcalc_limits>
   d9906:	4b08      	ldr	r3, [pc, #32]	; (d9928 <_tzset_unlocked_r+0x2d8>)
   d9908:	6a22      	ldr	r2, [r4, #32]
   d990a:	601a      	str	r2, [r3, #0]
   d990c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d990e:	1a9b      	subs	r3, r3, r2
   d9910:	4a07      	ldr	r2, [pc, #28]	; (d9930 <_tzset_unlocked_r+0x2e0>)
   d9912:	bf18      	it	ne
   d9914:	2301      	movne	r3, #1
   d9916:	6013      	str	r3, [r2, #0]
   d9918:	b00d      	add	sp, #52	; 0x34
   d991a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d991e:	bf00      	nop
   d9920:	000da514 	.word	0x000da514
   d9924:	2003e7e0 	.word	0x2003e7e0
   d9928:	2003e7e8 	.word	0x2003e7e8
   d992c:	000da517 	.word	0x000da517
   d9930:	2003e7e4 	.word	0x2003e7e4
   d9934:	2003e16c 	.word	0x2003e16c
   d9938:	2003e7d3 	.word	0x2003e7d3
   d993c:	000da51b 	.word	0x000da51b
   d9940:	000da53e 	.word	0x000da53e
   d9944:	000da52a 	.word	0x000da52a
   d9948:	000da53d 	.word	0x000da53d
   d994c:	2003e7c8 	.word	0x2003e7c8

000d9950 <abs>:
   d9950:	2800      	cmp	r0, #0
   d9952:	bfb8      	it	lt
   d9954:	4240      	neglt	r0, r0
   d9956:	4770      	bx	lr

000d9958 <div>:
   d9958:	2900      	cmp	r1, #0
   d995a:	b510      	push	{r4, lr}
   d995c:	fb91 f4f2 	sdiv	r4, r1, r2
   d9960:	fb02 1314 	mls	r3, r2, r4, r1
   d9964:	db04      	blt.n	d9970 <div+0x18>
   d9966:	2b00      	cmp	r3, #0
   d9968:	da07      	bge.n	d997a <div+0x22>
   d996a:	3401      	adds	r4, #1
   d996c:	1a9b      	subs	r3, r3, r2
   d996e:	e004      	b.n	d997a <div+0x22>
   d9970:	2b00      	cmp	r3, #0
   d9972:	bfc4      	itt	gt
   d9974:	f104 34ff 	addgt.w	r4, r4, #4294967295	; 0xffffffff
   d9978:	189b      	addgt	r3, r3, r2
   d997a:	6004      	str	r4, [r0, #0]
   d997c:	6043      	str	r3, [r0, #4]
   d997e:	bd10      	pop	{r4, pc}

000d9980 <_findenv_r>:
   d9980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d9984:	4607      	mov	r7, r0
   d9986:	468b      	mov	fp, r1
   d9988:	4690      	mov	r8, r2
   d998a:	f000 f845 	bl	d9a18 <__env_lock>
   d998e:	4b19      	ldr	r3, [pc, #100]	; (d99f4 <_findenv_r+0x74>)
   d9990:	681d      	ldr	r5, [r3, #0]
   d9992:	469a      	mov	sl, r3
   d9994:	b13d      	cbz	r5, d99a6 <_findenv_r+0x26>
   d9996:	465c      	mov	r4, fp
   d9998:	4623      	mov	r3, r4
   d999a:	f813 2b01 	ldrb.w	r2, [r3], #1
   d999e:	b142      	cbz	r2, d99b2 <_findenv_r+0x32>
   d99a0:	2a3d      	cmp	r2, #61	; 0x3d
   d99a2:	461c      	mov	r4, r3
   d99a4:	d1f8      	bne.n	d9998 <_findenv_r+0x18>
   d99a6:	4638      	mov	r0, r7
   d99a8:	f000 f837 	bl	d9a1a <__env_unlock>
   d99ac:	2000      	movs	r0, #0
   d99ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d99b2:	ebcb 0404 	rsb	r4, fp, r4
   d99b6:	46a9      	mov	r9, r5
   d99b8:	f859 0b04 	ldr.w	r0, [r9], #4
   d99bc:	2800      	cmp	r0, #0
   d99be:	d0f2      	beq.n	d99a6 <_findenv_r+0x26>
   d99c0:	4622      	mov	r2, r4
   d99c2:	4659      	mov	r1, fp
   d99c4:	f7ff fc30 	bl	d9228 <strncmp>
   d99c8:	b988      	cbnz	r0, d99ee <_findenv_r+0x6e>
   d99ca:	f859 3c04 	ldr.w	r3, [r9, #-4]
   d99ce:	191e      	adds	r6, r3, r4
   d99d0:	5d1b      	ldrb	r3, [r3, r4]
   d99d2:	2b3d      	cmp	r3, #61	; 0x3d
   d99d4:	d10b      	bne.n	d99ee <_findenv_r+0x6e>
   d99d6:	f8da 3000 	ldr.w	r3, [sl]
   d99da:	1aed      	subs	r5, r5, r3
   d99dc:	10ad      	asrs	r5, r5, #2
   d99de:	4638      	mov	r0, r7
   d99e0:	f8c8 5000 	str.w	r5, [r8]
   d99e4:	f000 f819 	bl	d9a1a <__env_unlock>
   d99e8:	1c70      	adds	r0, r6, #1
   d99ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d99ee:	464d      	mov	r5, r9
   d99f0:	e7e1      	b.n	d99b6 <_findenv_r+0x36>
   d99f2:	bf00      	nop
   d99f4:	2003e1b4 	.word	0x2003e1b4

000d99f8 <_getenv_r>:
   d99f8:	b507      	push	{r0, r1, r2, lr}
   d99fa:	aa01      	add	r2, sp, #4
   d99fc:	f7ff ffc0 	bl	d9980 <_findenv_r>
   d9a00:	b003      	add	sp, #12
   d9a02:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d9a08 <__gettzinfo>:
   d9a08:	4800      	ldr	r0, [pc, #0]	; (d9a0c <__gettzinfo+0x4>)
   d9a0a:	4770      	bx	lr
   d9a0c:	2003e174 	.word	0x2003e174

000d9a10 <labs>:
   d9a10:	2800      	cmp	r0, #0
   d9a12:	bfb8      	it	lt
   d9a14:	4240      	neglt	r0, r0
   d9a16:	4770      	bx	lr

000d9a18 <__env_lock>:
   d9a18:	4770      	bx	lr

000d9a1a <__env_unlock>:
   d9a1a:	4770      	bx	lr

000d9a1c <dynalib_user>:
   d9a1c:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d9a2c:	0000 0000                                   ....

000d9a30 <_ZTVN5spark10LogHandlerE>:
	...
   d9a40:	40a1 000d 40c5 000d                         .@...@..

000d9a48 <_ZTVN5spark17Serial1LogHandlerE>:
	...
   d9a50:	40d1 000d 4105 000d 66d9 000d 40c7 000d     .@...A...f...@..

000d9a60 <_ZTV18Serial1DebugOutput>:
	...
   d9a68:	4119 000d 412d 000d 66d9 000d 40c7 000d     .A..-A...f...@..
   d9a78:	9b26 000d 9b57 000d 9b5b 000d 9b64 000d     &...W...[...d...
   d9a88:	9b6c 000d 9b78 000d 9b7e 000d 9b26 000d     l...x...~...&...
   d9a98:	9b2e 000d 9b32 000d 9b3b 000d 9b47 000d     ....2...;...G...
   d9aa8:	9b4f 000d 7543 7272 6e65 2074 4d50 4349     O...Current PMIC
   d9ab8:	7320 7465 6974 676e 3a73 5600 4e49 5620      settings:.VIN V
   d9ac8:	696d 3a6e 2520 0075 4956 204e 6d49 7861     min: %u.VIN Imax
   d9ad8:	203a 7525 4900 6863 3a67 2520 0075 7449     : %u.Ichg: %u.It
   d9ae8:	7265 3a6d 2520 0075 6f50 6577 2072 6f73     erm: %u.Power so
   d9af8:	7275 6563 203a 7325 4200 7461 6574 7972     urce: %s.Battery
   d9b08:	7320 6174 6574 203a 7325 4200 7461 6574      state: %s.Batte
   d9b18:	7972 6320 6168 6772 3a65 2520 0066 6e75     ry charge: %f.un
   d9b28:	6e6b 776f 006e 6976 006e 7375 2062 6f68     known.vin.usb ho
   d9b38:	7473 7500 6273 6120 6164 7470 7265 7500     st.usb adapter.u
   d9b48:	6273 6f20 6774 6200 7461 6574 7972 6e00     sb otg.battery.n
   d9b58:	746f 6320 6168 6772 6e69 0067 6863 7261     ot charging.char
   d9b68:	6567 0064 6964 6373 6168 6772 6e69 0067     ged.discharging.
   d9b78:	6166 6c75 0074 6964 6373 6e6f 656e 7463     fault.disconnect
   d9b88:	6465 0000                                   ed..

000d9b8c <_ZTV14MCP79410EEPROM>:
	...
   d9b94:	457f 000d 45a1 000d 4575 000d 4579 000d     .E...E..uE..yE..
   d9ba4:	45bd 000d 4a19 000d 4d45 000d               .E...J..EM..

000d9bb0 <_ZTV12MCP79410SRAM>:
	...
   d9bb8:	457d 000d 4593 000d 456d 000d 4571 000d     }E...E..mE..qE..
   d9bc8:	45bd 000d 4a51 000d 4c8b 000d 6579 7261     .E..QJ...L..year
   d9bd8:	253d 3230 2078 6f6d 746e 3d68 3025 7832     =%02x month=%02x
   d9be8:	6420 7961 664f 6f4d 746e 3d68 3025 7832      dayOfMonth=%02x
   d9bf8:	6420 7961 664f 6557 6b65 253d 3230 2078      dayOfWeek=%02x 
   d9c08:	6f68 7275 253d 3230 2078 696d 756e 6574     hour=%02x minute
   d9c18:	253d 3230 2078 6573 6f63 646e 253d 3230     =%02x second=%02
   d9c28:	2078 6f6d 6564 253d 0064 6564 6976 6563     x mode=%d.device
   d9c38:	6552 6461 6620 6961 656c 2064 7473 7461     Read failed stat
   d9c48:	253d 0064 6573 2074 6954 656d 6620 6f72     =%d.set Time fro
   d9c58:	206d 5452 2043 7325 6400 7665 6369 5765     m RTC %s.deviceW
   d9c68:	6972 6574 6620 6961 656c 2064 7473 7461     rite failed stat
   d9c78:	253d 0064 6573 2074 5452 2043 7266 6d6f     =%d.set RTC from
   d9c88:	6320 6f6c 6475 2520 0073 6c63 756f 2064      cloud %s.cloud 
   d9c98:	6974 656d 6e20 746f 7620 6c61 6469 6400     time not valid.d
   d9ca8:	7665 6369 5765 6972 6574 4545 5250 4d4f     eviceWriteEEPROM
   d9cb8:	6620 6961 656c 2064 7473 7461 253d 0064      failed stat=%d.
   d9cc8:	7061 2e70 7472 0063                         app.rtc.

000d9cd0 <_ZTV12MCP79410Time>:
	...
   d9cd8:	4581 000d 4585 000d                         .E...E..

000d9ce0 <_ZTV8MCP79410>:
	...
   d9ce8:	4583 000d 45af 000d                         .E...E..

000d9cf0 <_ZTVN5spark13CellularClassE>:
	...
   d9cf8:	542f 000d 5425 000d 541b 000d 53d1 000d     /T..%T...T...S..
   d9d08:	540f 000d 5403 000d 53f7 000d 53ef 000d     .T...T...S...S..
   d9d18:	53e5 000d 53db 000d 6be9 000d               .S...S...k..

000d9d24 <_ZTVN5spark13EthernetClassE>:
	...
   d9d2c:	54d9 000d 54cf 000d 54c5 000d 54bb 000d     .T...T...T...T..
   d9d3c:	54af 000d 54a3 000d 5497 000d 548f 000d     .T...T...T...T..
   d9d4c:	5485 000d 547b 000d 6be9 000d               .T..{T...k..

000d9d58 <_ZTV7TwoWire>:
	...
   d9d60:	54f9 000d 5543 000d 551b 000d 54fb 000d     .T..CU...U...T..
   d9d70:	5523 000d 552b 000d 5533 000d 553b 000d     #U..+U..3U..;U..

000d9d80 <_ZTV9IPAddress>:
	...
   d9d88:	562f 000d 561f 000d 5621 000d 2e30 0030     /V...V..!V..0.0.
   d9d98:	6166 736c 0065 7274 6575 2500 2a2e 666c     false.true.%.*lf
   d9da8:	2500 0067 756e 6c6c 7500 3025 7834 0000     .%g.null.u%04x..

000d9db8 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d9dc0:	5ab5 000d 5adb 000d 5a8f 000d 5733 000d     .Z...Z...Z..3W..

000d9dd0 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d9dd8:	5f31 000d 5f45 000d 688d 000d 5a97 000d     1_..E_...h...Z..
   d9de8:	6162 6475 5300 7265 6169 006c 6553 6972     baud.Serial.Seri
   d9df8:	6c61 0031 7974 6570 7000 7261 6d61 6300     al1.type.param.c
   d9e08:	646d 6800 646e 7300 7274 006d 6966 746c     md.hnd.strm.filt
   d9e18:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
   d9e28:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
   d9e38:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
   d9e48:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
   d9e58:	7061 0070 3025 3031 2075 5d00 0020 202c     app.%010u .] ., 
   d9e68:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
   d9e78:	2500 0069 6564 6174 6c69 2073 203d 0d00     .%i.details = ..
   d9e88:	000a 6e6c 6600 006e 6f63 6564 6400 7465     ..ln.fn.code.det
   d9e98:	6961 006c 6f6e 656e 7400 6172 6563 6900     ail.none.trace.i
   d9ea8:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
   d9eb8:	6e61 6369 6100 6c6c 0000 0000               anic.all....

000d9ec4 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d9ecc:	5f05 000d 5f1d 000d 66d9 000d 40c7 000d     ._..._...f...@..

000d9edc <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d9ee4:	5ab3 000d 5ae9 000d 6601 000d 5a99 000d     .Z...Z...f...Z..

000d9ef4 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d9efc:	5ab1 000d 5af7 000d 5e49 000d 5b05 000d     .Z...Z..I^...[..

000d9f0c <_ZTVN5spark9MeshClassE>:
	...
   d9f14:	6a63 000d 6a59 000d 6a4f 000d 6a45 000d     cj..Yj..Oj..Ej..
   d9f24:	6a39 000d 6a2d 000d 6a21 000d 6a19 000d     9j..-j..!j...j..
   d9f34:	6a0f 000d 6a05 000d 6be9 000d               .j...j...k..

000d9f40 <_ZTVN5spark12NetworkClassE>:
	...
   d9f48:	6b81 000d 6b8b 000d 6b95 000d 6b9f 000d     .k...k...k...k..
   d9f58:	6ba9 000d 6bb5 000d 6bc1 000d 6bcd 000d     .k...k...k...k..
   d9f68:	6bd5 000d 6bdf 000d 6be9 000d               .k...k...k..

000d9f74 <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
   d9f74:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............
   d9f84:	2b25 3330 3a64 3025 7532 2500 2d59 6d25     %+03d:%02u.%Y-%m
   d9f94:	252d 5464 4825 253a 3a4d 5325 7a25 6100     -%dT%H:%M:%S%z.a
   d9fa4:	6373 6974 656d 0000                         sctime..

000d9fac <_ZTV11USARTSerial>:
	...
   d9fb4:	7341 000d 7391 000d 739f 000d 6e0d 000d     As...s...s...n..
   d9fc4:	7355 000d 7377 000d 7363 000d 738b 000d     Us..ws..cs...s..
   d9fd4:	7343 000d 7347 000d                         Cs..Gs..

000d9fdc <_ZTV9USBSerial>:
	...
   d9fe4:	745d 000d 74ad 000d 74bb 000d 6e0d 000d     ]t...t...t...n..
   d9ff4:	7499 000d 745f 000d 7475 000d 74a7 000d     .t.._t..ut...t..
   da004:	748b 000d 7459 000d                         .t..Yt..

000da00c <_ZSt7nothrow>:
	...

000da00d <day_name.4725>:
   da00d:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   da01d:	6972 6153 4a74                                   riSat

000da022 <mon_name.4726>:
   da022:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   da032:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   da042:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
   da052:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
   da062:	6425 000a                                   %d..

000da066 <_ctype_>:
   da066:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   da076:	2020 2020 2020 2020 2020 2020 2020 2020                     
   da086:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   da096:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   da0a6:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   da0b6:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   da0c6:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   da0d6:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   da0e6:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000da168 <__sf_fake_stdin>:
	...

000da188 <__sf_fake_stdout>:
	...

000da1a8 <__sf_fake_stderr>:
	...
   da1c8:	0043 0000                                   C...

000da1cc <_DAYS_BEFORE_MONTH>:
   da1cc:	0000 0000 001f 0000 003b 0000 005a 0000     ........;...Z...
   da1dc:	0078 0000 0097 0000 00b5 0000 00d4 0000     x...............
   da1ec:	00f3 0000 0111 0000 0130 0000 014e 0000     ........0...N...

000da1fc <DAYS_IN_MONTH>:
   da1fc:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   da20c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da21c:	001e 0000 001f 0000 001e 0000 001f 0000     ................

000da22c <__month_lengths>:
   da22c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
   da23c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da24c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da25c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
   da26c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
   da27c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
   da28c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
   da29c:	2d00 2500 6432 2500 322e 2f64 2e25 6432     .-.%2d.%.2d/%.2d
   da2ac:	252f 322e 0064 6c25 0075 2d59 6d25 252d     /%.2d.%lu.Y-%m-%
   da2bc:	0064 2a2e 0075 2e25 6433 2500 6c6c 0064     d..*u.%.3d.%lld.
   da2cc:	2e25 6432 253a 322e 3a64 2e25 6432 2500     %.2d:%.2d:%.2d.%
   da2dc:	302b 6c33 2564 322e 646c 4c00 5f43 4954     +03ld%.2ld.LC_TI
   da2ec:	454d 4a00 6e61 4600 6265 4d00 7261 4100     ME.Jan.Feb.Mar.A
   da2fc:	7270 4d00 7961 4a00 6e75 4a00 6c75 4100     pr.May.Jun.Jul.A
   da30c:	6775 5300 7065 4f00 7463 4e00 766f 4400     ug.Sep.Oct.Nov.D
   da31c:	6365 4a00 6e61 6175 7972 4600 6265 7572     ec.January.Febru
   da32c:	7261 0079 614d 6372 0068 7041 6972 006c     ary.March.April.
   da33c:	754a 656e 4a00 6c75 0079 7541 7567 7473     June.July.August
   da34c:	5300 7065 6574 626d 7265 4f00 7463 626f     .September.Octob
   da35c:	7265 4e00 766f 6d65 6562 0072 6544 6563     er.November.Dece
   da36c:	626d 7265 5300 6e75 4d00 6e6f 5400 6575     mber.Sun.Mon.Tue
   da37c:	5700 6465 5400 7568 4600 6972 5300 7461     .Wed.Thu.Fri.Sat
   da38c:	5300 6e75 6164 0079 6f4d 646e 7961 5400     .Sunday.Monday.T
   da39c:	6575 6473 7961 5700 6465 656e 6473 7961     uesday.Wednesday
   da3ac:	5400 7568 7372 6164 0079 7246 6469 7961     .Thursday.Friday
   da3bc:	5300 7461 7275 6164 0079 4825 253a 3a4d     .Saturday.%H:%M:
   da3cc:	5325 2500 2f6d 6425 252f 0079 6125 2520     %S.%m/%d/%y.%a %
   da3dc:	2062 6525 2520 3a48 4d25 253a 2053 5925     b %e %H:%M:%S %Y
   da3ec:	4100 004d 4d50 2500 2061 6225 2520 2065     .AM.PM.%a %b %e 
   da3fc:	4825 253a 3a4d 5325 2520 205a 5925 2500     %H:%M:%S %Z %Y.%
   da40c:	3a49 4d25 253a 2053 7025 0000               I:%M:%S %p..

000da418 <_C_time_locale>:
   da418:	a2ef 000d a2f3 000d a2f7 000d a2fb 000d     ................
   da428:	a2ff 000d a303 000d a307 000d a30b 000d     ................
   da438:	a30f 000d a313 000d a317 000d a31b 000d     ................
   da448:	a31f 000d a327 000d a330 000d a336 000d     ....'...0...6...
   da458:	a2ff 000d a33c 000d a341 000d a346 000d     ....<...A...F...
   da468:	a34d 000d a357 000d a35f 000d a368 000d     M...W..._...h...
   da478:	a371 000d a375 000d a379 000d a37d 000d     q...u...y...}...
   da488:	a381 000d a385 000d a389 000d a38d 000d     ................
   da498:	a394 000d a39b 000d a3a3 000d a3ad 000d     ................
   da4a8:	a3b6 000d a3bd 000d a3c6 000d a3cf 000d     ................
   da4b8:	a3d8 000d a3ed 000d a3f0 000d a3f3 000d     ................
   da4c8:	a31f 000d a327 000d a330 000d a336 000d     ....'...0...6...
   da4d8:	a2ff 000d a33c 000d a341 000d a346 000d     ....<...A...F...
   da4e8:	a34d 000d a357 000d a35f 000d a368 000d     M...W..._...h...
   da4f8:	9e08 000d a40b 000d 9e89 000d 9e89 000d     ................
   da508:	9e89 000d 9e89 000d 9e89 000d 5a54 4700     ............TZ.G
   da518:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
   da528:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
   da538:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
   da548:	3a6e 6825 2575 006e                         n:%hu%n.

000da550 <link_const_variable_data_end>:
   da550:	000d451d 	.word	0x000d451d
   da554:	000d4d7d 	.word	0x000d4d7d
   da558:	000d53a9 	.word	0x000d53a9
   da55c:	000d5439 	.word	0x000d5439
   da560:	000d54e5 	.word	0x000d54e5
   da564:	000d66c9 	.word	0x000d66c9
   da568:	000d6b31 	.word	0x000d6b31
   da56c:	000d6cb5 	.word	0x000d6cb5
   da570:	000d6f39 	.word	0x000d6f39
   da574:	000d7095 	.word	0x000d7095
   da578:	000d732d 	.word	0x000d732d
   da57c:	000d787d 	.word	0x000d787d
   da580:	000d7941 	.word	0x000d7941
   da584:	000d79c5 	.word	0x000d79c5
   da588:	000d7a49 	.word	0x000d7a49

000da58c <link_constructors_end>:
   da58c:	00000000 	.word	0x00000000
