
/Users/chipmc/Documents/Maker/Particle/Utilities/Simple-Enable-Sleep/target/1.5.0/boron/Simple-Enable-Sleep.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002094  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d60b0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000a8  2003e31c  000d60b4  0001e31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000042c  2003e3c4  2003e3c4  0002e3c4  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d615c  000d615c  0002615c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6184  000d6184  00026184  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000cd55f  00000000  00000000  00026188  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000e64c  00000000  00000000  000f36e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c9ff  00000000  00000000  00101d33  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002230  00000000  00000000  0011e732  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004268  00000000  00000000  00120962  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00030ca3  00000000  00000000  00124bca  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00021cd7  00000000  00000000  0015586d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010568e  00000000  00000000  00177544  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c71c  00000000  00000000  0027cbd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f001 fd93 	bl	d5b58 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f001 fd98 	bl	d5b6e <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e31c 	.word	0x2003e31c
   d4048:	000d60b4 	.word	0x000d60b4
   d404c:	2003e3c4 	.word	0x2003e3c4
   d4050:	2003e3c4 	.word	0x2003e3c4
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 fa39 	bl	d54d0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d60b0 	.word	0x000d60b0
   d4080:	000d6074 	.word	0x000d6074

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b898 	b.w	d41b8 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f84e 	bl	d412a <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b9df 	b.w	d5454 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 ba6d 	b.w	d4574 <malloc>

000d409a <_ZdlPv>:
   d409a:	f000 ba73 	b.w	d4584 <free>

000d409e <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409e:	f000 ba71 	b.w	d4584 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl>:

inline AbstractIntegerDiagnosticData::AbstractIntegerDiagnosticData(DiagnosticDataId id, const char* name) :
        AbstractDiagnosticData(id, name, DIAG_TYPE_INT) {
}

inline int AbstractIntegerDiagnosticData::get(DiagnosticDataId id, IntType& val) {
   d40b4:	b530      	push	{r4, r5, lr}
   d40b6:	b085      	sub	sp, #20
   d40b8:	460d      	mov	r5, r1
    const diag_source* src = nullptr;
   d40ba:	a904      	add	r1, sp, #16
   d40bc:	2200      	movs	r2, #0
   d40be:	f841 2d10 	str.w	r2, [r1, #-16]!
    const int ret = diag_get_source(id, &src, nullptr);
   d40c2:	f000 f9af 	bl	d4424 <diag_get_source>
    if (ret != SYSTEM_ERROR_NONE) {
   d40c6:	b9d8      	cbnz	r0, d4100 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x4c>
        return ret;
    }
    return get(src, val);
   d40c8:	9c00      	ldr	r4, [sp, #0]
}

inline int AbstractIntegerDiagnosticData::get(const diag_source* src, IntType& val) {
    SPARK_ASSERT(src->type == DIAG_TYPE_INT);
   d40ca:	88e3      	ldrh	r3, [r4, #6]
   d40cc:	2b01      	cmp	r3, #1
   d40ce:	d004      	beq.n	d40da <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x26>
   d40d0:	4601      	mov	r1, r0
   d40d2:	4a0c      	ldr	r2, [pc, #48]	; (d4104 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x50>)
   d40d4:	200a      	movs	r0, #10
   d40d6:	f000 f99d 	bl	d4414 <panic_>
    }
    return get(src, data, size);
}

inline int AbstractDiagnosticData::get(const diag_source* src, void* data, size_t& size) {
    SPARK_ASSERT(src && src->callback);
   d40da:	6921      	ldr	r1, [r4, #16]
   d40dc:	b919      	cbnz	r1, d40e6 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x32>
   d40de:	4a09      	ldr	r2, [pc, #36]	; (d4104 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl+0x50>)
   d40e0:	200a      	movs	r0, #10
   d40e2:	f000 f997 	bl	d4414 <panic_>
    diag_source_get_cmd_data d = { sizeof(diag_source_get_cmd_data), 0 /* reserved */, data, size };
   d40e6:	2300      	movs	r3, #0
   d40e8:	9301      	str	r3, [sp, #4]
   d40ea:	230c      	movs	r3, #12
   d40ec:	f8ad 3004 	strh.w	r3, [sp, #4]
   d40f0:	2304      	movs	r3, #4
   d40f2:	9303      	str	r3, [sp, #12]
   d40f4:	9502      	str	r5, [sp, #8]
    const int ret = src->callback(src, DIAG_SOURCE_CMD_GET, &d);
   d40f6:	6923      	ldr	r3, [r4, #16]
   d40f8:	aa01      	add	r2, sp, #4
   d40fa:	2101      	movs	r1, #1
   d40fc:	4620      	mov	r0, r4
   d40fe:	4798      	blx	r3
    const int ret = diag_get_source(id, &src, nullptr);
    if (ret != SYSTEM_ERROR_NONE) {
        return ret;
    }
    return get(src, val);
}
   d4100:	b005      	add	sp, #20
   d4102:	bd30      	pop	{r4, r5, pc}
   d4104:	000d42e5 	.word	0x000d42e5

000d4108 <_ZN8particle13constexpr_powIfjEET_S1_T0_>:
                typename std::conditional<bits_fit_in_type<S, bits, int32_t>::value, typename bits_fit_in_type<S, bits, int32_t>::type,
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
   d4108:	b508      	push	{r3, lr}
   d410a:	ed2d 8b02 	vpush	{d8}
   d410e:	eeb0 8a40 	vmov.f32	s16, s0
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d4112:	b128      	cbz	r0, d4120 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x18>
   d4114:	3801      	subs	r0, #1
   d4116:	f7ff fff7 	bl	d4108 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
   d411a:	ee28 0a00 	vmul.f32	s0, s16, s0
   d411e:	e001      	b.n	d4124 <_ZN8particle13constexpr_powIfjEET_S1_T0_+0x1c>
   d4120:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
}
   d4124:	ecbd 8b02 	vpop	{d8}
   d4128:	bd08      	pop	{r3, pc}

000d412a <loop>:
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
  int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
}

void loop() {
   d412a:	4770      	bx	lr

000d412c <_Z15takeMeasurementv>:
}

// Utility Functions Area

void takeMeasurement() {
   d412c:	b530      	push	{r4, r5, lr}
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d412e:	4d1f      	ldr	r5, [pc, #124]	; (d41ac <_Z15takeMeasurementv+0x80>)
   d4130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
void loop() {
}

// Utility Functions Area

void takeMeasurement() {
   d4132:	b08d      	sub	sp, #52	; 0x34
  const char* batteryContext[7] ={"Unknown","Not Charging","Charging","Charged","Discharging","Fault","Diconnected"};
   d4134:	ac05      	add	r4, sp, #20
   d4136:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d4138:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
   d413c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    float batteryCharge() const {
        // XXX: we could potentially simply call FuelGauge::getNormalizedSoC(),
        // however in order to exactly match the vitals values sent to the cloud we are going to use
        // diagnostic source as well.
        particle::AbstractIntegerDiagnosticData::IntType val;
        int r = particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_CHARGE, val);
   d4140:	a904      	add	r1, sp, #16
   d4142:	2003      	movs	r0, #3
   d4144:	f7ff ffb6 	bl	d40b4 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl>
        if (r) {
   d4148:	b988      	cbnz	r0, d416e <_Z15takeMeasurementv+0x42>
                    typename std::conditional<bits_fit_in_type<S, bits, int64_t>::value, typename bits_fit_in_type<S, bits, int64_t>::type, void>::type >::type >::type >::type;
};

template<typename T, typename U>
constexpr T constexpr_pow(T b, U e) {
    return e == 0 ? 1 : b * constexpr_pow(b, e - 1);
   d414a:	2006      	movs	r0, #6
   d414c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
   d4150:	f7ff ffda 	bl	d4108 <_ZN8particle13constexpr_powIfjEET_S1_T0_>
    StorageT value() const {
        return value_;
    }

    constexpr float toFloat() const {
        return static_cast<float>(value_) / constexpr_pow(2.0f, N);
   d4154:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   d4158:	ee30 0a00 	vadd.f32	s0, s0, s0
   d415c:	ee07 3a90 	vmov	s15, r3
   d4160:	ee30 0a00 	vadd.f32	s0, s0, s0
   d4164:	eef8 7a67 	vcvt.f32.u32	s15, s15
   d4168:	ee87 7a80 	vdiv.f32	s14, s15, s0
   d416c:	e001      	b.n	d4172 <_Z15takeMeasurementv+0x46>
            return -1.0f;
   d416e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
  // Battery conect information - https://docs.particle.io/reference/device-os/firmware/boron/#batterystate-
  snprintf(batteryString, sizeof(batteryString),"Battery SOC: %.1f and State: %s", System.batteryCharge(), batteryContext[System.batteryState()]);
   d4172:	ee17 0a10 	vmov	r0, s14
   d4176:	f001 fc8d 	bl	d5a94 <__aeabi_f2d>
   d417a:	4604      	mov	r4, r0
   d417c:	460d      	mov	r5, r1
        return val;
    }

    int batteryState() const {
        particle::AbstractIntegerDiagnosticData::IntType val;
        CHECK(particle::AbstractIntegerDiagnosticData::get(DIAG_ID_SYSTEM_BATTERY_STATE, val));
   d417e:	2007      	movs	r0, #7
   d4180:	a904      	add	r1, sp, #16
   d4182:	f7ff ff97 	bl	d40b4 <_ZN8particle29AbstractIntegerDiagnosticData3getEtRl>
   d4186:	2800      	cmp	r0, #0
        return val;
   d4188:	bfa8      	it	ge
   d418a:	9804      	ldrge	r0, [sp, #16]
   d418c:	4a08      	ldr	r2, [pc, #32]	; (d41b0 <_Z15takeMeasurementv+0x84>)
   d418e:	ab0c      	add	r3, sp, #48	; 0x30
   d4190:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   d4194:	2140      	movs	r1, #64	; 0x40
   d4196:	f850 3c1c 	ldr.w	r3, [r0, #-28]
   d419a:	9302      	str	r3, [sp, #8]
   d419c:	e9cd 4500 	strd	r4, r5, [sp]
   d41a0:	4804      	ldr	r0, [pc, #16]	; (d41b4 <_Z15takeMeasurementv+0x88>)
   d41a2:	f000 f9f7 	bl	d4594 <snprintf>
}
   d41a6:	b00d      	add	sp, #52	; 0x34
   d41a8:	bd30      	pop	{r4, r5, pc}
   d41aa:	bf00      	nop
   d41ac:	000d5c2c 	.word	0x000d5c2c
   d41b0:	000d5c48 	.word	0x000d5c48
   d41b4:	2003e31c 	.word	0x2003e31c

000d41b8 <setup>:

// Program Variables                      
char batteryString[64] = "Null";

// setup() runs once, when the device is first turned on.
void setup() { 
   d41b8:	b510      	push	{r4, lr}

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d41ba:	2420      	movs	r4, #32
   d41bc:	b08a      	sub	sp, #40	; 0x28
   d41be:	4622      	mov	r2, r4
   d41c0:	2100      	movs	r1, #0
   d41c2:	a802      	add	r0, sp, #8
   d41c4:	f001 fcd3 	bl	d5b6e <memset>
        return (hal_timer_millis(nullptr) / 1000);
    }

#if HAL_PLATFORM_POWER_MANAGEMENT
    int setPowerConfiguration(const particle::SystemPowerConfiguration& conf) {
        return system_power_management_set_config(conf.config(), nullptr);
   d41c8:	2100      	movs	r1, #0
   d41ca:	a802      	add	r0, sp, #8
        conf_.size = sizeof(conf_);
   d41cc:	f88d 400d 	strb.w	r4, [sp, #13]
   d41d0:	f000 f95e 	bl	d4490 <system_power_management_set_config>

  System.setPowerConfiguration(SystemPowerConfiguration());  // To restore the default configuration

  takeMeasurement();                                              // Test the battery state of charge
   d41d4:	f7ff ffaa 	bl	d412c <_Z15takeMeasurementv>
   d41d8:	4b1d      	ldr	r3, [pc, #116]	; (d4250 <setup+0x98>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d41da:	4a1e      	ldr	r2, [pc, #120]	; (d4254 <setup+0x9c>)
   d41dc:	781b      	ldrb	r3, [r3, #0]
   d41de:	f88d 3000 	strb.w	r3, [sp]
   d41e2:	491d      	ldr	r1, [pc, #116]	; (d4258 <setup+0xa0>)
   d41e4:	233c      	movs	r3, #60	; 0x3c
   d41e6:	a802      	add	r0, sp, #8
   d41e8:	f000 fbe6 	bl	d49b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d41ec:	9c03      	ldr	r4, [sp, #12]
   d41ee:	b17c      	cbz	r4, d4210 <setup+0x58>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d41f0:	6863      	ldr	r3, [r4, #4]
   d41f2:	3b01      	subs	r3, #1
   d41f4:	6063      	str	r3, [r4, #4]
   d41f6:	b95b      	cbnz	r3, d4210 <setup+0x58>
        {
          _M_dispose();
   d41f8:	6823      	ldr	r3, [r4, #0]
   d41fa:	4620      	mov	r0, r4
   d41fc:	689b      	ldr	r3, [r3, #8]
   d41fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4200:	68a3      	ldr	r3, [r4, #8]
   d4202:	3b01      	subs	r3, #1
   d4204:	60a3      	str	r3, [r4, #8]
   d4206:	b91b      	cbnz	r3, d4210 <setup+0x58>
            _M_destroy();
   d4208:	6823      	ldr	r3, [r4, #0]
   d420a:	4620      	mov	r0, r4
   d420c:	68db      	ldr	r3, [r3, #12]
   d420e:	4798      	blx	r3

class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
   d4210:	2420      	movs	r4, #32
   d4212:	4622      	mov	r2, r4
   d4214:	2100      	movs	r1, #0
   d4216:	a802      	add	r0, sp, #8
   d4218:	f001 fca9 	bl	d5b6e <memset>
        conf_.vin_min_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& powerSourceMaxCurrent(uint16_t current) {
        conf_.vin_max_current = current;
   d421c:	f240 2326 	movw	r3, #550	; 0x226
   d4220:	f8ad 3010 	strh.w	r3, [sp, #16]

    SystemPowerConfiguration(SystemPowerConfiguration&&) = default;
    SystemPowerConfiguration& operator=(SystemPowerConfiguration&&) = default;

    SystemPowerConfiguration& powerSourceMinVoltage(uint16_t voltage) {
        conf_.vin_min_voltage = voltage;
   d4224:	f241 33d8 	movw	r3, #5080	; 0x13d8
   d4228:	f8ad 300e 	strh.w	r3, [sp, #14]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d422c:	f241 0272 	movw	r2, #4210	; 0x1072
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d4230:	f44f 7300 	mov.w	r3, #512	; 0x200
   d4234:	2100      	movs	r1, #0
   d4236:	a802      	add	r0, sp, #8
class SystemPowerConfiguration {
public:

    SystemPowerConfiguration()
            : conf_{} {
        conf_.size = sizeof(conf_);
   d4238:	f88d 400d 	strb.w	r4, [sp, #13]
        conf_.termination_voltage = voltage;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeCurrent(uint16_t current) {
        conf_.charge_current = current;
   d423c:	f8ad 3012 	strh.w	r3, [sp, #18]
        conf_.vin_max_current = current;
        return *this;
    }

    SystemPowerConfiguration& batteryChargeVoltage(uint16_t voltage) {
        conf_.termination_voltage = voltage;
   d4240:	f8ad 2014 	strh.w	r2, [sp, #20]
        conf_.charge_current = current;
        return *this;
    }

    SystemPowerConfiguration& feature(EnumFlags<SystemPowerFeature> f) {
        conf_.flags |= f.value();
   d4244:	9302      	str	r3, [sp, #8]
   d4246:	f000 f923 	bl	d4490 <system_power_management_set_config>
        .feature(SystemPowerFeature::USE_VIN_SETTINGS_WITH_USB_HOST); // For the cases where the device is powered through VIN
                                                                     // but the USB cable is connected to a USB host, this feature flag
                                                                     // enforces the voltage/current limits specified in the configuration
                                                                     // (where by default the device would be thinking that it's powered by the USB Host)
  int res = System.setPowerConfiguration(conf); // returns SYSTEM_ERROR_NONE (0) in case of success
}
   d424a:	b00a      	add	sp, #40	; 0x28
   d424c:	bd10      	pop	{r4, pc}
   d424e:	bf00      	nop
   d4250:	2003e3c8 	.word	0x2003e3c8
   d4254:	2003e31c 	.word	0x2003e31c
   d4258:	000d5c68 	.word	0x000d5c68

000d425c <_GLOBAL__sub_I_batteryString>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d425c:	4b02      	ldr	r3, [pc, #8]	; (d4268 <_GLOBAL__sub_I_batteryString+0xc>)
   d425e:	2201      	movs	r2, #1
   d4260:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4262:	f000 b84f 	b.w	d4304 <HAL_Pin_Map>
   d4266:	bf00      	nop
   d4268:	2003e3c8 	.word	0x2003e3c8

000d426c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410>:
		if (stat == 0) {
			// log.trace("deviceWriteEEPROM got ack after %u tries", tries);
			break;
		}
	}
}
   d426c:	b508      	push	{r3, lr}
   d426e:	f000 f849 	bl	d4304 <HAL_Pin_Map>
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4272:	4b02      	ldr	r3, [pc, #8]	; (d427c <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x10>)
   d4274:	4a02      	ldr	r2, [pc, #8]	; (d4280 <_GLOBAL__sub_I__ZN18MCP79410MemoryBaseC2EP8MCP79410+0x14>)
   d4276:	601a      	str	r2, [r3, #0]
   d4278:	bd08      	pop	{r3, pc}
   d427a:	bf00      	nop
   d427c:	2003e3cc 	.word	0x2003e3cc
   d4280:	000d5d9d 	.word	0x000d5d9d

000d4284 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4284:	b508      	push	{r3, lr}
   d4286:	4b02      	ldr	r3, [pc, #8]	; (d4290 <os_thread_is_current+0xc>)
   d4288:	681b      	ldr	r3, [r3, #0]
   d428a:	689b      	ldr	r3, [r3, #8]
   d428c:	9301      	str	r3, [sp, #4]
   d428e:	bd08      	pop	{r3, pc}
   d4290:	00030248 	.word	0x00030248

000d4294 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4294:	b508      	push	{r3, lr}
   d4296:	4b02      	ldr	r3, [pc, #8]	; (d42a0 <os_thread_join+0xc>)
   d4298:	681b      	ldr	r3, [r3, #0]
   d429a:	691b      	ldr	r3, [r3, #16]
   d429c:	9301      	str	r3, [sp, #4]
   d429e:	bd08      	pop	{r3, pc}
   d42a0:	00030248 	.word	0x00030248

000d42a4 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d42a4:	b508      	push	{r3, lr}
   d42a6:	4b02      	ldr	r3, [pc, #8]	; (d42b0 <os_thread_cleanup+0xc>)
   d42a8:	681b      	ldr	r3, [r3, #0]
   d42aa:	695b      	ldr	r3, [r3, #20]
   d42ac:	9301      	str	r3, [sp, #4]
   d42ae:	bd08      	pop	{r3, pc}
   d42b0:	00030248 	.word	0x00030248

000d42b4 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d42b4:	b508      	push	{r3, lr}
   d42b6:	4b02      	ldr	r3, [pc, #8]	; (d42c0 <os_mutex_recursive_create+0xc>)
   d42b8:	681b      	ldr	r3, [r3, #0]
   d42ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d42bc:	9301      	str	r3, [sp, #4]
   d42be:	bd08      	pop	{r3, pc}
   d42c0:	00030248 	.word	0x00030248

000d42c4 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d42c4:	b508      	push	{r3, lr}
   d42c6:	4b02      	ldr	r3, [pc, #8]	; (d42d0 <os_mutex_recursive_destroy+0xc>)
   d42c8:	681b      	ldr	r3, [r3, #0]
   d42ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d42cc:	9301      	str	r3, [sp, #4]
   d42ce:	bd08      	pop	{r3, pc}
   d42d0:	00030248 	.word	0x00030248

000d42d4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d42d4:	b508      	push	{r3, lr}
   d42d6:	4b02      	ldr	r3, [pc, #8]	; (d42e0 <HAL_RNG_GetRandomNumber+0xc>)
   d42d8:	681b      	ldr	r3, [r3, #0]
   d42da:	685b      	ldr	r3, [r3, #4]
   d42dc:	9301      	str	r3, [sp, #4]
   d42de:	bd08      	pop	{r3, pc}
   d42e0:	00030218 	.word	0x00030218

000d42e4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d42e4:	b508      	push	{r3, lr}
   d42e6:	4b02      	ldr	r3, [pc, #8]	; (d42f0 <HAL_Delay_Microseconds+0xc>)
   d42e8:	681b      	ldr	r3, [r3, #0]
   d42ea:	68db      	ldr	r3, [r3, #12]
   d42ec:	9301      	str	r3, [sp, #4]
   d42ee:	bd08      	pop	{r3, pc}
   d42f0:	00030218 	.word	0x00030218

000d42f4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d42f4:	b508      	push	{r3, lr}
   d42f6:	4b02      	ldr	r3, [pc, #8]	; (d4300 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d42f8:	681b      	ldr	r3, [r3, #0]
   d42fa:	695b      	ldr	r3, [r3, #20]
   d42fc:	9301      	str	r3, [sp, #4]
   d42fe:	bd08      	pop	{r3, pc}
   d4300:	00030218 	.word	0x00030218

000d4304 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4304:	b508      	push	{r3, lr}
   d4306:	4b02      	ldr	r3, [pc, #8]	; (d4310 <HAL_Pin_Map+0xc>)
   d4308:	681b      	ldr	r3, [r3, #0]
   d430a:	681b      	ldr	r3, [r3, #0]
   d430c:	9301      	str	r3, [sp, #4]
   d430e:	bd08      	pop	{r3, pc}
   d4310:	0003022c 	.word	0x0003022c

000d4314 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4314:	b508      	push	{r3, lr}
   d4316:	4b02      	ldr	r3, [pc, #8]	; (d4320 <inet_inet_ntop+0xc>)
   d4318:	681b      	ldr	r3, [r3, #0]
   d431a:	695b      	ldr	r3, [r3, #20]
   d431c:	9301      	str	r3, [sp, #4]
   d431e:	bd08      	pop	{r3, pc}
   d4320:	00030264 	.word	0x00030264

000d4324 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4324:	b508      	push	{r3, lr}
   d4326:	4b02      	ldr	r3, [pc, #8]	; (d4330 <netdb_freeaddrinfo+0xc>)
   d4328:	681b      	ldr	r3, [r3, #0]
   d432a:	689b      	ldr	r3, [r3, #8]
   d432c:	9301      	str	r3, [sp, #4]
   d432e:	bd08      	pop	{r3, pc}
   d4330:	00030268 	.word	0x00030268

000d4334 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4334:	b508      	push	{r3, lr}
   d4336:	4b02      	ldr	r3, [pc, #8]	; (d4340 <netdb_getaddrinfo+0xc>)
   d4338:	681b      	ldr	r3, [r3, #0]
   d433a:	68db      	ldr	r3, [r3, #12]
   d433c:	9301      	str	r3, [sp, #4]
   d433e:	bd08      	pop	{r3, pc}
   d4340:	00030268 	.word	0x00030268

000d4344 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4344:	b508      	push	{r3, lr}
   d4346:	4b02      	ldr	r3, [pc, #8]	; (d4350 <HAL_USART_Init+0xc>)
   d4348:	681b      	ldr	r3, [r3, #0]
   d434a:	681b      	ldr	r3, [r3, #0]
   d434c:	9301      	str	r3, [sp, #4]
   d434e:	bd08      	pop	{r3, pc}
   d4350:	0003023c 	.word	0x0003023c

000d4354 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4354:	b508      	push	{r3, lr}
   d4356:	4b02      	ldr	r3, [pc, #8]	; (d4360 <HAL_USART_Write_Data+0xc>)
   d4358:	681b      	ldr	r3, [r3, #0]
   d435a:	68db      	ldr	r3, [r3, #12]
   d435c:	9301      	str	r3, [sp, #4]
   d435e:	bd08      	pop	{r3, pc}
   d4360:	0003023c 	.word	0x0003023c

000d4364 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4364:	b508      	push	{r3, lr}
   d4366:	4b02      	ldr	r3, [pc, #8]	; (d4370 <HAL_USART_Available_Data+0xc>)
   d4368:	681b      	ldr	r3, [r3, #0]
   d436a:	691b      	ldr	r3, [r3, #16]
   d436c:	9301      	str	r3, [sp, #4]
   d436e:	bd08      	pop	{r3, pc}
   d4370:	0003023c 	.word	0x0003023c

000d4374 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4374:	b508      	push	{r3, lr}
   d4376:	4b02      	ldr	r3, [pc, #8]	; (d4380 <HAL_USART_Read_Data+0xc>)
   d4378:	681b      	ldr	r3, [r3, #0]
   d437a:	695b      	ldr	r3, [r3, #20]
   d437c:	9301      	str	r3, [sp, #4]
   d437e:	bd08      	pop	{r3, pc}
   d4380:	0003023c 	.word	0x0003023c

000d4384 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4384:	b508      	push	{r3, lr}
   d4386:	4b02      	ldr	r3, [pc, #8]	; (d4390 <HAL_USART_Peek_Data+0xc>)
   d4388:	681b      	ldr	r3, [r3, #0]
   d438a:	699b      	ldr	r3, [r3, #24]
   d438c:	9301      	str	r3, [sp, #4]
   d438e:	bd08      	pop	{r3, pc}
   d4390:	0003023c 	.word	0x0003023c

000d4394 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4394:	b508      	push	{r3, lr}
   d4396:	4b02      	ldr	r3, [pc, #8]	; (d43a0 <HAL_USART_Flush_Data+0xc>)
   d4398:	681b      	ldr	r3, [r3, #0]
   d439a:	69db      	ldr	r3, [r3, #28]
   d439c:	9301      	str	r3, [sp, #4]
   d439e:	bd08      	pop	{r3, pc}
   d43a0:	0003023c 	.word	0x0003023c

000d43a4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d43a4:	b508      	push	{r3, lr}
   d43a6:	4b02      	ldr	r3, [pc, #8]	; (d43b0 <HAL_USART_Available_Data_For_Write+0xc>)
   d43a8:	681b      	ldr	r3, [r3, #0]
   d43aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d43ac:	9301      	str	r3, [sp, #4]
   d43ae:	bd08      	pop	{r3, pc}
   d43b0:	0003023c 	.word	0x0003023c

000d43b4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d43b4:	b508      	push	{r3, lr}
   d43b6:	4b02      	ldr	r3, [pc, #8]	; (d43c0 <HAL_USB_USART_Init+0xc>)
   d43b8:	681b      	ldr	r3, [r3, #0]
   d43ba:	681b      	ldr	r3, [r3, #0]
   d43bc:	9301      	str	r3, [sp, #4]
   d43be:	bd08      	pop	{r3, pc}
   d43c0:	0003024c 	.word	0x0003024c

000d43c4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d43c4:	b508      	push	{r3, lr}
   d43c6:	4b02      	ldr	r3, [pc, #8]	; (d43d0 <HAL_USB_USART_Available_Data+0xc>)
   d43c8:	681b      	ldr	r3, [r3, #0]
   d43ca:	691b      	ldr	r3, [r3, #16]
   d43cc:	9301      	str	r3, [sp, #4]
   d43ce:	bd08      	pop	{r3, pc}
   d43d0:	0003024c 	.word	0x0003024c

000d43d4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d43d4:	b508      	push	{r3, lr}
   d43d6:	4b02      	ldr	r3, [pc, #8]	; (d43e0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d43d8:	681b      	ldr	r3, [r3, #0]
   d43da:	695b      	ldr	r3, [r3, #20]
   d43dc:	9301      	str	r3, [sp, #4]
   d43de:	bd08      	pop	{r3, pc}
   d43e0:	0003024c 	.word	0x0003024c

000d43e4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43e4:	b508      	push	{r3, lr}
   d43e6:	4b02      	ldr	r3, [pc, #8]	; (d43f0 <HAL_USB_USART_Receive_Data+0xc>)
   d43e8:	681b      	ldr	r3, [r3, #0]
   d43ea:	699b      	ldr	r3, [r3, #24]
   d43ec:	9301      	str	r3, [sp, #4]
   d43ee:	bd08      	pop	{r3, pc}
   d43f0:	0003024c 	.word	0x0003024c

000d43f4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d43f4:	b508      	push	{r3, lr}
   d43f6:	4b02      	ldr	r3, [pc, #8]	; (d4400 <HAL_USB_USART_Send_Data+0xc>)
   d43f8:	681b      	ldr	r3, [r3, #0]
   d43fa:	69db      	ldr	r3, [r3, #28]
   d43fc:	9301      	str	r3, [sp, #4]
   d43fe:	bd08      	pop	{r3, pc}
   d4400:	0003024c 	.word	0x0003024c

000d4404 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4404:	b508      	push	{r3, lr}
   d4406:	4b02      	ldr	r3, [pc, #8]	; (d4410 <HAL_USB_USART_Flush_Data+0xc>)
   d4408:	681b      	ldr	r3, [r3, #0]
   d440a:	6a1b      	ldr	r3, [r3, #32]
   d440c:	9301      	str	r3, [sp, #4]
   d440e:	bd08      	pop	{r3, pc}
   d4410:	0003024c 	.word	0x0003024c

000d4414 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d4414:	b508      	push	{r3, lr}
   d4416:	4b02      	ldr	r3, [pc, #8]	; (d4420 <panic_+0xc>)
   d4418:	681b      	ldr	r3, [r3, #0]
   d441a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d441c:	9301      	str	r3, [sp, #4]
   d441e:	bd08      	pop	{r3, pc}
   d4420:	00030260 	.word	0x00030260

000d4424 <diag_get_source>:
DYNALIB_FN(34, services, led_update_enabled, int(void*))
DYNALIB_FN(35, services, led_update, void(system_tick_t, LEDStatusData*, void*))

DYNALIB_FN(36, services, diag_register_source, int(const diag_source*, void*))
DYNALIB_FN(37, services, diag_enum_sources, int(diag_enum_sources_callback, size_t*, void*, void*))
DYNALIB_FN(38, services, diag_get_source, int(uint16_t, const diag_source**, void*))
   d4424:	b508      	push	{r3, lr}
   d4426:	4b03      	ldr	r3, [pc, #12]	; (d4434 <diag_get_source+0x10>)
   d4428:	681b      	ldr	r3, [r3, #0]
   d442a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d442e:	9301      	str	r3, [sp, #4]
   d4430:	bd08      	pop	{r3, pc}
   d4432:	0000      	.short	0x0000
   d4434:	00030260 	.word	0x00030260

000d4438 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4438:	b508      	push	{r3, lr}
   d443a:	4b02      	ldr	r3, [pc, #8]	; (d4444 <set_system_mode+0xc>)
   d443c:	681b      	ldr	r3, [r3, #0]
   d443e:	685b      	ldr	r3, [r3, #4]
   d4440:	9301      	str	r3, [sp, #4]
   d4442:	bd08      	pop	{r3, pc}
   d4444:	00030220 	.word	0x00030220

000d4448 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4448:	b508      	push	{r3, lr}
   d444a:	4b02      	ldr	r3, [pc, #8]	; (d4454 <application_thread_current+0xc>)
   d444c:	681b      	ldr	r3, [r3, #0]
   d444e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4450:	9301      	str	r3, [sp, #4]
   d4452:	bd08      	pop	{r3, pc}
   d4454:	00030220 	.word	0x00030220

000d4458 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4458:	b508      	push	{r3, lr}
   d445a:	4b02      	ldr	r3, [pc, #8]	; (d4464 <application_thread_invoke+0xc>)
   d445c:	681b      	ldr	r3, [r3, #0]
   d445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4460:	9301      	str	r3, [sp, #4]
   d4462:	bd08      	pop	{r3, pc}
   d4464:	00030220 	.word	0x00030220

000d4468 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4468:	b508      	push	{r3, lr}
   d446a:	4b03      	ldr	r3, [pc, #12]	; (d4478 <system_ctrl_set_app_request_handler+0x10>)
   d446c:	681b      	ldr	r3, [r3, #0]
   d446e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4472:	9301      	str	r3, [sp, #4]
   d4474:	bd08      	pop	{r3, pc}
   d4476:	0000      	.short	0x0000
   d4478:	00030220 	.word	0x00030220

000d447c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d447c:	b508      	push	{r3, lr}
   d447e:	4b03      	ldr	r3, [pc, #12]	; (d448c <system_ctrl_set_result+0x10>)
   d4480:	681b      	ldr	r3, [r3, #0]
   d4482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4486:	9301      	str	r3, [sp, #4]
   d4488:	bd08      	pop	{r3, pc}
   d448a:	0000      	.short	0x0000
   d448c:	00030220 	.word	0x00030220

000d4490 <system_power_management_set_config>:
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))

#if HAL_PLATFORM_POWER_MANAGEMENT
DYNALIB_FN(BASE_IDX + 17, system, system_power_management_set_config, int(const hal_power_config*, void*))
   d4490:	b508      	push	{r3, lr}
   d4492:	4b03      	ldr	r3, [pc, #12]	; (d44a0 <system_power_management_set_config+0x10>)
   d4494:	681b      	ldr	r3, [r3, #0]
   d4496:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d449a:	9301      	str	r3, [sp, #4]
   d449c:	bd08      	pop	{r3, pc}
   d449e:	0000      	.short	0x0000
   d44a0:	00030220 	.word	0x00030220

000d44a4 <spark_cloud_flag_connected>:
DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d44a4:	b508      	push	{r3, lr}
   d44a6:	4b02      	ldr	r3, [pc, #8]	; (d44b0 <spark_cloud_flag_connected+0xc>)
   d44a8:	681b      	ldr	r3, [r3, #0]
   d44aa:	695b      	ldr	r3, [r3, #20]
   d44ac:	9301      	str	r3, [sp, #4]
   d44ae:	bd08      	pop	{r3, pc}
   d44b0:	00030244 	.word	0x00030244

000d44b4 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d44b4:	b508      	push	{r3, lr}
   d44b6:	4b02      	ldr	r3, [pc, #8]	; (d44c0 <spark_send_event+0xc>)
   d44b8:	681b      	ldr	r3, [r3, #0]
   d44ba:	6a1b      	ldr	r3, [r3, #32]
   d44bc:	9301      	str	r3, [sp, #4]
   d44be:	bd08      	pop	{r3, pc}
   d44c0:	00030244 	.word	0x00030244

000d44c4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d44c4:	b508      	push	{r3, lr}
   d44c6:	4b02      	ldr	r3, [pc, #8]	; (d44d0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d44c8:	681b      	ldr	r3, [r3, #0]
   d44ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d44cc:	9301      	str	r3, [sp, #4]
   d44ce:	bd08      	pop	{r3, pc}
   d44d0:	00030244 	.word	0x00030244

000d44d4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d44d4:	b508      	push	{r3, lr}
   d44d6:	4b02      	ldr	r3, [pc, #8]	; (d44e0 <network_connect+0xc>)
   d44d8:	681b      	ldr	r3, [r3, #0]
   d44da:	685b      	ldr	r3, [r3, #4]
   d44dc:	9301      	str	r3, [sp, #4]
   d44de:	bd08      	pop	{r3, pc}
   d44e0:	00030240 	.word	0x00030240

000d44e4 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d44e4:	b508      	push	{r3, lr}
   d44e6:	4b02      	ldr	r3, [pc, #8]	; (d44f0 <network_connecting+0xc>)
   d44e8:	681b      	ldr	r3, [r3, #0]
   d44ea:	689b      	ldr	r3, [r3, #8]
   d44ec:	9301      	str	r3, [sp, #4]
   d44ee:	bd08      	pop	{r3, pc}
   d44f0:	00030240 	.word	0x00030240

000d44f4 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d44f4:	b508      	push	{r3, lr}
   d44f6:	4b02      	ldr	r3, [pc, #8]	; (d4500 <network_disconnect+0xc>)
   d44f8:	681b      	ldr	r3, [r3, #0]
   d44fa:	68db      	ldr	r3, [r3, #12]
   d44fc:	9301      	str	r3, [sp, #4]
   d44fe:	bd08      	pop	{r3, pc}
   d4500:	00030240 	.word	0x00030240

000d4504 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4504:	b508      	push	{r3, lr}
   d4506:	4b02      	ldr	r3, [pc, #8]	; (d4510 <network_ready+0xc>)
   d4508:	681b      	ldr	r3, [r3, #0]
   d450a:	691b      	ldr	r3, [r3, #16]
   d450c:	9301      	str	r3, [sp, #4]
   d450e:	bd08      	pop	{r3, pc}
   d4510:	00030240 	.word	0x00030240

000d4514 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4514:	b508      	push	{r3, lr}
   d4516:	4b02      	ldr	r3, [pc, #8]	; (d4520 <network_on+0xc>)
   d4518:	681b      	ldr	r3, [r3, #0]
   d451a:	695b      	ldr	r3, [r3, #20]
   d451c:	9301      	str	r3, [sp, #4]
   d451e:	bd08      	pop	{r3, pc}
   d4520:	00030240 	.word	0x00030240

000d4524 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4524:	b508      	push	{r3, lr}
   d4526:	4b02      	ldr	r3, [pc, #8]	; (d4530 <network_off+0xc>)
   d4528:	681b      	ldr	r3, [r3, #0]
   d452a:	699b      	ldr	r3, [r3, #24]
   d452c:	9301      	str	r3, [sp, #4]
   d452e:	bd08      	pop	{r3, pc}
   d4530:	00030240 	.word	0x00030240

000d4534 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4534:	b508      	push	{r3, lr}
   d4536:	4b02      	ldr	r3, [pc, #8]	; (d4540 <network_listen+0xc>)
   d4538:	681b      	ldr	r3, [r3, #0]
   d453a:	69db      	ldr	r3, [r3, #28]
   d453c:	9301      	str	r3, [sp, #4]
   d453e:	bd08      	pop	{r3, pc}
   d4540:	00030240 	.word	0x00030240

000d4544 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4544:	b508      	push	{r3, lr}
   d4546:	4b02      	ldr	r3, [pc, #8]	; (d4550 <network_listening+0xc>)
   d4548:	681b      	ldr	r3, [r3, #0]
   d454a:	6a1b      	ldr	r3, [r3, #32]
   d454c:	9301      	str	r3, [sp, #4]
   d454e:	bd08      	pop	{r3, pc}
   d4550:	00030240 	.word	0x00030240

000d4554 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4554:	b508      	push	{r3, lr}
   d4556:	4b02      	ldr	r3, [pc, #8]	; (d4560 <network_set_listen_timeout+0xc>)
   d4558:	681b      	ldr	r3, [r3, #0]
   d455a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d455c:	9301      	str	r3, [sp, #4]
   d455e:	bd08      	pop	{r3, pc}
   d4560:	00030240 	.word	0x00030240

000d4564 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4564:	b508      	push	{r3, lr}
   d4566:	4b02      	ldr	r3, [pc, #8]	; (d4570 <network_get_listen_timeout+0xc>)
   d4568:	681b      	ldr	r3, [r3, #0]
   d456a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d456c:	9301      	str	r3, [sp, #4]
   d456e:	bd08      	pop	{r3, pc}
   d4570:	00030240 	.word	0x00030240

000d4574 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4574:	b508      	push	{r3, lr}
   d4576:	4b02      	ldr	r3, [pc, #8]	; (d4580 <malloc+0xc>)
   d4578:	681b      	ldr	r3, [r3, #0]
   d457a:	681b      	ldr	r3, [r3, #0]
   d457c:	9301      	str	r3, [sp, #4]
   d457e:	bd08      	pop	{r3, pc}
   d4580:	0003021c 	.word	0x0003021c

000d4584 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4584:	b508      	push	{r3, lr}
   d4586:	4b02      	ldr	r3, [pc, #8]	; (d4590 <free+0xc>)
   d4588:	681b      	ldr	r3, [r3, #0]
   d458a:	685b      	ldr	r3, [r3, #4]
   d458c:	9301      	str	r3, [sp, #4]
   d458e:	bd08      	pop	{r3, pc}
   d4590:	0003021c 	.word	0x0003021c

000d4594 <snprintf>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d4594:	b508      	push	{r3, lr}
   d4596:	4b02      	ldr	r3, [pc, #8]	; (d45a0 <snprintf+0xc>)
   d4598:	681b      	ldr	r3, [r3, #0]
   d459a:	69db      	ldr	r3, [r3, #28]
   d459c:	9301      	str	r3, [sp, #4]
   d459e:	bd08      	pop	{r3, pc}
   d45a0:	0003021c 	.word	0x0003021c

000d45a4 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d45a4:	b508      	push	{r3, lr}
   d45a6:	4b02      	ldr	r3, [pc, #8]	; (d45b0 <abort+0xc>)
   d45a8:	681b      	ldr	r3, [r3, #0]
   d45aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d45ac:	9301      	str	r3, [sp, #4]
   d45ae:	bd08      	pop	{r3, pc}
   d45b0:	0003021c 	.word	0x0003021c

000d45b4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d45b4:	b508      	push	{r3, lr}
   d45b6:	4b02      	ldr	r3, [pc, #8]	; (d45c0 <_malloc_r+0xc>)
   d45b8:	681b      	ldr	r3, [r3, #0]
   d45ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d45bc:	9301      	str	r3, [sp, #4]
   d45be:	bd08      	pop	{r3, pc}
   d45c0:	0003021c 	.word	0x0003021c

000d45c4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d45c4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d45c6:	6883      	ldr	r3, [r0, #8]
   d45c8:	4604      	mov	r4, r0
   d45ca:	b90b      	cbnz	r3, d45d0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d45cc:	f000 ffb3 	bl	d5536 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d45d0:	68c3      	ldr	r3, [r0, #12]
   d45d2:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d45d4:	68a3      	ldr	r3, [r4, #8]
   d45d6:	b11b      	cbz	r3, d45e0 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d45d8:	2203      	movs	r2, #3
   d45da:	4621      	mov	r1, r4
   d45dc:	4620      	mov	r0, r4
   d45de:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d45e0:	4620      	mov	r0, r4
   d45e2:	2110      	movs	r1, #16
}
   d45e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d45e8:	f000 bfa3 	b.w	d5532 <_ZdlPvj>

000d45ec <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d45ec:	b510      	push	{r4, lr}
   d45ee:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d45f0:	6800      	ldr	r0, [r0, #0]
   d45f2:	b108      	cbz	r0, d45f8 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d45f4:	f7ff fe66 	bl	d42c4 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d45f8:	4620      	mov	r0, r4
   d45fa:	bd10      	pop	{r4, pc}

000d45fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d45fc:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d45fe:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d4600:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d4602:	689b      	ldr	r3, [r3, #8]
   d4604:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4606:	68a3      	ldr	r3, [r4, #8]
   d4608:	3b01      	subs	r3, #1
   d460a:	60a3      	str	r3, [r4, #8]
   d460c:	b92b      	cbnz	r3, d461a <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112+0x1e>
            _M_destroy();
   d460e:	6823      	ldr	r3, [r4, #0]
   d4610:	4620      	mov	r0, r4
   d4612:	68db      	ldr	r3, [r3, #12]
        }
    }
   d4614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d4618:	4718      	bx	r3
   d461a:	bd10      	pop	{r4, pc}

000d461c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d461c:	680b      	ldr	r3, [r1, #0]
   d461e:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d4620:	b113      	cbz	r3, d4628 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d4622:	685a      	ldr	r2, [r3, #4]
   d4624:	3201      	adds	r2, #1
   d4626:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d4628:	4770      	bx	lr

000d462a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d462a:	b510      	push	{r4, lr}
   d462c:	4604      	mov	r4, r0
      {
	if (_M_pi != nullptr)
   d462e:	6800      	ldr	r0, [r0, #0]
   d4630:	b128      	cbz	r0, d463e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4632:	6843      	ldr	r3, [r0, #4]
   d4634:	3b01      	subs	r3, #1
   d4636:	6043      	str	r3, [r0, #4]
   d4638:	b90b      	cbnz	r3, d463e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d463a:	f7ff ffdf 	bl	d45fc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.112>

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d463e:	4620      	mov	r0, r4
   d4640:	bd10      	pop	{r4, pc}
	...

000d4644 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4644:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4646:	4c06      	ldr	r4, [pc, #24]	; (d4660 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4648:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d464a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d464c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d464e:	f7ff fe31 	bl	d42b4 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4652:	4620      	mov	r0, r4
   d4654:	4a03      	ldr	r2, [pc, #12]	; (d4664 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4656:	4904      	ldr	r1, [pc, #16]	; (d4668 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d465c:	f000 bf64 	b.w	d5528 <__aeabi_atexit>
   d4660:	2003e3d0 	.word	0x2003e3d0
   d4664:	2003e3c4 	.word	0x2003e3c4
   d4668:	000d45ed 	.word	0x000d45ed

000d466c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d466c:	2200      	movs	r2, #0
   d466e:	4611      	mov	r1, r2
   d4670:	6840      	ldr	r0, [r0, #4]
   d4672:	f7ff bf47 	b.w	d4504 <network_ready>

000d4676 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4676:	2200      	movs	r2, #0
   d4678:	4611      	mov	r1, r2
   d467a:	6840      	ldr	r0, [r0, #4]
   d467c:	f7ff bf62 	b.w	d4544 <network_listening>

000d4680 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    }

    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4680:	2200      	movs	r2, #0
   d4682:	4611      	mov	r1, r2
   d4684:	6840      	ldr	r0, [r0, #4]
   d4686:	f7ff bf6d 	b.w	d4564 <network_get_listen_timeout>

000d468a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    inline void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d468a:	2200      	movs	r2, #0
   d468c:	6840      	ldr	r0, [r0, #4]
   d468e:	f7ff bf61 	b.w	d4554 <network_set_listen_timeout>

000d4692 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4692:	2200      	movs	r2, #0
   d4694:	f081 0101 	eor.w	r1, r1, #1
   d4698:	6840      	ldr	r0, [r0, #4]
   d469a:	f7ff bf4b 	b.w	d4534 <network_listen>

000d469e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
   d469e:	2300      	movs	r3, #0
   d46a0:	461a      	mov	r2, r3
   d46a2:	4619      	mov	r1, r3
   d46a4:	6840      	ldr	r0, [r0, #4]
   d46a6:	f7ff bf3d 	b.w	d4524 <network_off>

000d46aa <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
   d46aa:	2300      	movs	r3, #0
   d46ac:	461a      	mov	r2, r3
   d46ae:	4619      	mov	r1, r3
   d46b0:	6840      	ldr	r0, [r0, #4]
   d46b2:	f7ff bf2f 	b.w	d4514 <network_on>

000d46b6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d46b6:	2200      	movs	r2, #0
   d46b8:	4611      	mov	r1, r2
   d46ba:	6840      	ldr	r0, [r0, #4]
   d46bc:	f7ff bf12 	b.w	d44e4 <network_connecting>

000d46c0 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d46c0:	2200      	movs	r2, #0
   d46c2:	2102      	movs	r1, #2
   d46c4:	6840      	ldr	r0, [r0, #4]
   d46c6:	f7ff bf15 	b.w	d44f4 <network_disconnect>

000d46ca <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d46ca:	2300      	movs	r3, #0
   d46cc:	461a      	mov	r2, r3
   d46ce:	6840      	ldr	r0, [r0, #4]
   d46d0:	f7ff bf00 	b.w	d44d4 <network_connect>

000d46d4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d46d4:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d46d6:	4c08      	ldr	r4, [pc, #32]	; (d46f8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
   d46d8:	2528      	movs	r5, #40	; 0x28
   d46da:	462a      	mov	r2, r5
   d46dc:	2100      	movs	r1, #0
   d46de:	4620      	mov	r0, r4
   d46e0:	f001 fa45 	bl	d5b6e <memset>
        cid = -1;
   d46e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d46e8:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d46ea:	4b04      	ldr	r3, [pc, #16]	; (d46fc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        size = sizeof(*this);
   d46ec:	8025      	strh	r5, [r4, #0]
   d46ee:	2204      	movs	r2, #4
   d46f0:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d46f2:	4a03      	ldr	r2, [pc, #12]	; (d4700 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d46f4:	601a      	str	r2, [r3, #0]
   d46f6:	bd38      	pop	{r3, r4, r5, pc}
   d46f8:	2003e3dc 	.word	0x2003e3dc
   d46fc:	2003e3d4 	.word	0x2003e3d4
   d4700:	000d5db0 	.word	0x000d5db0

000d4704 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d4704:	4770      	bx	lr

000d4706 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d4706:	2000      	movs	r0, #0
   d4708:	4770      	bx	lr

000d470a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d470a:	b510      	push	{r4, lr}
   d470c:	2110      	movs	r1, #16
   d470e:	4604      	mov	r4, r0
   d4710:	f000 ff0f 	bl	d5532 <_ZdlPvj>
   d4714:	4620      	mov	r0, r4
   d4716:	bd10      	pop	{r4, pc}

000d4718 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d4718:	b508      	push	{r3, lr}
      { delete this; }
   d471a:	b108      	cbz	r0, d4720 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d471c:	f7ff fff5 	bl	d470a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d4720:	bd08      	pop	{r3, pc}

000d4722 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4722:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4724:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4726:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d4728:	b113      	cbz	r3, d4730 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d472a:	2203      	movs	r2, #3
   d472c:	4601      	mov	r1, r0
   d472e:	4798      	blx	r3
    }
   d4730:	4620      	mov	r0, r4
   d4732:	bd10      	pop	{r4, pc}

000d4734 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d4734:	2200      	movs	r2, #0
   d4736:	6002      	str	r2, [r0, #0]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
   d4738:	b510      	push	{r4, lr}

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d473a:	f64f 729c 	movw	r2, #65436	; 0xff9c
   d473e:	8082      	strh	r2, [r0, #4]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4740:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
   d4744:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d4746:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4748:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
   d474a:	680c      	ldr	r4, [r1, #0]
   d474c:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d474e:	600a      	str	r2, [r1, #0]
}

inline particle::Error::Error(Error&& error) :
        Error() {
    swap(*this, error);
}
   d4750:	bd10      	pop	{r4, pc}

000d4752 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
   d4752:	b510      	push	{r4, lr}
   d4754:	4604      	mov	r4, r0
    free((void*)msg_);
   d4756:	6800      	ldr	r0, [r0, #0]
   d4758:	f7ff ff14 	bl	d4584 <free>
}
   d475c:	4620      	mov	r0, r4
   d475e:	bd10      	pop	{r4, pc}

000d4760 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d4760:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d4762:	68c4      	ldr	r4, [r0, #12]
   d4764:	b1f4      	cbz	r4, d47a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d4766:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d4768:	2b02      	cmp	r3, #2
   d476a:	d103      	bne.n	d4774 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
   d476c:	f104 000c 	add.w	r0, r4, #12
   d4770:	f7ff ffef 	bl	d4752 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d4774:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d4776:	b135      	cbz	r5, d4786 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4778:	4628      	mov	r0, r5
   d477a:	f7ff ffd2 	bl	d4722 <_ZNSt14_Function_baseD1Ev>
   d477e:	2110      	movs	r1, #16
   d4780:	4628      	mov	r0, r5
   d4782:	f000 fed6 	bl	d5532 <_ZdlPvj>
   d4786:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d4788:	b135      	cbz	r5, d4798 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
   d478a:	4628      	mov	r0, r5
   d478c:	f7ff ffc9 	bl	d4722 <_ZNSt14_Function_baseD1Ev>
   d4790:	2110      	movs	r1, #16
   d4792:	4628      	mov	r0, r5
   d4794:	f000 fecd 	bl	d5532 <_ZdlPvj>
   d4798:	4620      	mov	r0, r4
   d479a:	2114      	movs	r1, #20
   d479c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d47a0:	f000 bec7 	b.w	d5532 <_ZdlPvj>
   d47a4:	bd38      	pop	{r3, r4, r5, pc}

000d47a6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d47a6:	b513      	push	{r0, r1, r4, lr}
   d47a8:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d47aa:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d47ae:	2300      	movs	r3, #0
   d47b0:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d47b2:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d47b4:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d47b6:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d47b8:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d47ba:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d47bc:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d47be:	f7ff ff34 	bl	d462a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d47c2:	4620      	mov	r0, r4
   d47c4:	b002      	add	sp, #8
   d47c6:	bd10      	pop	{r4, pc}

000d47c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d47c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d47ca:	460c      	mov	r4, r1
   d47cc:	ad02      	add	r5, sp, #8
   d47ce:	f854 3b04 	ldr.w	r3, [r4], #4
   d47d2:	f845 3d08 	str.w	r3, [r5, #-8]!
   d47d6:	4606      	mov	r6, r0
   d47d8:	460f      	mov	r7, r1
   d47da:	a801      	add	r0, sp, #4
   d47dc:	4621      	mov	r1, r4
   d47de:	f7ff ff1d 	bl	d461c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d47e2:	4629      	mov	r1, r5
   d47e4:	4630      	mov	r0, r6
   d47e6:	f7ff ffde 	bl	d47a6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d47ea:	a801      	add	r0, sp, #4
   d47ec:	f7ff ff1d 	bl	d462a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d47f0:	4620      	mov	r0, r4
   d47f2:	f7ff ff1a 	bl	d462a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d47f6:	4638      	mov	r0, r7
   d47f8:	2108      	movs	r1, #8
   d47fa:	f000 fe9a 	bl	d5532 <_ZdlPvj>
        return p;
    }
   d47fe:	4630      	mov	r0, r6
   d4800:	b003      	add	sp, #12
   d4802:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4804 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d4804:	b513      	push	{r0, r1, r4, lr}
   d4806:	460b      	mov	r3, r1
   d4808:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d480a:	c803      	ldmia	r0, {r0, r1}
   d480c:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d4810:	e893 0003 	ldmia.w	r3, {r0, r1}
   d4814:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d4818:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d481c:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d4820:	b002      	add	sp, #8
   d4822:	bd10      	pop	{r4, pc}

000d4824 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d4824:	b538      	push	{r3, r4, r5, lr}
   d4826:	2300      	movs	r3, #0
   d4828:	4604      	mov	r4, r0
   d482a:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d482c:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d482e:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4830:	f7ff fc31 	bl	d4096 <_Znwj>
   d4834:	b128      	cbz	r0, d4842 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d4836:	2301      	movs	r3, #1
   d4838:	6043      	str	r3, [r0, #4]
   d483a:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d483c:	4b02      	ldr	r3, [pc, #8]	; (d4848 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
   d483e:	6003      	str	r3, [r0, #0]
   d4840:	60c5      	str	r5, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d4842:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
   d4844:	4620      	mov	r0, r4
   d4846:	bd38      	pop	{r3, r4, r5, pc}
   d4848:	000d5de4 	.word	0x000d5de4

000d484c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d484c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d484e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4850:	b90a      	cbnz	r2, d4856 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d4852:	f000 fe70 	bl	d5536 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4856:	68c3      	ldr	r3, [r0, #12]
    }
   d4858:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d485c:	4718      	bx	r3

000d485e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d485e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4860:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4862:	f100 0110 	add.w	r1, r0, #16
   d4866:	f7ff fff1 	bl	d484c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d486a:	bd08      	pop	{r3, pc}

000d486c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d486c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d486e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d4870:	b90a      	cbnz	r2, d4876 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d4872:	f000 fe60 	bl	d5536 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d4876:	68c3      	ldr	r3, [r0, #12]
    }
   d4878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d487c:	4718      	bx	r3

000d487e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d487e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4880:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d4882:	f100 0110 	add.w	r1, r0, #16
   d4886:	f7ff fff1 	bl	d486c <_ZNKSt8functionIFvRKbEEclES1_>
   d488a:	bd08      	pop	{r3, pc}

000d488c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d488c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d488e:	2300      	movs	r3, #0
   d4890:	6083      	str	r3, [r0, #8]
   d4892:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4894:	4604      	mov	r4, r0
   d4896:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4898:	b12b      	cbz	r3, d48a6 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d489a:	2202      	movs	r2, #2
   d489c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d489e:	68eb      	ldr	r3, [r5, #12]
   d48a0:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d48a2:	68ab      	ldr	r3, [r5, #8]
   d48a4:	60a3      	str	r3, [r4, #8]
	}
    }
   d48a6:	4620      	mov	r0, r4
   d48a8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d48ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d48ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   d48ae:	b089      	sub	sp, #36	; 0x24
   d48b0:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
   d48b2:	4668      	mov	r0, sp
   d48b4:	f7ff ff3e 	bl	d4734 <_ZN8particle5ErrorC1EOS0_>
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d48b8:	2300      	movs	r3, #0
   d48ba:	f88d 3008 	strb.w	r3, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d48be:	f04f 0202 	mov.w	r2, #2
   d48c2:	e8d4 3f4f 	ldrexb	r3, [r4]
   d48c6:	2b00      	cmp	r3, #0
   d48c8:	d103      	bne.n	d48d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
   d48ca:	e8c4 2f41 	strexb	r1, r2, [r4]
   d48ce:	2900      	cmp	r1, #0
   d48d0:	d1f7      	bne.n	d48c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
   d48d2:	d002      	beq.n	d48da <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
   d48d4:	f88d 3008 	strb.w	r3, [sp, #8]
   d48d8:	e063      	b.n	d49a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d48da:	f114 050c 	adds.w	r5, r4, #12
   d48de:	d003      	beq.n	d48e8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
   d48e0:	4669      	mov	r1, sp
   d48e2:	4628      	mov	r0, r5
   d48e4:	f7ff ff26 	bl	d4734 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d48e8:	f3bf 8f5f 	dmb	sy
   d48ec:	2301      	movs	r3, #1
   d48ee:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d48f0:	2000      	movs	r0, #0
   d48f2:	f104 0308 	add.w	r3, r4, #8
   d48f6:	f3bf 8f5f 	dmb	sy
   d48fa:	e853 6f00 	ldrex	r6, [r3]
   d48fe:	e843 0200 	strex	r2, r0, [r3]
   d4902:	2a00      	cmp	r2, #0
   d4904:	d1f9      	bne.n	d48fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
   d4906:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d490a:	2e00      	cmp	r6, #0
   d490c:	d049      	beq.n	d49a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d490e:	f7ff fd9b 	bl	d4448 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4912:	b120      	cbz	r0, d491e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4914:	4629      	mov	r1, r5
   d4916:	4630      	mov	r0, r6
   d4918:	f7ff ff98 	bl	d484c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d491c:	e03a      	b.n	d4994 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d491e:	4631      	mov	r1, r6
   d4920:	a802      	add	r0, sp, #8
   d4922:	f7ff ffb3 	bl	d488c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4926:	68e0      	ldr	r0, [r4, #12]
   d4928:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d492c:	b108      	cbz	r0, d4932 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
   d492e:	f001 f94f 	bl	d5bd0 <strdup>
   d4932:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4934:	2010      	movs	r0, #16
   d4936:	f8ad 501c 	strh.w	r5, [sp, #28]
   d493a:	f7ff fbac 	bl	d4096 <_Znwj>
   d493e:	4605      	mov	r5, r0
   d4940:	b1e8      	cbz	r0, d497e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4942:	2700      	movs	r7, #0
   d4944:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4946:	2018      	movs	r0, #24
   d4948:	f7ff fba5 	bl	d4096 <_Znwj>
   d494c:	4604      	mov	r4, r0
   d494e:	b188      	cbz	r0, d4974 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4950:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4952:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4954:	a802      	add	r0, sp, #8
   d4956:	f7ff ff55 	bl	d4804 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d495a:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d495c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d495e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4960:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
   d4962:	9204      	str	r2, [sp, #16]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4964:	a906      	add	r1, sp, #24
   d4966:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4968:	60e3      	str	r3, [r4, #12]
   d496a:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d496e:	9205      	str	r2, [sp, #20]
   d4970:	f7ff fee0 	bl	d4734 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4974:	4b0d      	ldr	r3, [pc, #52]	; (d49ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
   d4976:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4978:	4b0d      	ldr	r3, [pc, #52]	; (d49b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d497a:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d497c:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
   d497e:	a806      	add	r0, sp, #24
   d4980:	f7ff fee7 	bl	d4752 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4984:	a802      	add	r0, sp, #8
   d4986:	f7ff fecc 	bl	d4722 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d498a:	2200      	movs	r2, #0
   d498c:	4629      	mov	r1, r5
   d498e:	4809      	ldr	r0, [pc, #36]	; (d49b4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
   d4990:	f7ff fd62 	bl	d4458 <application_thread_invoke>
   d4994:	4630      	mov	r0, r6
   d4996:	f7ff fec4 	bl	d4722 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d499a:	2110      	movs	r1, #16
   d499c:	4630      	mov	r0, r6
   d499e:	f000 fdc8 	bl	d5532 <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
   d49a2:	4668      	mov	r0, sp
   d49a4:	f7ff fed5 	bl	d4752 <_ZN8particle5ErrorD1Ev>
    }
   d49a8:	b009      	add	sp, #36	; 0x24
   d49aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d49ac:	000d485f 	.word	0x000d485f
   d49b0:	000d4ad5 	.word	0x000d4ad5
   d49b4:	000d45c5 	.word	0x000d45c5

000d49b8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d49b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d49bc:	b08b      	sub	sp, #44	; 0x2c
   d49be:	4606      	mov	r6, r0
   d49c0:	460f      	mov	r7, r1
   d49c2:	4690      	mov	r8, r2
   d49c4:	4699      	mov	r9, r3
   d49c6:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d49ca:	f7ff fd6b 	bl	d44a4 <spark_cloud_flag_connected>
   d49ce:	ad07      	add	r5, sp, #28
    if (!connected()) {
   d49d0:	4683      	mov	fp, r0
   d49d2:	bb30      	cbnz	r0, d4a22 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d49d4:	f64f 732e 	movw	r3, #65326	; 0xff2e
   d49d8:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d49da:	a905      	add	r1, sp, #20
   d49dc:	4628      	mov	r0, r5
   d49de:	f8ad 3018 	strh.w	r3, [sp, #24]
   d49e2:	f7ff fea7 	bl	d4734 <_ZN8particle5ErrorC1EOS0_>
   d49e6:	2014      	movs	r0, #20
   d49e8:	f7ff fb55 	bl	d4096 <_Znwj>
   d49ec:	4604      	mov	r4, r0
   d49ee:	b158      	cbz	r0, d4a08 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d49f0:	2302      	movs	r3, #2
   d49f2:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d49f4:	2301      	movs	r3, #1
   d49f6:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d49f8:	f8c0 b004 	str.w	fp, [r0, #4]
   d49fc:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
   d4a00:	4629      	mov	r1, r5
   d4a02:	300c      	adds	r0, #12
   d4a04:	f7ff fe96 	bl	d4734 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d4a08:	4630      	mov	r0, r6
   d4a0a:	4621      	mov	r1, r4
   d4a0c:	f840 4b04 	str.w	r4, [r0], #4
   d4a10:	f7ff ff08 	bl	d4824 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
   d4a14:	4628      	mov	r0, r5
   d4a16:	f7ff fe9c 	bl	d4752 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
   d4a1a:	a805      	add	r0, sp, #20
   d4a1c:	f7ff fe99 	bl	d4752 <_ZN8particle5ErrorD1Ev>
   d4a20:	e052      	b.n	d4ac8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d4a22:	2400      	movs	r4, #0
   d4a24:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d4a26:	2014      	movs	r0, #20
   d4a28:	606c      	str	r4, [r5, #4]
   d4a2a:	60ac      	str	r4, [r5, #8]
   d4a2c:	9307      	str	r3, [sp, #28]
   d4a2e:	f7ff fb32 	bl	d4096 <_Znwj>
   d4a32:	4601      	mov	r1, r0
   d4a34:	b118      	cbz	r0, d4a3e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
   d4a36:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4a38:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d4a3a:	6044      	str	r4, [r0, #4]
   d4a3c:	6084      	str	r4, [r0, #8]
   d4a3e:	a804      	add	r0, sp, #16
   d4a40:	9103      	str	r1, [sp, #12]
   d4a42:	f7ff feef 	bl	d4824 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d4a46:	4b22      	ldr	r3, [pc, #136]	; (d4ad0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
   d4a48:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d4a4a:	2008      	movs	r0, #8
   d4a4c:	f7ff fb23 	bl	d4096 <_Znwj>
   d4a50:	4604      	mov	r4, r0
   d4a52:	b128      	cbz	r0, d4a60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d4a54:	9b03      	ldr	r3, [sp, #12]
   d4a56:	f840 3b04 	str.w	r3, [r0], #4
   d4a5a:	a904      	add	r1, sp, #16
   d4a5c:	f7ff fdde 	bl	d461c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4a60:	9500      	str	r5, [sp, #0]
   d4a62:	fa5f f38a 	uxtb.w	r3, sl
   d4a66:	464a      	mov	r2, r9
   d4a68:	4641      	mov	r1, r8
   d4a6a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d4a6c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d4a6e:	f7ff fd21 	bl	d44b4 <spark_send_event>
   d4a72:	b920      	cbnz	r0, d4a7e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d4a74:	9b03      	ldr	r3, [sp, #12]
   d4a76:	785b      	ldrb	r3, [r3, #1]
   d4a78:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d4a7c:	b183      	cbz	r3, d4aa0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
   d4a7e:	9b03      	ldr	r3, [sp, #12]
   d4a80:	9305      	str	r3, [sp, #20]
   d4a82:	a904      	add	r1, sp, #16
   d4a84:	a806      	add	r0, sp, #24
   d4a86:	f7ff fdc9 	bl	d461c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d4a8a:	a905      	add	r1, sp, #20
   d4a8c:	4630      	mov	r0, r6
   d4a8e:	f7ff fe8a 	bl	d47a6 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d4a92:	a806      	add	r0, sp, #24
   d4a94:	f7ff fdc9 	bl	d462a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a98:	a804      	add	r0, sp, #16
   d4a9a:	f7ff fdc6 	bl	d462a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4a9e:	e013      	b.n	d4ac8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
   d4aa0:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d4aa4:	a905      	add	r1, sp, #20
   d4aa6:	a803      	add	r0, sp, #12
   d4aa8:	9205      	str	r2, [sp, #20]
   d4aaa:	f8ad 3018 	strh.w	r3, [sp, #24]
   d4aae:	f7ff fefd 	bl	d48ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4ab2:	a805      	add	r0, sp, #20
   d4ab4:	f7ff fe4d 	bl	d4752 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d4ab8:	a805      	add	r0, sp, #20
   d4aba:	9909      	ldr	r1, [sp, #36]	; 0x24
   d4abc:	f7ff fe84 	bl	d47c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
   d4ac0:	a806      	add	r0, sp, #24
   d4ac2:	f7ff fdb2 	bl	d462a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d4ac6:	e7da      	b.n	d4a7e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
    }

    return p.future();
}
   d4ac8:	4630      	mov	r0, r6
   d4aca:	b00b      	add	sp, #44	; 0x2c
   d4acc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ad0:	000d4c45 	.word	0x000d4c45

000d4ad4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4ad4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4ad6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ad8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4ada:	d006      	beq.n	d4aea <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d4adc:	2a03      	cmp	r2, #3
   d4ade:	d017      	beq.n	d4b10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d4ae0:	2a01      	cmp	r2, #1
   d4ae2:	d122      	bne.n	d4b2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4ae4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4ae6:	6003      	str	r3, [r0, #0]
	      break;
   d4ae8:	e01f      	b.n	d4b2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4aea:	2018      	movs	r0, #24
   d4aec:	680e      	ldr	r6, [r1, #0]
   d4aee:	f7ff fad2 	bl	d4096 <_Znwj>
   d4af2:	4605      	mov	r5, r0
   d4af4:	b150      	cbz	r0, d4b0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4af6:	4631      	mov	r1, r6
   d4af8:	f7ff fec8 	bl	d488c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d4afc:	6930      	ldr	r0, [r6, #16]
   d4afe:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d4b02:	b108      	cbz	r0, d4b08 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d4b04:	f001 f864 	bl	d5bd0 <strdup>
   d4b08:	6128      	str	r0, [r5, #16]
   d4b0a:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4b0c:	6025      	str	r5, [r4, #0]
   d4b0e:	e00c      	b.n	d4b2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4b10:	6804      	ldr	r4, [r0, #0]
   d4b12:	b154      	cbz	r4, d4b2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
   d4b14:	f104 0010 	add.w	r0, r4, #16
   d4b18:	f7ff fe1b 	bl	d4752 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4b1c:	4620      	mov	r0, r4
   d4b1e:	f7ff fe00 	bl	d4722 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4b22:	2118      	movs	r1, #24
   d4b24:	4620      	mov	r0, r4
   d4b26:	f000 fd04 	bl	d5532 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4b2a:	2000      	movs	r0, #0
   d4b2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4b2e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b2e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4b30:	2300      	movs	r3, #0
   d4b32:	6083      	str	r3, [r0, #8]
   d4b34:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d4b36:	4604      	mov	r4, r0
   d4b38:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d4b3a:	b12b      	cbz	r3, d4b48 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d4b3c:	2202      	movs	r2, #2
   d4b3e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d4b40:	68eb      	ldr	r3, [r5, #12]
   d4b42:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d4b44:	68ab      	ldr	r3, [r5, #8]
   d4b46:	60a3      	str	r3, [r4, #8]
	}
    }
   d4b48:	4620      	mov	r0, r4
   d4b4a:	bd38      	pop	{r3, r4, r5, pc}

000d4b4c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d4b4c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d4b4e:	b570      	push	{r4, r5, r6, lr}
   d4b50:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d4b52:	d006      	beq.n	d4b62 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d4b54:	2a03      	cmp	r2, #3
   d4b56:	d011      	beq.n	d4b7c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d4b58:	2a01      	cmp	r2, #1
   d4b5a:	d118      	bne.n	d4b8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d4b5c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d4b5e:	6003      	str	r3, [r0, #0]
	      break;
   d4b60:	e015      	b.n	d4b8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4b62:	2014      	movs	r0, #20
   d4b64:	680e      	ldr	r6, [r1, #0]
   d4b66:	f7ff fa96 	bl	d4096 <_Znwj>
   d4b6a:	4605      	mov	r5, r0
   d4b6c:	b120      	cbz	r0, d4b78 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d4b6e:	4631      	mov	r1, r6
   d4b70:	f7ff ffdd 	bl	d4b2e <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d4b74:	7c33      	ldrb	r3, [r6, #16]
   d4b76:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d4b78:	6025      	str	r5, [r4, #0]
   d4b7a:	e008      	b.n	d4b8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4b7c:	6804      	ldr	r4, [r0, #0]
   d4b7e:	b134      	cbz	r4, d4b8e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4b80:	4620      	mov	r0, r4
   d4b82:	f7ff fdce 	bl	d4722 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d4b86:	2114      	movs	r1, #20
   d4b88:	4620      	mov	r0, r4
   d4b8a:	f000 fcd2 	bl	d5532 <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d4b8e:	2000      	movs	r0, #0
   d4b90:	bd70      	pop	{r4, r5, r6, pc}
	...

000d4b94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d4b94:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d4b96:	2300      	movs	r3, #0
   d4b98:	b087      	sub	sp, #28
   d4b9a:	460c      	mov	r4, r1
   d4b9c:	f3bf 8f5f 	dmb	sy
   d4ba0:	e850 6f00 	ldrex	r6, [r0]
   d4ba4:	e840 3200 	strex	r2, r3, [r0]
   d4ba8:	2a00      	cmp	r2, #0
   d4baa:	d1f9      	bne.n	d4ba0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d4bac:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d4bb0:	2e00      	cmp	r6, #0
   d4bb2:	d03f      	beq.n	d4c34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d4bb4:	4618      	mov	r0, r3
   d4bb6:	f7ff fc47 	bl	d4448 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d4bba:	4607      	mov	r7, r0
   d4bbc:	b120      	cbz	r0, d4bc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d4bbe:	4621      	mov	r1, r4
   d4bc0:	4630      	mov	r0, r6
   d4bc2:	f7ff fe53 	bl	d486c <_ZNKSt8functionIFvRKbEEclES1_>
   d4bc6:	e02e      	b.n	d4c26 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d4bc8:	4631      	mov	r1, r6
   d4bca:	a801      	add	r0, sp, #4
   d4bcc:	f7ff ffaf 	bl	d4b2e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d4bd0:	7823      	ldrb	r3, [r4, #0]
   d4bd2:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d4bd6:	2010      	movs	r0, #16
   d4bd8:	f7ff fa5d 	bl	d4096 <_Znwj>
   d4bdc:	4605      	mov	r5, r0
   d4bde:	b1d0      	cbz	r0, d4c16 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4be0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4be2:	2014      	movs	r0, #20
   d4be4:	f7ff fa57 	bl	d4096 <_Znwj>
   d4be8:	4604      	mov	r4, r0
   d4bea:	b178      	cbz	r0, d4c0c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d4bec:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d4bee:	4601      	mov	r1, r0
   d4bf0:	a801      	add	r0, sp, #4
   d4bf2:	f7ff fe07 	bl	d4804 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4bf6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d4bf8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d4bfa:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4bfc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d4bfe:	9203      	str	r2, [sp, #12]
   d4c00:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d4c02:	60e3      	str	r3, [r4, #12]
   d4c04:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d4c08:	9204      	str	r2, [sp, #16]
   d4c0a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d4c0c:	4b0a      	ldr	r3, [pc, #40]	; (d4c38 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d4c0e:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d4c10:	4b0a      	ldr	r3, [pc, #40]	; (d4c3c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d4c12:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d4c14:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4c16:	a801      	add	r0, sp, #4
   d4c18:	f7ff fd83 	bl	d4722 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d4c1c:	2200      	movs	r2, #0
   d4c1e:	4629      	mov	r1, r5
   d4c20:	4807      	ldr	r0, [pc, #28]	; (d4c40 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d4c22:	f7ff fc19 	bl	d4458 <application_thread_invoke>
   d4c26:	4630      	mov	r0, r6
   d4c28:	f7ff fd7b 	bl	d4722 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d4c2c:	2110      	movs	r1, #16
   d4c2e:	4630      	mov	r0, r6
   d4c30:	f000 fc7f 	bl	d5532 <_ZdlPvj>
        }
    }
   d4c34:	b007      	add	sp, #28
   d4c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d4c38:	000d487f 	.word	0x000d487f
   d4c3c:	000d4b4d 	.word	0x000d4b4d
   d4c40:	000d45c5 	.word	0x000d45c5

000d4c44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:

namespace {

using namespace particle;

void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d4c44:	b530      	push	{r4, r5, lr}
   d4c46:	b085      	sub	sp, #20
   d4c48:	4604      	mov	r4, r0
   d4c4a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d4c4c:	4668      	mov	r0, sp
   d4c4e:	4611      	mov	r1, r2
   d4c50:	f7ff fdba 	bl	d47c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d4c54:	b17c      	cbz	r4, d4c76 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d4c56:	b224      	sxth	r4, r4
   d4c58:	4628      	mov	r0, r5
   d4c5a:	b10d      	cbz	r5, d4c60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d4c5c:	f000 ffb8 	bl	d5bd0 <strdup>
   d4c60:	9002      	str	r0, [sp, #8]
   d4c62:	a902      	add	r1, sp, #8
   d4c64:	4668      	mov	r0, sp
   d4c66:	f8ad 400c 	strh.w	r4, [sp, #12]
   d4c6a:	f7ff fe1f 	bl	d48ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
   d4c6e:	a802      	add	r0, sp, #8
   d4c70:	f7ff fd6f 	bl	d4752 <_ZN8particle5ErrorD1Ev>
   d4c74:	e01d      	b.n	d4cb2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d4c76:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d4c78:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d4c7c:	f04f 0201 	mov.w	r2, #1
   d4c80:	e8d0 3f4f 	ldrexb	r3, [r0]
   d4c84:	42a3      	cmp	r3, r4
   d4c86:	d103      	bne.n	d4c90 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d4c88:	e8c0 2f41 	strexb	r1, r2, [r0]
   d4c8c:	2900      	cmp	r1, #0
   d4c8e:	d1f7      	bne.n	d4c80 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d4c90:	d002      	beq.n	d4c98 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d4c92:	f88d 3008 	strb.w	r3, [sp, #8]
   d4c96:	e00c      	b.n	d4cb2 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d4c98:	f110 010c 	adds.w	r1, r0, #12
   d4c9c:	f04f 0301 	mov.w	r3, #1
   d4ca0:	bf18      	it	ne
   d4ca2:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d4ca4:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d4ca8:	3004      	adds	r0, #4
   d4caa:	f800 3c03 	strb.w	r3, [r0, #-3]
   d4cae:	f7ff ff71 	bl	d4b94 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d4cb2:	a801      	add	r0, sp, #4
   d4cb4:	f7ff fcb9 	bl	d462a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d4cb8:	b005      	add	sp, #20
   d4cba:	bd30      	pop	{r4, r5, pc}

000d4cbc <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4cbc:	2200      	movs	r2, #0
   d4cbe:	4611      	mov	r1, r2
   d4cc0:	6840      	ldr	r0, [r0, #4]
   d4cc2:	f7ff bc3f 	b.w	d4544 <network_listening>

000d4cc6 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4cc6:	2200      	movs	r2, #0
   d4cc8:	4611      	mov	r1, r2
   d4cca:	6840      	ldr	r0, [r0, #4]
   d4ccc:	f7ff bc4a 	b.w	d4564 <network_get_listen_timeout>

000d4cd0 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4cd0:	2200      	movs	r2, #0
   d4cd2:	6840      	ldr	r0, [r0, #4]
   d4cd4:	f7ff bc3e 	b.w	d4554 <network_set_listen_timeout>

000d4cd8 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4cd8:	2200      	movs	r2, #0
   d4cda:	f081 0101 	eor.w	r1, r1, #1
   d4cde:	6840      	ldr	r0, [r0, #4]
   d4ce0:	f7ff bc28 	b.w	d4534 <network_listen>

000d4ce4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4ce4:	2300      	movs	r3, #0
   d4ce6:	461a      	mov	r2, r3
   d4ce8:	4619      	mov	r1, r3
   d4cea:	6840      	ldr	r0, [r0, #4]
   d4cec:	f7ff bc1a 	b.w	d4524 <network_off>

000d4cf0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4cf0:	2300      	movs	r3, #0
   d4cf2:	461a      	mov	r2, r3
   d4cf4:	4619      	mov	r1, r3
   d4cf6:	6840      	ldr	r0, [r0, #4]
   d4cf8:	f7ff bc0c 	b.w	d4514 <network_on>

000d4cfc <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4cfc:	2200      	movs	r2, #0
   d4cfe:	4611      	mov	r1, r2
   d4d00:	6840      	ldr	r0, [r0, #4]
   d4d02:	f7ff bbff 	b.w	d4504 <network_ready>

000d4d06 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4d06:	2200      	movs	r2, #0
   d4d08:	4611      	mov	r1, r2
   d4d0a:	6840      	ldr	r0, [r0, #4]
   d4d0c:	f7ff bbea 	b.w	d44e4 <network_connecting>

000d4d10 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4d10:	2200      	movs	r2, #0
   d4d12:	2102      	movs	r1, #2
   d4d14:	6840      	ldr	r0, [r0, #4]
   d4d16:	f7ff bbed 	b.w	d44f4 <network_disconnect>

000d4d1a <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4d1a:	2300      	movs	r3, #0
   d4d1c:	461a      	mov	r2, r3
   d4d1e:	6840      	ldr	r0, [r0, #4]
   d4d20:	f7ff bbd8 	b.w	d44d4 <network_connect>

000d4d24 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d4d24:	4b02      	ldr	r3, [pc, #8]	; (d4d30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4d26:	2203      	movs	r2, #3
   d4d28:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4d2a:	4a02      	ldr	r2, [pc, #8]	; (d4d34 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4d2c:	601a      	str	r2, [r3, #0]
   d4d2e:	4770      	bx	lr
   d4d30:	2003e404 	.word	0x2003e404
   d4d34:	000d5e00 	.word	0x000d5e00

000d4d38 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d4d38:	4770      	bx	lr

000d4d3a <_ZN9IPAddressD0Ev>:
   d4d3a:	b510      	push	{r4, lr}
   d4d3c:	2118      	movs	r1, #24
   d4d3e:	4604      	mov	r4, r0
   d4d40:	f000 fbf7 	bl	d5532 <_ZdlPvj>
   d4d44:	4620      	mov	r0, r4
   d4d46:	bd10      	pop	{r4, pc}

000d4d48 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4d48:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4d4a:	7d03      	ldrb	r3, [r0, #20]
   d4d4c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d4d4e:	b08d      	sub	sp, #52	; 0x34
   d4d50:	460e      	mov	r6, r1
   d4d52:	f100 0704 	add.w	r7, r0, #4
   d4d56:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d4d5a:	d002      	beq.n	d4d62 <_ZNK9IPAddress7printToER5Print+0x1a>
   d4d5c:	f100 0508 	add.w	r5, r0, #8
   d4d60:	e018      	b.n	d4d94 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4d62:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4d64:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d4d66:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d4d6a:	232f      	movs	r3, #47	; 0x2f
   d4d6c:	462a      	mov	r2, r5
   d4d6e:	200a      	movs	r0, #10
   d4d70:	f7ff fad0 	bl	d4314 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4d74:	4628      	mov	r0, r5
   d4d76:	f000 ff46 	bl	d5c06 <strlen>
   d4d7a:	6833      	ldr	r3, [r6, #0]
   d4d7c:	4602      	mov	r2, r0
   d4d7e:	68db      	ldr	r3, [r3, #12]
   d4d80:	4629      	mov	r1, r5
   d4d82:	4630      	mov	r0, r6
   d4d84:	4798      	blx	r3
   d4d86:	e00f      	b.n	d4da8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d4d88:	b124      	cbz	r4, d4d94 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d4d8a:	212e      	movs	r1, #46	; 0x2e
   d4d8c:	4630      	mov	r0, r6
   d4d8e:	f000 f9d5 	bl	d513c <_ZN5Print5printEc>
   d4d92:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d4d94:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d4d98:	220a      	movs	r2, #10
   d4d9a:	4630      	mov	r0, r6
   d4d9c:	f000 f9d1 	bl	d5142 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4da0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4da2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d4da4:	d1f0      	bne.n	d4d88 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d4da6:	4620      	mov	r0, r4
    }
    return n;
}
   d4da8:	b00d      	add	sp, #52	; 0x34
   d4daa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4dac <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d4dac:	b510      	push	{r4, lr}
   d4dae:	4b05      	ldr	r3, [pc, #20]	; (d4dc4 <_ZN9IPAddressC1Ev+0x18>)
   d4db0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d4db2:	2211      	movs	r2, #17
   d4db4:	f840 3b04 	str.w	r3, [r0], #4
   d4db8:	2100      	movs	r1, #0
   d4dba:	f000 fed8 	bl	d5b6e <memset>
{
    clear();
}
   d4dbe:	4620      	mov	r0, r4
   d4dc0:	bd10      	pop	{r4, pc}
   d4dc2:	bf00      	nop
   d4dc4:	000d5e34 	.word	0x000d5e34

000d4dc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d4dc8:	4603      	mov	r3, r0
   d4dca:	4a07      	ldr	r2, [pc, #28]	; (d4de8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d4dcc:	b510      	push	{r4, lr}
   d4dce:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d4dd2:	f101 0210 	add.w	r2, r1, #16
   d4dd6:	f851 4b04 	ldr.w	r4, [r1], #4
   d4dda:	f843 4b04 	str.w	r4, [r3], #4
   d4dde:	4291      	cmp	r1, r2
   d4de0:	d1f9      	bne.n	d4dd6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d4de2:	780a      	ldrb	r2, [r1, #0]
   d4de4:	701a      	strb	r2, [r3, #0]
}
   d4de6:	bd10      	pop	{r4, pc}
   d4de8:	000d5e34 	.word	0x000d5e34

000d4dec <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d4dec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d4dee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d4df2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d4df6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d4dfa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d4dfe:	2304      	movs	r3, #4
   d4e00:	6041      	str	r1, [r0, #4]
   d4e02:	7503      	strb	r3, [r0, #20]
   d4e04:	bd10      	pop	{r4, pc}

000d4e06 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d4e06:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d4e08:	780d      	ldrb	r5, [r1, #0]
   d4e0a:	788b      	ldrb	r3, [r1, #2]
   d4e0c:	784a      	ldrb	r2, [r1, #1]
   d4e0e:	78c9      	ldrb	r1, [r1, #3]
   d4e10:	9100      	str	r1, [sp, #0]
   d4e12:	4629      	mov	r1, r5
   d4e14:	f7ff ffea 	bl	d4dec <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d4e18:	b003      	add	sp, #12
   d4e1a:	bd30      	pop	{r4, r5, pc}

000d4e1c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4e1c:	4b01      	ldr	r3, [pc, #4]	; (d4e24 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4e1e:	4a02      	ldr	r2, [pc, #8]	; (d4e28 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4e20:	601a      	str	r2, [r3, #0]
   d4e22:	4770      	bx	lr
   d4e24:	2003e40c 	.word	0x2003e40c
   d4e28:	000d5eb0 	.word	0x000d5eb0

000d4e2c <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4e2c:	2200      	movs	r2, #0
   d4e2e:	4611      	mov	r1, r2
   d4e30:	6840      	ldr	r0, [r0, #4]
   d4e32:	f7ff bb87 	b.w	d4544 <network_listening>

000d4e36 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4e36:	2200      	movs	r2, #0
   d4e38:	4611      	mov	r1, r2
   d4e3a:	6840      	ldr	r0, [r0, #4]
   d4e3c:	f7ff bb92 	b.w	d4564 <network_get_listen_timeout>

000d4e40 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4e40:	2200      	movs	r2, #0
   d4e42:	6840      	ldr	r0, [r0, #4]
   d4e44:	f7ff bb86 	b.w	d4554 <network_set_listen_timeout>

000d4e48 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4e48:	2200      	movs	r2, #0
   d4e4a:	f081 0101 	eor.w	r1, r1, #1
   d4e4e:	6840      	ldr	r0, [r0, #4]
   d4e50:	f7ff bb70 	b.w	d4534 <network_listen>

000d4e54 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d4e54:	2300      	movs	r3, #0
   d4e56:	461a      	mov	r2, r3
   d4e58:	2101      	movs	r1, #1
   d4e5a:	6840      	ldr	r0, [r0, #4]
   d4e5c:	f7ff bb62 	b.w	d4524 <network_off>

000d4e60 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4e60:	2300      	movs	r3, #0
   d4e62:	461a      	mov	r2, r3
   d4e64:	4619      	mov	r1, r3
   d4e66:	6840      	ldr	r0, [r0, #4]
   d4e68:	f7ff bb54 	b.w	d4514 <network_on>

000d4e6c <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4e6c:	2200      	movs	r2, #0
   d4e6e:	4611      	mov	r1, r2
   d4e70:	6840      	ldr	r0, [r0, #4]
   d4e72:	f7ff bb47 	b.w	d4504 <network_ready>

000d4e76 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4e76:	2200      	movs	r2, #0
   d4e78:	4611      	mov	r1, r2
   d4e7a:	6840      	ldr	r0, [r0, #4]
   d4e7c:	f7ff bb32 	b.w	d44e4 <network_connecting>

000d4e80 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4e80:	2200      	movs	r2, #0
   d4e82:	2102      	movs	r1, #2
   d4e84:	6840      	ldr	r0, [r0, #4]
   d4e86:	f7ff bb35 	b.w	d44f4 <network_disconnect>

000d4e8a <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4e8a:	2300      	movs	r3, #0
   d4e8c:	461a      	mov	r2, r3
   d4e8e:	6840      	ldr	r0, [r0, #4]
   d4e90:	f7ff bb20 	b.w	d44d4 <network_connect>

000d4e94 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d4e94:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4e96:	4605      	mov	r5, r0
   d4e98:	b188      	cbz	r0, d4ebe <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4e9a:	6804      	ldr	r4, [r0, #0]
   d4e9c:	b14c      	cbz	r4, d4eb2 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d4e9e:	68a3      	ldr	r3, [r4, #8]
   d4ea0:	b11b      	cbz	r3, d4eaa <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4ea2:	2203      	movs	r2, #3
   d4ea4:	4621      	mov	r1, r4
   d4ea6:	4620      	mov	r0, r4
   d4ea8:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4eaa:	2110      	movs	r1, #16
   d4eac:	4620      	mov	r0, r4
   d4eae:	f000 fb40 	bl	d5532 <_ZdlPvj>
   d4eb2:	4628      	mov	r0, r5
   d4eb4:	2114      	movs	r1, #20
      }
   d4eb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4eba:	f000 bb3a 	b.w	d5532 <_ZdlPvj>
   d4ebe:	bd38      	pop	{r3, r4, r5, pc}

000d4ec0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d4ec0:	b110      	cbz	r0, d4ec8 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d4ec2:	6803      	ldr	r3, [r0, #0]
   d4ec4:	685b      	ldr	r3, [r3, #4]
   d4ec6:	4718      	bx	r3
   d4ec8:	4770      	bx	lr

000d4eca <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d4eca:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d4ecc:	6803      	ldr	r3, [r0, #0]
   d4ece:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d4ed0:	b1bb      	cbz	r3, d4f02 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d4ed2:	6858      	ldr	r0, [r3, #4]
   d4ed4:	f7ff f9d6 	bl	d4284 <os_thread_is_current>
   d4ed8:	b978      	cbnz	r0, d4efa <_ZN6ThreadD1Ev+0x30>
   d4eda:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d4edc:	7c5a      	ldrb	r2, [r3, #17]
   d4ede:	b912      	cbnz	r2, d4ee6 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d4ee0:	6858      	ldr	r0, [r3, #4]
   d4ee2:	f7ff f9d7 	bl	d4294 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d4ee6:	6823      	ldr	r3, [r4, #0]
   d4ee8:	6858      	ldr	r0, [r3, #4]
   d4eea:	f7ff f9db 	bl	d42a4 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d4eee:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d4ef0:	2300      	movs	r3, #0
   d4ef2:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d4ef4:	b128      	cbz	r0, d4f02 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d4ef6:	f7ff ffcd 	bl	d4e94 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4efa:	6820      	ldr	r0, [r4, #0]
   d4efc:	b108      	cbz	r0, d4f02 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d4efe:	f7ff ffc9 	bl	d4e94 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d4f02:	4620      	mov	r0, r4
   d4f04:	bd10      	pop	{r4, pc}

000d4f06 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d4f06:	b538      	push	{r3, r4, r5, lr}
   d4f08:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f0a:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d4f0e:	b108      	cbz	r0, d4f14 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d4f10:	f7ff f8c5 	bl	d409e <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f14:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d4f18:	b108      	cbz	r0, d4f1e <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d4f1a:	f7ff f9d3 	bl	d42c4 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f1e:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d4f22:	b135      	cbz	r5, d4f32 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d4f24:	4628      	mov	r0, r5
   d4f26:	f7ff ffd0 	bl	d4eca <_ZN6ThreadD1Ev>
   d4f2a:	2104      	movs	r1, #4
   d4f2c:	4628      	mov	r0, r5
   d4f2e:	f000 fb00 	bl	d5532 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d4f32:	6820      	ldr	r0, [r4, #0]
   d4f34:	b108      	cbz	r0, d4f3a <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d4f36:	f7ff ffc3 	bl	d4ec0 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d4f3a:	4620      	mov	r0, r4
   d4f3c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d4f40 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d4f40:	b510      	push	{r4, lr}
   d4f42:	4b04      	ldr	r3, [pc, #16]	; (d4f54 <_ZN5spark9MeshClassD1Ev+0x14>)
   d4f44:	4604      	mov	r4, r0
   d4f46:	f840 3b08 	str.w	r3, [r0], #8
   d4f4a:	f7ff ffdc 	bl	d4f06 <_ZN5spark11MeshPublishD1Ev>
   d4f4e:	4620      	mov	r0, r4
   d4f50:	bd10      	pop	{r4, pc}
   d4f52:	bf00      	nop
   d4f54:	000d5f24 	.word	0x000d5f24

000d4f58 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d4f58:	b538      	push	{r3, r4, r5, lr}
   d4f5a:	4c0e      	ldr	r4, [pc, #56]	; (d4f94 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d4f5c:	4b0e      	ldr	r3, [pc, #56]	; (d4f98 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d4f5e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d4f60:	2500      	movs	r5, #0
   d4f62:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d4f64:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d4f68:	6063      	str	r3, [r4, #4]
   d4f6a:	60a5      	str	r5, [r4, #8]
   d4f6c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f70:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d4f74:	f7ff f99e 	bl	d42b4 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d4f78:	4b08      	ldr	r3, [pc, #32]	; (d4f9c <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d4f7a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d4f7e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d4f82:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d4f84:	4620      	mov	r0, r4
   d4f86:	4a06      	ldr	r2, [pc, #24]	; (d4fa0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d4f88:	4906      	ldr	r1, [pc, #24]	; (d4fa4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d4f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d4f8e:	f000 bacb 	b.w	d5528 <__aeabi_atexit>
   d4f92:	bf00      	nop
   d4f94:	2003e410 	.word	0x2003e410
   d4f98:	000d5f58 	.word	0x000d5f58
   d4f9c:	000d5f24 	.word	0x000d5f24
   d4fa0:	2003e3c4 	.word	0x2003e3c4
   d4fa4:	000d4f41 	.word	0x000d4f41

000d4fa8 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d4fa8:	2300      	movs	r3, #0
   d4faa:	461a      	mov	r2, r3
   d4fac:	6840      	ldr	r0, [r0, #4]
   d4fae:	f7ff ba91 	b.w	d44d4 <network_connect>

000d4fb2 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d4fb2:	2200      	movs	r2, #0
   d4fb4:	2102      	movs	r1, #2
   d4fb6:	6840      	ldr	r0, [r0, #4]
   d4fb8:	f7ff ba9c 	b.w	d44f4 <network_disconnect>

000d4fbc <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d4fbc:	2200      	movs	r2, #0
   d4fbe:	4611      	mov	r1, r2
   d4fc0:	6840      	ldr	r0, [r0, #4]
   d4fc2:	f7ff ba8f 	b.w	d44e4 <network_connecting>

000d4fc6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d4fc6:	2200      	movs	r2, #0
   d4fc8:	4611      	mov	r1, r2
   d4fca:	6840      	ldr	r0, [r0, #4]
   d4fcc:	f7ff ba9a 	b.w	d4504 <network_ready>

000d4fd0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d4fd0:	2300      	movs	r3, #0
   d4fd2:	461a      	mov	r2, r3
   d4fd4:	4619      	mov	r1, r3
   d4fd6:	6840      	ldr	r0, [r0, #4]
   d4fd8:	f7ff ba9c 	b.w	d4514 <network_on>

000d4fdc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d4fdc:	2300      	movs	r3, #0
   d4fde:	461a      	mov	r2, r3
   d4fe0:	4619      	mov	r1, r3
   d4fe2:	6840      	ldr	r0, [r0, #4]
   d4fe4:	f7ff ba9e 	b.w	d4524 <network_off>

000d4fe8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d4fe8:	2200      	movs	r2, #0
   d4fea:	f081 0101 	eor.w	r1, r1, #1
   d4fee:	6840      	ldr	r0, [r0, #4]
   d4ff0:	f7ff baa0 	b.w	d4534 <network_listen>

000d4ff4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d4ff4:	2200      	movs	r2, #0
   d4ff6:	6840      	ldr	r0, [r0, #4]
   d4ff8:	f7ff baac 	b.w	d4554 <network_set_listen_timeout>

000d4ffc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d4ffc:	2200      	movs	r2, #0
   d4ffe:	4611      	mov	r1, r2
   d5000:	6840      	ldr	r0, [r0, #4]
   d5002:	f7ff baaf 	b.w	d4564 <network_get_listen_timeout>

000d5006 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5006:	2200      	movs	r2, #0
   d5008:	4611      	mov	r1, r2
   d500a:	6840      	ldr	r0, [r0, #4]
   d500c:	f7ff ba9a 	b.w	d4544 <network_listening>

000d5010 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5010:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5014:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5016:	b095      	sub	sp, #84	; 0x54
   d5018:	4616      	mov	r6, r2
   d501a:	460d      	mov	r5, r1
   d501c:	4607      	mov	r7, r0
    IPAddress addr;
   d501e:	f7ff fec5 	bl	d4dac <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5022:	4621      	mov	r1, r4
   d5024:	2220      	movs	r2, #32
   d5026:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5028:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d502a:	f000 fda0 	bl	d5b6e <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d502e:	2340      	movs	r3, #64	; 0x40
   d5030:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5032:	4621      	mov	r1, r4
   d5034:	466b      	mov	r3, sp
   d5036:	aa0c      	add	r2, sp, #48	; 0x30
   d5038:	4630      	mov	r0, r6
   d503a:	f7ff f97b 	bl	d4334 <netdb_getaddrinfo>
    if (!r) {
   d503e:	4604      	mov	r4, r0
   d5040:	2800      	cmp	r0, #0
   d5042:	d144      	bne.n	d50ce <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5044:	4602      	mov	r2, r0
   d5046:	2101      	movs	r1, #1
   d5048:	6868      	ldr	r0, [r5, #4]
   d504a:	f7ff fa5b 	bl	d4504 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d504e:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5050:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5052:	4622      	mov	r2, r4
   d5054:	6868      	ldr	r0, [r5, #4]
   d5056:	f7ff fa55 	bl	d4504 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d505a:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d505c:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d505e:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5060:	2e00      	cmp	r6, #0
   d5062:	d034      	beq.n	d50ce <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5064:	2900      	cmp	r1, #0
   d5066:	d132      	bne.n	d50ce <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5068:	6873      	ldr	r3, [r6, #4]
   d506a:	2b02      	cmp	r3, #2
   d506c:	d002      	beq.n	d5074 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d506e:	2b0a      	cmp	r3, #10
   d5070:	d009      	beq.n	d5086 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5072:	e02a      	b.n	d50ca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5074:	f1b8 0f00 	cmp.w	r8, #0
   d5078:	d027      	beq.n	d50ca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d507a:	6971      	ldr	r1, [r6, #20]
   d507c:	4638      	mov	r0, r7
   d507e:	3104      	adds	r1, #4
   d5080:	f7ff fec1 	bl	d4e06 <_ZN9IPAddressaSEPKh>
   d5084:	e020      	b.n	d50c8 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5086:	f1b9 0f00 	cmp.w	r9, #0
   d508a:	d01e      	beq.n	d50ca <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d508c:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d508e:	2211      	movs	r2, #17
   d5090:	a801      	add	r0, sp, #4
   d5092:	f000 fd6c 	bl	d5b6e <memset>
                    a.v = 6;
   d5096:	2306      	movs	r3, #6
   d5098:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d509c:	ad01      	add	r5, sp, #4
   d509e:	f104 0308 	add.w	r3, r4, #8
   d50a2:	3418      	adds	r4, #24
   d50a4:	6818      	ldr	r0, [r3, #0]
   d50a6:	6859      	ldr	r1, [r3, #4]
   d50a8:	462a      	mov	r2, r5
   d50aa:	c203      	stmia	r2!, {r0, r1}
   d50ac:	3308      	adds	r3, #8
   d50ae:	42a3      	cmp	r3, r4
   d50b0:	4615      	mov	r5, r2
   d50b2:	d1f7      	bne.n	d50a4 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d50b4:	a901      	add	r1, sp, #4
   d50b6:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d50b8:	ad07      	add	r5, sp, #28
   d50ba:	f7ff fe85 	bl	d4dc8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d50be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d50c0:	1d3c      	adds	r4, r7, #4
   d50c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d50c4:	682b      	ldr	r3, [r5, #0]
   d50c6:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d50c8:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d50ca:	69f6      	ldr	r6, [r6, #28]
   d50cc:	e7c8      	b.n	d5060 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d50ce:	9800      	ldr	r0, [sp, #0]
   d50d0:	f7ff f928 	bl	d4324 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d50d4:	4638      	mov	r0, r7
   d50d6:	b015      	add	sp, #84	; 0x54
   d50d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d50dc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d50dc:	4b02      	ldr	r3, [pc, #8]	; (d50e8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d50de:	4a03      	ldr	r2, [pc, #12]	; (d50ec <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d50e0:	601a      	str	r2, [r3, #0]
   d50e2:	2200      	movs	r2, #0
   d50e4:	605a      	str	r2, [r3, #4]
   d50e6:	4770      	bx	lr
   d50e8:	2003e5e4 	.word	0x2003e5e4
   d50ec:	000d5f58 	.word	0x000d5f58

000d50f0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d50f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d50f2:	4606      	mov	r6, r0
   d50f4:	460d      	mov	r5, r1
   d50f6:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d50f8:	2400      	movs	r4, #0
  while (size--) {
   d50fa:	42bd      	cmp	r5, r7
   d50fc:	d00c      	beq.n	d5118 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d50fe:	6833      	ldr	r3, [r6, #0]
   d5100:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5104:	689b      	ldr	r3, [r3, #8]
   d5106:	4630      	mov	r0, r6
   d5108:	4798      	blx	r3
     if (chunk>=0)
   d510a:	2800      	cmp	r0, #0
   d510c:	db01      	blt.n	d5112 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d510e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5110:	e7f3      	b.n	d50fa <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5112:	2c00      	cmp	r4, #0
   d5114:	bf08      	it	eq
   d5116:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5118:	4620      	mov	r0, r4
   d511a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d511c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d511c:	b570      	push	{r4, r5, r6, lr}
   d511e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5120:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5122:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5124:	b149      	cbz	r1, d513a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5126:	f000 fd6e 	bl	d5c06 <strlen>
   d512a:	682b      	ldr	r3, [r5, #0]
   d512c:	4602      	mov	r2, r0
   d512e:	4621      	mov	r1, r4
   d5130:	4628      	mov	r0, r5
   d5132:	68db      	ldr	r3, [r3, #12]
    }
   d5134:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5138:	4718      	bx	r3
    }
   d513a:	bd70      	pop	{r4, r5, r6, pc}

000d513c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d513c:	6803      	ldr	r3, [r0, #0]
   d513e:	689b      	ldr	r3, [r3, #8]
   d5140:	4718      	bx	r3

000d5142 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5142:	b530      	push	{r4, r5, lr}
   d5144:	b08b      	sub	sp, #44	; 0x2c
   d5146:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5148:	2100      	movs	r1, #0
   d514a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d514e:	2a01      	cmp	r2, #1
   d5150:	bf98      	it	ls
   d5152:	220a      	movls	r2, #10
   d5154:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5158:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d515c:	fb05 3312 	mls	r3, r5, r2, r3
   d5160:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5164:	2b09      	cmp	r3, #9
   d5166:	bf94      	ite	ls
   d5168:	3330      	addls	r3, #48	; 0x30
   d516a:	3337      	addhi	r3, #55	; 0x37
   d516c:	b2db      	uxtb	r3, r3
   d516e:	4621      	mov	r1, r4
   d5170:	f804 3901 	strb.w	r3, [r4], #-1
   d5174:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5176:	2d00      	cmp	r5, #0
   d5178:	d1ee      	bne.n	d5158 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d517a:	f7ff ffcf 	bl	d511c <_ZN5Print5writeEPKc>
}
   d517e:	b00b      	add	sp, #44	; 0x2c
   d5180:	bd30      	pop	{r4, r5, pc}

000d5182 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5182:	b510      	push	{r4, lr}
   d5184:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5186:	f7ff facc 	bl	d4722 <_ZNSt14_Function_baseD1Ev>
   d518a:	4620      	mov	r0, r4
   d518c:	bd10      	pop	{r4, pc}
	...

000d5190 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5190:	4803      	ldr	r0, [pc, #12]	; (d51a0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5192:	4a04      	ldr	r2, [pc, #16]	; (d51a4 <_GLOBAL__sub_I_RGB+0x14>)
   d5194:	4904      	ldr	r1, [pc, #16]	; (d51a8 <_GLOBAL__sub_I_RGB+0x18>)
   d5196:	2300      	movs	r3, #0
   d5198:	6083      	str	r3, [r0, #8]
   d519a:	f000 b9c5 	b.w	d5528 <__aeabi_atexit>
   d519e:	bf00      	nop
   d51a0:	2003e5ec 	.word	0x2003e5ec
   d51a4:	2003e3c4 	.word	0x2003e3c4
   d51a8:	000d5183 	.word	0x000d5183

000d51ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d51ac:	b510      	push	{r4, lr}
   d51ae:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d51b0:	6800      	ldr	r0, [r0, #0]
   d51b2:	b118      	cbz	r0, d51bc <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2+0x10>
            free(wakeupSource_);
   d51b4:	f7ff f9e6 	bl	d4584 <free>
            wakeupSource_ = nullptr;
   d51b8:	2300      	movs	r3, #0
   d51ba:	6023      	str	r3, [r4, #0]
   d51bc:	bd10      	pop	{r4, pc}

000d51be <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d51be:	b510      	push	{r4, lr}
   d51c0:	4604      	mov	r4, r0
        }
        return *this;
    }

    ~SystemSleepResult() {
        freeWakeupSourceMemory();
   d51c2:	f7ff fff3 	bl	d51ac <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.2>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d51c6:	4620      	mov	r0, r4
   d51c8:	bd10      	pop	{r4, pc}
	...

000d51cc <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d51cc:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d51ce:	4c09      	ldr	r4, [pc, #36]	; (d51f4 <_GLOBAL__sub_I_System+0x28>)
   d51d0:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d51d2:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d51d6:	6020      	str	r0, [r4, #0]
   d51d8:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d51da:	71a0      	strb	r0, [r4, #6]
   d51dc:	8120      	strh	r0, [r4, #8]
   d51de:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d51e0:	f7ff f92a 	bl	d4438 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d51e4:	4620      	mov	r0, r4
   d51e6:	4a04      	ldr	r2, [pc, #16]	; (d51f8 <_GLOBAL__sub_I_System+0x2c>)
   d51e8:	4904      	ldr	r1, [pc, #16]	; (d51fc <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d51ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d51ee:	f000 b99b 	b.w	d5528 <__aeabi_atexit>
   d51f2:	bf00      	nop
   d51f4:	2003e5fc 	.word	0x2003e5fc
   d51f8:	2003e3c4 	.word	0x2003e3c4
   d51fc:	000d51bf 	.word	0x000d51bf

000d5200 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5200:	4b02      	ldr	r3, [pc, #8]	; (d520c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5202:	681a      	ldr	r2, [r3, #0]
   d5204:	4b02      	ldr	r3, [pc, #8]	; (d5210 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5206:	601a      	str	r2, [r3, #0]
   d5208:	4770      	bx	lr
   d520a:	bf00      	nop
   d520c:	2003e35c 	.word	0x2003e35c
   d5210:	2003e608 	.word	0x2003e608

000d5214 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d5214:	4770      	bx	lr

000d5216 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5216:	7441      	strb	r1, [r0, #17]
   d5218:	4770      	bx	lr

000d521a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d521a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d521c:	7c00      	ldrb	r0, [r0, #16]
   d521e:	f7ff f8c1 	bl	d43a4 <HAL_USART_Available_Data_For_Write>
}
   d5222:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5226:	bd08      	pop	{r3, pc}

000d5228 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5228:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d522a:	7c00      	ldrb	r0, [r0, #16]
   d522c:	f7ff f89a 	bl	d4364 <HAL_USART_Available_Data>
}
   d5230:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5234:	bd08      	pop	{r3, pc}

000d5236 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d5236:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5238:	7c00      	ldrb	r0, [r0, #16]
   d523a:	f7ff f8a3 	bl	d4384 <HAL_USART_Peek_Data>
}
   d523e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5242:	bf28      	it	cs
   d5244:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5248:	bd08      	pop	{r3, pc}

000d524a <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d524a:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d524c:	7c00      	ldrb	r0, [r0, #16]
   d524e:	f7ff f891 	bl	d4374 <HAL_USART_Read_Data>
}
   d5252:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5256:	bf28      	it	cs
   d5258:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d525c:	bd08      	pop	{r3, pc}

000d525e <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d525e:	7c00      	ldrb	r0, [r0, #16]
   d5260:	f7ff b898 	b.w	d4394 <HAL_USART_Flush_Data>

000d5264 <_ZN11USARTSerialD0Ev>:
   d5264:	b510      	push	{r4, lr}
   d5266:	2114      	movs	r1, #20
   d5268:	4604      	mov	r4, r0
   d526a:	f000 f962 	bl	d5532 <_ZdlPvj>
   d526e:	4620      	mov	r0, r4
   d5270:	bd10      	pop	{r4, pc}

000d5272 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5272:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5274:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d5276:	4604      	mov	r4, r0
   d5278:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d527a:	b925      	cbnz	r5, d5286 <_ZN11USARTSerial5writeEh+0x14>
   d527c:	7c00      	ldrb	r0, [r0, #16]
   d527e:	f7ff f891 	bl	d43a4 <HAL_USART_Available_Data_For_Write>
   d5282:	2800      	cmp	r0, #0
   d5284:	dd05      	ble.n	d5292 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d5286:	4631      	mov	r1, r6
   d5288:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d528a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d528e:	f7ff b861 	b.w	d4354 <HAL_USART_Write_Data>
  }
  return 0;
}
   d5292:	4628      	mov	r0, r5
   d5294:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5298 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d5298:	b510      	push	{r4, lr}
   d529a:	4604      	mov	r4, r0
   d529c:	4608      	mov	r0, r1
   d529e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d52a0:	2200      	movs	r2, #0
   d52a2:	6062      	str	r2, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d52a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d52a8:	60a2      	str	r2, [r4, #8]
   d52aa:	4a05      	ldr	r2, [pc, #20]	; (d52c0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d52ac:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d52ae:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d52b0:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d52b2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d52b4:	461a      	mov	r2, r3
   d52b6:	f7ff f845 	bl	d4344 <HAL_USART_Init>
}
   d52ba:	4620      	mov	r0, r4
   d52bc:	bd10      	pop	{r4, pc}
   d52be:	bf00      	nop
   d52c0:	000d5fb8 	.word	0x000d5fb8

000d52c4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d52c4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d52c6:	4d0c      	ldr	r5, [pc, #48]	; (d52f8 <_Z22__fetch_global_Serial1v+0x34>)
   d52c8:	6829      	ldr	r1, [r5, #0]
   d52ca:	f011 0401 	ands.w	r4, r1, #1
   d52ce:	d111      	bne.n	d52f4 <_Z22__fetch_global_Serial1v+0x30>
   d52d0:	4628      	mov	r0, r5
   d52d2:	f7fe fee6 	bl	d40a2 <__cxa_guard_acquire>
   d52d6:	b168      	cbz	r0, d52f4 <_Z22__fetch_global_Serial1v+0x30>
   d52d8:	4a08      	ldr	r2, [pc, #32]	; (d52fc <_Z22__fetch_global_Serial1v+0x38>)
   d52da:	4b09      	ldr	r3, [pc, #36]	; (d5300 <_Z22__fetch_global_Serial1v+0x3c>)
   d52dc:	4809      	ldr	r0, [pc, #36]	; (d5304 <_Z22__fetch_global_Serial1v+0x40>)
   d52de:	4621      	mov	r1, r4
   d52e0:	f7ff ffda 	bl	d5298 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d52e4:	4628      	mov	r0, r5
   d52e6:	f7fe fee1 	bl	d40ac <__cxa_guard_release>
   d52ea:	4a07      	ldr	r2, [pc, #28]	; (d5308 <_Z22__fetch_global_Serial1v+0x44>)
   d52ec:	4907      	ldr	r1, [pc, #28]	; (d530c <_Z22__fetch_global_Serial1v+0x48>)
   d52ee:	4805      	ldr	r0, [pc, #20]	; (d5304 <_Z22__fetch_global_Serial1v+0x40>)
   d52f0:	f000 f91a 	bl	d5528 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d52f4:	4803      	ldr	r0, [pc, #12]	; (d5304 <_Z22__fetch_global_Serial1v+0x40>)
   d52f6:	bd38      	pop	{r3, r4, r5, pc}
   d52f8:	2003e6a4 	.word	0x2003e6a4
   d52fc:	2003e6a8 	.word	0x2003e6a8
   d5300:	2003e620 	.word	0x2003e620
   d5304:	2003e60c 	.word	0x2003e60c
   d5308:	2003e3c4 	.word	0x2003e3c4
   d530c:	000d5215 	.word	0x000d5215

000d5310 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d5310:	7441      	strb	r1, [r0, #17]
   d5312:	4770      	bx	lr

000d5314 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5314:	4770      	bx	lr

000d5316 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5316:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5318:	2100      	movs	r1, #0
   d531a:	7c00      	ldrb	r0, [r0, #16]
   d531c:	f7ff f862 	bl	d43e4 <HAL_USB_USART_Receive_Data>
}
   d5320:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5324:	bf28      	it	cs
   d5326:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d532a:	bd08      	pop	{r3, pc}

000d532c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d532c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d532e:	2101      	movs	r1, #1
   d5330:	7c00      	ldrb	r0, [r0, #16]
   d5332:	f7ff f857 	bl	d43e4 <HAL_USB_USART_Receive_Data>
}
   d5336:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d533a:	bf28      	it	cs
   d533c:	f04f 30ff 	movcs.w	r0, #4294967295	; 0xffffffff
   d5340:	bd08      	pop	{r3, pc}

000d5342 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d5342:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5344:	7c00      	ldrb	r0, [r0, #16]
   d5346:	f7ff f845 	bl	d43d4 <HAL_USB_USART_Available_Data_For_Write>
}
   d534a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d534e:	bd08      	pop	{r3, pc}

000d5350 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d5350:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d5352:	7c00      	ldrb	r0, [r0, #16]
   d5354:	f7ff f836 	bl	d43c4 <HAL_USB_USART_Available_Data>
}
   d5358:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d535c:	bd08      	pop	{r3, pc}

000d535e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d535e:	7c00      	ldrb	r0, [r0, #16]
   d5360:	f7ff b850 	b.w	d4404 <HAL_USB_USART_Flush_Data>

000d5364 <_ZN9USBSerialD0Ev>:
   d5364:	b510      	push	{r4, lr}
   d5366:	2114      	movs	r1, #20
   d5368:	4604      	mov	r4, r0
   d536a:	f000 f8e2 	bl	d5532 <_ZdlPvj>
   d536e:	4620      	mov	r0, r4
   d5370:	bd10      	pop	{r4, pc}

000d5372 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5372:	b538      	push	{r3, r4, r5, lr}
   d5374:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5376:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5378:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d537a:	f7ff f82b 	bl	d43d4 <HAL_USB_USART_Available_Data_For_Write>
   d537e:	2800      	cmp	r0, #0
   d5380:	dc01      	bgt.n	d5386 <_ZN9USBSerial5writeEh+0x14>
   d5382:	7c60      	ldrb	r0, [r4, #17]
   d5384:	b128      	cbz	r0, d5392 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5386:	4629      	mov	r1, r5
   d5388:	7c20      	ldrb	r0, [r4, #16]
   d538a:	f7ff f833 	bl	d43f4 <HAL_USB_USART_Send_Data>
   d538e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d5392:	bd38      	pop	{r3, r4, r5, pc}

000d5394 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5394:	b510      	push	{r4, lr}
   d5396:	4604      	mov	r4, r0
   d5398:	2300      	movs	r3, #0
   d539a:	6063      	str	r3, [r4, #4]
   d539c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d53a0:	60a3      	str	r3, [r4, #8]
   d53a2:	4b05      	ldr	r3, [pc, #20]	; (d53b8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d53a4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d53a6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d53a8:	4608      	mov	r0, r1
{
  _serial = serial;
   d53aa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d53ac:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d53ae:	4611      	mov	r1, r2
   d53b0:	f7ff f800 	bl	d43b4 <HAL_USB_USART_Init>
}
   d53b4:	4620      	mov	r0, r4
   d53b6:	bd10      	pop	{r4, pc}
   d53b8:	000d5fe8 	.word	0x000d5fe8

000d53bc <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d53bc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d53be:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d53c0:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d53c2:	2100      	movs	r1, #0
   d53c4:	f000 fbd3 	bl	d5b6e <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d53c8:	4620      	mov	r0, r4
   d53ca:	bd10      	pop	{r4, pc}

000d53cc <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d53cc:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53ce:	4d0e      	ldr	r5, [pc, #56]	; (d5408 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d53d0:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d53d2:	a801      	add	r0, sp, #4
   d53d4:	f7ff fff2 	bl	d53bc <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53d8:	6829      	ldr	r1, [r5, #0]
   d53da:	f011 0401 	ands.w	r4, r1, #1
   d53de:	d110      	bne.n	d5402 <_Z16_fetch_usbserialv+0x36>
   d53e0:	4628      	mov	r0, r5
   d53e2:	f7fe fe5e 	bl	d40a2 <__cxa_guard_acquire>
   d53e6:	b160      	cbz	r0, d5402 <_Z16_fetch_usbserialv+0x36>
   d53e8:	aa01      	add	r2, sp, #4
   d53ea:	4621      	mov	r1, r4
   d53ec:	4807      	ldr	r0, [pc, #28]	; (d540c <_Z16_fetch_usbserialv+0x40>)
   d53ee:	f7ff ffd1 	bl	d5394 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d53f2:	4628      	mov	r0, r5
   d53f4:	f7fe fe5a 	bl	d40ac <__cxa_guard_release>
   d53f8:	4a05      	ldr	r2, [pc, #20]	; (d5410 <_Z16_fetch_usbserialv+0x44>)
   d53fa:	4906      	ldr	r1, [pc, #24]	; (d5414 <_Z16_fetch_usbserialv+0x48>)
   d53fc:	4803      	ldr	r0, [pc, #12]	; (d540c <_Z16_fetch_usbserialv+0x40>)
   d53fe:	f000 f893 	bl	d5528 <__aeabi_atexit>
	return _usbserial;
}
   d5402:	4802      	ldr	r0, [pc, #8]	; (d540c <_Z16_fetch_usbserialv+0x40>)
   d5404:	b007      	add	sp, #28
   d5406:	bd30      	pop	{r4, r5, pc}
   d5408:	2003e72c 	.word	0x2003e72c
   d540c:	2003e730 	.word	0x2003e730
   d5410:	2003e3c4 	.word	0x2003e3c4
   d5414:	000d5315 	.word	0x000d5315

000d5418 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5418:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d541a:	4b0c      	ldr	r3, [pc, #48]	; (d544c <serialEventRun+0x34>)
   d541c:	b133      	cbz	r3, d542c <serialEventRun+0x14>
   d541e:	f7ff ffd5 	bl	d53cc <_Z16_fetch_usbserialv>
   d5422:	6803      	ldr	r3, [r0, #0]
   d5424:	691b      	ldr	r3, [r3, #16]
   d5426:	4798      	blx	r3
   d5428:	2800      	cmp	r0, #0
   d542a:	dc09      	bgt.n	d5440 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d542c:	4b08      	ldr	r3, [pc, #32]	; (d5450 <serialEventRun+0x38>)
   d542e:	b163      	cbz	r3, d544a <serialEventRun+0x32>
   d5430:	f7ff ff48 	bl	d52c4 <_Z22__fetch_global_Serial1v>
   d5434:	6803      	ldr	r3, [r0, #0]
   d5436:	691b      	ldr	r3, [r3, #16]
   d5438:	4798      	blx	r3
   d543a:	2800      	cmp	r0, #0
   d543c:	dc03      	bgt.n	d5446 <serialEventRun+0x2e>
   d543e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5440:	f3af 8000 	nop.w
   d5444:	e7f2      	b.n	d542c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5446:	f3af 8000 	nop.w
   d544a:	bd08      	pop	{r3, pc}
	...

000d5454 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5454:	b508      	push	{r3, lr}
	serialEventRun();
   d5456:	f7ff ffdf 	bl	d5418 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d545a:	f7fe ff4b 	bl	d42f4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d545e:	4b01      	ldr	r3, [pc, #4]	; (d5464 <_post_loop+0x10>)
   d5460:	6018      	str	r0, [r3, #0]
   d5462:	bd08      	pop	{r3, pc}
   d5464:	2003e74c 	.word	0x2003e74c

000d5468 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5468:	4802      	ldr	r0, [pc, #8]	; (d5474 <_Z33system_initialize_user_backup_ramv+0xc>)
   d546a:	4a03      	ldr	r2, [pc, #12]	; (d5478 <_Z33system_initialize_user_backup_ramv+0x10>)
   d546c:	4903      	ldr	r1, [pc, #12]	; (d547c <_Z33system_initialize_user_backup_ramv+0x14>)
   d546e:	1a12      	subs	r2, r2, r0
   d5470:	f000 bb72 	b.w	d5b58 <memcpy>
   d5474:	2003f400 	.word	0x2003f400
   d5478:	2003f404 	.word	0x2003f404
   d547c:	000d60b0 	.word	0x000d60b0

000d5480 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5480:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5482:	2300      	movs	r3, #0
   d5484:	9300      	str	r3, [sp, #0]
   d5486:	461a      	mov	r2, r3
   d5488:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d548c:	f7fe fff6 	bl	d447c <system_ctrl_set_result>
}
   d5490:	b003      	add	sp, #12
   d5492:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d5498 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d5498:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d549a:	8843      	ldrh	r3, [r0, #2]
   d549c:	2b0a      	cmp	r3, #10
   d549e:	d008      	beq.n	d54b2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d54a0:	2b50      	cmp	r3, #80	; 0x50
   d54a2:	d109      	bne.n	d54b8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d54a4:	4b09      	ldr	r3, [pc, #36]	; (d54cc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d54a6:	681b      	ldr	r3, [r3, #0]
   d54a8:	b13b      	cbz	r3, d54ba <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d54aa:	b003      	add	sp, #12
   d54ac:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d54b0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d54b2:	f7ff ffe5 	bl	d5480 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d54b6:	e006      	b.n	d54c6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d54b8:	2300      	movs	r3, #0
   d54ba:	9300      	str	r3, [sp, #0]
   d54bc:	461a      	mov	r2, r3
   d54be:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d54c2:	f7fe ffdb 	bl	d447c <system_ctrl_set_result>
        break;
    }
}
   d54c6:	b003      	add	sp, #12
   d54c8:	f85d fb04 	ldr.w	pc, [sp], #4
   d54cc:	2003e744 	.word	0x2003e744

000d54d0 <module_user_init_hook>:

void module_user_init_hook()
{
   d54d0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d54d2:	4c10      	ldr	r4, [pc, #64]	; (d5514 <module_user_init_hook+0x44>)
   d54d4:	4d10      	ldr	r5, [pc, #64]	; (d5518 <module_user_init_hook+0x48>)
   d54d6:	6823      	ldr	r3, [r4, #0]
   d54d8:	42ab      	cmp	r3, r5
   d54da:	4b10      	ldr	r3, [pc, #64]	; (d551c <module_user_init_hook+0x4c>)
   d54dc:	bf0c      	ite	eq
   d54de:	2201      	moveq	r2, #1
   d54e0:	2200      	movne	r2, #0
   d54e2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d54e4:	d002      	beq.n	d54ec <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d54e6:	f7ff ffbf 	bl	d5468 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d54ea:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d54ec:	f7fe fef2 	bl	d42d4 <HAL_RNG_GetRandomNumber>
   d54f0:	4604      	mov	r4, r0
    srand(seed);
   d54f2:	f000 fb45 	bl	d5b80 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d54f6:	4b0a      	ldr	r3, [pc, #40]	; (d5520 <module_user_init_hook+0x50>)
   d54f8:	b113      	cbz	r3, d5500 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d54fa:	4620      	mov	r0, r4
   d54fc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5500:	2100      	movs	r1, #0
   d5502:	4807      	ldr	r0, [pc, #28]	; (d5520 <module_user_init_hook+0x50>)
   d5504:	f7fe ffde 	bl	d44c4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5508:	2100      	movs	r1, #0
   d550a:	4806      	ldr	r0, [pc, #24]	; (d5524 <module_user_init_hook+0x54>)
}
   d550c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5510:	f7fe bfaa 	b.w	d4468 <system_ctrl_set_app_request_handler>
   d5514:	2003f400 	.word	0x2003f400
   d5518:	9a271c1e 	.word	0x9a271c1e
   d551c:	2003e748 	.word	0x2003e748
   d5520:	00000000 	.word	0x00000000
   d5524:	000d5499 	.word	0x000d5499

000d5528 <__aeabi_atexit>:
   d5528:	460b      	mov	r3, r1
   d552a:	4601      	mov	r1, r0
   d552c:	4618      	mov	r0, r3
   d552e:	f000 bb05 	b.w	d5b3c <__cxa_atexit>

000d5532 <_ZdlPvj>:
   d5532:	f7fe bdb2 	b.w	d409a <_ZdlPv>

000d5536 <_ZSt25__throw_bad_function_callv>:
   d5536:	b508      	push	{r3, lr}
   d5538:	f7ff f834 	bl	d45a4 <abort>

000d553c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d553c:	4b24      	ldr	r3, [pc, #144]	; (d55d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d553e:	681a      	ldr	r2, [r3, #0]
   d5540:	07d0      	lsls	r0, r2, #31
   d5542:	bf5c      	itt	pl
   d5544:	2201      	movpl	r2, #1
   d5546:	601a      	strpl	r2, [r3, #0]
   d5548:	4b22      	ldr	r3, [pc, #136]	; (d55d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d554a:	681a      	ldr	r2, [r3, #0]
   d554c:	07d1      	lsls	r1, r2, #31
   d554e:	bf5c      	itt	pl
   d5550:	2201      	movpl	r2, #1
   d5552:	601a      	strpl	r2, [r3, #0]
   d5554:	4b20      	ldr	r3, [pc, #128]	; (d55d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5556:	681a      	ldr	r2, [r3, #0]
   d5558:	07d2      	lsls	r2, r2, #31
   d555a:	bf5c      	itt	pl
   d555c:	2201      	movpl	r2, #1
   d555e:	601a      	strpl	r2, [r3, #0]
   d5560:	4b1e      	ldr	r3, [pc, #120]	; (d55dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5562:	681a      	ldr	r2, [r3, #0]
   d5564:	07d0      	lsls	r0, r2, #31
   d5566:	bf5c      	itt	pl
   d5568:	2201      	movpl	r2, #1
   d556a:	601a      	strpl	r2, [r3, #0]
   d556c:	4b1c      	ldr	r3, [pc, #112]	; (d55e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d556e:	681a      	ldr	r2, [r3, #0]
   d5570:	07d1      	lsls	r1, r2, #31
   d5572:	bf5c      	itt	pl
   d5574:	2201      	movpl	r2, #1
   d5576:	601a      	strpl	r2, [r3, #0]
   d5578:	4b1a      	ldr	r3, [pc, #104]	; (d55e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d557a:	681a      	ldr	r2, [r3, #0]
   d557c:	07d2      	lsls	r2, r2, #31
   d557e:	bf5c      	itt	pl
   d5580:	2201      	movpl	r2, #1
   d5582:	601a      	strpl	r2, [r3, #0]
   d5584:	4b18      	ldr	r3, [pc, #96]	; (d55e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5586:	681a      	ldr	r2, [r3, #0]
   d5588:	07d0      	lsls	r0, r2, #31
   d558a:	bf5c      	itt	pl
   d558c:	2201      	movpl	r2, #1
   d558e:	601a      	strpl	r2, [r3, #0]
   d5590:	4b16      	ldr	r3, [pc, #88]	; (d55ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5592:	681a      	ldr	r2, [r3, #0]
   d5594:	07d1      	lsls	r1, r2, #31
   d5596:	bf5c      	itt	pl
   d5598:	2201      	movpl	r2, #1
   d559a:	601a      	strpl	r2, [r3, #0]
   d559c:	4b14      	ldr	r3, [pc, #80]	; (d55f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d559e:	681a      	ldr	r2, [r3, #0]
   d55a0:	07d2      	lsls	r2, r2, #31
   d55a2:	bf5c      	itt	pl
   d55a4:	2201      	movpl	r2, #1
   d55a6:	601a      	strpl	r2, [r3, #0]
   d55a8:	4b12      	ldr	r3, [pc, #72]	; (d55f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d55aa:	681a      	ldr	r2, [r3, #0]
   d55ac:	07d0      	lsls	r0, r2, #31
   d55ae:	bf5c      	itt	pl
   d55b0:	2201      	movpl	r2, #1
   d55b2:	601a      	strpl	r2, [r3, #0]
   d55b4:	4b10      	ldr	r3, [pc, #64]	; (d55f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d55b6:	681a      	ldr	r2, [r3, #0]
   d55b8:	07d1      	lsls	r1, r2, #31
   d55ba:	bf5c      	itt	pl
   d55bc:	2201      	movpl	r2, #1
   d55be:	601a      	strpl	r2, [r3, #0]
   d55c0:	4b0e      	ldr	r3, [pc, #56]	; (d55fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d55c2:	681a      	ldr	r2, [r3, #0]
   d55c4:	07d2      	lsls	r2, r2, #31
   d55c6:	bf5c      	itt	pl
   d55c8:	2201      	movpl	r2, #1
   d55ca:	601a      	strpl	r2, [r3, #0]
   d55cc:	4770      	bx	lr
   d55ce:	bf00      	nop
   d55d0:	2003e77c 	.word	0x2003e77c
   d55d4:	2003e778 	.word	0x2003e778
   d55d8:	2003e774 	.word	0x2003e774
   d55dc:	2003e770 	.word	0x2003e770
   d55e0:	2003e76c 	.word	0x2003e76c
   d55e4:	2003e768 	.word	0x2003e768
   d55e8:	2003e764 	.word	0x2003e764
   d55ec:	2003e760 	.word	0x2003e760
   d55f0:	2003e75c 	.word	0x2003e75c
   d55f4:	2003e758 	.word	0x2003e758
   d55f8:	2003e754 	.word	0x2003e754
   d55fc:	2003e750 	.word	0x2003e750

000d5600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5600:	4b18      	ldr	r3, [pc, #96]	; (d5664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5602:	681a      	ldr	r2, [r3, #0]
   d5604:	07d1      	lsls	r1, r2, #31
   d5606:	bf5c      	itt	pl
   d5608:	2201      	movpl	r2, #1
   d560a:	601a      	strpl	r2, [r3, #0]
   d560c:	4b16      	ldr	r3, [pc, #88]	; (d5668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d560e:	681a      	ldr	r2, [r3, #0]
   d5610:	07d2      	lsls	r2, r2, #31
   d5612:	bf5c      	itt	pl
   d5614:	2201      	movpl	r2, #1
   d5616:	601a      	strpl	r2, [r3, #0]
   d5618:	4b14      	ldr	r3, [pc, #80]	; (d566c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d561a:	681a      	ldr	r2, [r3, #0]
   d561c:	07d0      	lsls	r0, r2, #31
   d561e:	bf5c      	itt	pl
   d5620:	2201      	movpl	r2, #1
   d5622:	601a      	strpl	r2, [r3, #0]
   d5624:	4b12      	ldr	r3, [pc, #72]	; (d5670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5626:	681a      	ldr	r2, [r3, #0]
   d5628:	07d1      	lsls	r1, r2, #31
   d562a:	bf5c      	itt	pl
   d562c:	2201      	movpl	r2, #1
   d562e:	601a      	strpl	r2, [r3, #0]
   d5630:	4b10      	ldr	r3, [pc, #64]	; (d5674 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5632:	681a      	ldr	r2, [r3, #0]
   d5634:	07d2      	lsls	r2, r2, #31
   d5636:	bf5c      	itt	pl
   d5638:	2201      	movpl	r2, #1
   d563a:	601a      	strpl	r2, [r3, #0]
   d563c:	4b0e      	ldr	r3, [pc, #56]	; (d5678 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d563e:	681a      	ldr	r2, [r3, #0]
   d5640:	07d0      	lsls	r0, r2, #31
   d5642:	bf5c      	itt	pl
   d5644:	2201      	movpl	r2, #1
   d5646:	601a      	strpl	r2, [r3, #0]
   d5648:	4b0c      	ldr	r3, [pc, #48]	; (d567c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d564a:	681a      	ldr	r2, [r3, #0]
   d564c:	07d1      	lsls	r1, r2, #31
   d564e:	bf5c      	itt	pl
   d5650:	2201      	movpl	r2, #1
   d5652:	601a      	strpl	r2, [r3, #0]
   d5654:	4b0a      	ldr	r3, [pc, #40]	; (d5680 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5656:	681a      	ldr	r2, [r3, #0]
   d5658:	07d2      	lsls	r2, r2, #31
   d565a:	bf5c      	itt	pl
   d565c:	2201      	movpl	r2, #1
   d565e:	601a      	strpl	r2, [r3, #0]
   d5660:	4770      	bx	lr
   d5662:	bf00      	nop
   d5664:	2003e79c 	.word	0x2003e79c
   d5668:	2003e798 	.word	0x2003e798
   d566c:	2003e794 	.word	0x2003e794
   d5670:	2003e790 	.word	0x2003e790
   d5674:	2003e78c 	.word	0x2003e78c
   d5678:	2003e788 	.word	0x2003e788
   d567c:	2003e784 	.word	0x2003e784
   d5680:	2003e780 	.word	0x2003e780

000d5684 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5684:	4b18      	ldr	r3, [pc, #96]	; (d56e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5686:	681a      	ldr	r2, [r3, #0]
   d5688:	07d1      	lsls	r1, r2, #31
   d568a:	bf5c      	itt	pl
   d568c:	2201      	movpl	r2, #1
   d568e:	601a      	strpl	r2, [r3, #0]
   d5690:	4b16      	ldr	r3, [pc, #88]	; (d56ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5692:	681a      	ldr	r2, [r3, #0]
   d5694:	07d2      	lsls	r2, r2, #31
   d5696:	bf5c      	itt	pl
   d5698:	2201      	movpl	r2, #1
   d569a:	601a      	strpl	r2, [r3, #0]
   d569c:	4b14      	ldr	r3, [pc, #80]	; (d56f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d569e:	681a      	ldr	r2, [r3, #0]
   d56a0:	07d0      	lsls	r0, r2, #31
   d56a2:	bf5c      	itt	pl
   d56a4:	2201      	movpl	r2, #1
   d56a6:	601a      	strpl	r2, [r3, #0]
   d56a8:	4b12      	ldr	r3, [pc, #72]	; (d56f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d56aa:	681a      	ldr	r2, [r3, #0]
   d56ac:	07d1      	lsls	r1, r2, #31
   d56ae:	bf5c      	itt	pl
   d56b0:	2201      	movpl	r2, #1
   d56b2:	601a      	strpl	r2, [r3, #0]
   d56b4:	4b10      	ldr	r3, [pc, #64]	; (d56f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d56b6:	681a      	ldr	r2, [r3, #0]
   d56b8:	07d2      	lsls	r2, r2, #31
   d56ba:	bf5c      	itt	pl
   d56bc:	2201      	movpl	r2, #1
   d56be:	601a      	strpl	r2, [r3, #0]
   d56c0:	4b0e      	ldr	r3, [pc, #56]	; (d56fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d56c2:	681a      	ldr	r2, [r3, #0]
   d56c4:	07d0      	lsls	r0, r2, #31
   d56c6:	bf5c      	itt	pl
   d56c8:	2201      	movpl	r2, #1
   d56ca:	601a      	strpl	r2, [r3, #0]
   d56cc:	4b0c      	ldr	r3, [pc, #48]	; (d5700 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d56ce:	681a      	ldr	r2, [r3, #0]
   d56d0:	07d1      	lsls	r1, r2, #31
   d56d2:	bf5c      	itt	pl
   d56d4:	2201      	movpl	r2, #1
   d56d6:	601a      	strpl	r2, [r3, #0]
   d56d8:	4b0a      	ldr	r3, [pc, #40]	; (d5704 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d56da:	681a      	ldr	r2, [r3, #0]
   d56dc:	07d2      	lsls	r2, r2, #31
   d56de:	bf5c      	itt	pl
   d56e0:	2201      	movpl	r2, #1
   d56e2:	601a      	strpl	r2, [r3, #0]
   d56e4:	4770      	bx	lr
   d56e6:	bf00      	nop
   d56e8:	2003e7bc 	.word	0x2003e7bc
   d56ec:	2003e7b8 	.word	0x2003e7b8
   d56f0:	2003e7b4 	.word	0x2003e7b4
   d56f4:	2003e7b0 	.word	0x2003e7b0
   d56f8:	2003e7ac 	.word	0x2003e7ac
   d56fc:	2003e7a8 	.word	0x2003e7a8
   d5700:	2003e7a4 	.word	0x2003e7a4
   d5704:	2003e7a0 	.word	0x2003e7a0

000d5708 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5708:	4b24      	ldr	r3, [pc, #144]	; (d579c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d570a:	681a      	ldr	r2, [r3, #0]
   d570c:	07d0      	lsls	r0, r2, #31
   d570e:	bf5c      	itt	pl
   d5710:	2201      	movpl	r2, #1
   d5712:	601a      	strpl	r2, [r3, #0]
   d5714:	4b22      	ldr	r3, [pc, #136]	; (d57a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5716:	681a      	ldr	r2, [r3, #0]
   d5718:	07d1      	lsls	r1, r2, #31
   d571a:	bf5c      	itt	pl
   d571c:	2201      	movpl	r2, #1
   d571e:	601a      	strpl	r2, [r3, #0]
   d5720:	4b20      	ldr	r3, [pc, #128]	; (d57a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5722:	681a      	ldr	r2, [r3, #0]
   d5724:	07d2      	lsls	r2, r2, #31
   d5726:	bf5c      	itt	pl
   d5728:	2201      	movpl	r2, #1
   d572a:	601a      	strpl	r2, [r3, #0]
   d572c:	4b1e      	ldr	r3, [pc, #120]	; (d57a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d572e:	681a      	ldr	r2, [r3, #0]
   d5730:	07d0      	lsls	r0, r2, #31
   d5732:	bf5c      	itt	pl
   d5734:	2201      	movpl	r2, #1
   d5736:	601a      	strpl	r2, [r3, #0]
   d5738:	4b1c      	ldr	r3, [pc, #112]	; (d57ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d573a:	681a      	ldr	r2, [r3, #0]
   d573c:	07d1      	lsls	r1, r2, #31
   d573e:	bf5c      	itt	pl
   d5740:	2201      	movpl	r2, #1
   d5742:	601a      	strpl	r2, [r3, #0]
   d5744:	4b1a      	ldr	r3, [pc, #104]	; (d57b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5746:	681a      	ldr	r2, [r3, #0]
   d5748:	07d2      	lsls	r2, r2, #31
   d574a:	bf5c      	itt	pl
   d574c:	2201      	movpl	r2, #1
   d574e:	601a      	strpl	r2, [r3, #0]
   d5750:	4b18      	ldr	r3, [pc, #96]	; (d57b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5752:	681a      	ldr	r2, [r3, #0]
   d5754:	07d0      	lsls	r0, r2, #31
   d5756:	bf5c      	itt	pl
   d5758:	2201      	movpl	r2, #1
   d575a:	601a      	strpl	r2, [r3, #0]
   d575c:	4b16      	ldr	r3, [pc, #88]	; (d57b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d575e:	681a      	ldr	r2, [r3, #0]
   d5760:	07d1      	lsls	r1, r2, #31
   d5762:	bf5c      	itt	pl
   d5764:	2201      	movpl	r2, #1
   d5766:	601a      	strpl	r2, [r3, #0]
   d5768:	4b14      	ldr	r3, [pc, #80]	; (d57bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d576a:	681a      	ldr	r2, [r3, #0]
   d576c:	07d2      	lsls	r2, r2, #31
   d576e:	bf5c      	itt	pl
   d5770:	2201      	movpl	r2, #1
   d5772:	601a      	strpl	r2, [r3, #0]
   d5774:	4b12      	ldr	r3, [pc, #72]	; (d57c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5776:	681a      	ldr	r2, [r3, #0]
   d5778:	07d0      	lsls	r0, r2, #31
   d577a:	bf5c      	itt	pl
   d577c:	2201      	movpl	r2, #1
   d577e:	601a      	strpl	r2, [r3, #0]
   d5780:	4b10      	ldr	r3, [pc, #64]	; (d57c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5782:	681a      	ldr	r2, [r3, #0]
   d5784:	07d1      	lsls	r1, r2, #31
   d5786:	bf5c      	itt	pl
   d5788:	2201      	movpl	r2, #1
   d578a:	601a      	strpl	r2, [r3, #0]
   d578c:	4b0e      	ldr	r3, [pc, #56]	; (d57c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d578e:	681a      	ldr	r2, [r3, #0]
   d5790:	07d2      	lsls	r2, r2, #31
   d5792:	bf5c      	itt	pl
   d5794:	2201      	movpl	r2, #1
   d5796:	601a      	strpl	r2, [r3, #0]
   d5798:	4770      	bx	lr
   d579a:	bf00      	nop
   d579c:	2003e7ec 	.word	0x2003e7ec
   d57a0:	2003e7e8 	.word	0x2003e7e8
   d57a4:	2003e7e4 	.word	0x2003e7e4
   d57a8:	2003e7e0 	.word	0x2003e7e0
   d57ac:	2003e7dc 	.word	0x2003e7dc
   d57b0:	2003e7d8 	.word	0x2003e7d8
   d57b4:	2003e7d4 	.word	0x2003e7d4
   d57b8:	2003e7d0 	.word	0x2003e7d0
   d57bc:	2003e7cc 	.word	0x2003e7cc
   d57c0:	2003e7c8 	.word	0x2003e7c8
   d57c4:	2003e7c4 	.word	0x2003e7c4
   d57c8:	2003e7c0 	.word	0x2003e7c0

000d57cc <__aeabi_drsub>:
   d57cc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d57d0:	e002      	b.n	d57d8 <__adddf3>
   d57d2:	bf00      	nop

000d57d4 <__aeabi_dsub>:
   d57d4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d57d8 <__adddf3>:
   d57d8:	b530      	push	{r4, r5, lr}
   d57da:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d57de:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d57e2:	ea94 0f05 	teq	r4, r5
   d57e6:	bf08      	it	eq
   d57e8:	ea90 0f02 	teqeq	r0, r2
   d57ec:	bf1f      	itttt	ne
   d57ee:	ea54 0c00 	orrsne.w	ip, r4, r0
   d57f2:	ea55 0c02 	orrsne.w	ip, r5, r2
   d57f6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d57fa:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d57fe:	f000 80e2 	beq.w	d59c6 <__adddf3+0x1ee>
   d5802:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d5806:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d580a:	bfb8      	it	lt
   d580c:	426d      	neglt	r5, r5
   d580e:	dd0c      	ble.n	d582a <__adddf3+0x52>
   d5810:	442c      	add	r4, r5
   d5812:	ea80 0202 	eor.w	r2, r0, r2
   d5816:	ea81 0303 	eor.w	r3, r1, r3
   d581a:	ea82 0000 	eor.w	r0, r2, r0
   d581e:	ea83 0101 	eor.w	r1, r3, r1
   d5822:	ea80 0202 	eor.w	r2, r0, r2
   d5826:	ea81 0303 	eor.w	r3, r1, r3
   d582a:	2d36      	cmp	r5, #54	; 0x36
   d582c:	bf88      	it	hi
   d582e:	bd30      	pophi	{r4, r5, pc}
   d5830:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d5834:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5838:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d583c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5840:	d002      	beq.n	d5848 <__adddf3+0x70>
   d5842:	4240      	negs	r0, r0
   d5844:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5848:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d584c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5850:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d5854:	d002      	beq.n	d585c <__adddf3+0x84>
   d5856:	4252      	negs	r2, r2
   d5858:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d585c:	ea94 0f05 	teq	r4, r5
   d5860:	f000 80a7 	beq.w	d59b2 <__adddf3+0x1da>
   d5864:	f1a4 0401 	sub.w	r4, r4, #1
   d5868:	f1d5 0e20 	rsbs	lr, r5, #32
   d586c:	db0d      	blt.n	d588a <__adddf3+0xb2>
   d586e:	fa02 fc0e 	lsl.w	ip, r2, lr
   d5872:	fa22 f205 	lsr.w	r2, r2, r5
   d5876:	1880      	adds	r0, r0, r2
   d5878:	f141 0100 	adc.w	r1, r1, #0
   d587c:	fa03 f20e 	lsl.w	r2, r3, lr
   d5880:	1880      	adds	r0, r0, r2
   d5882:	fa43 f305 	asr.w	r3, r3, r5
   d5886:	4159      	adcs	r1, r3
   d5888:	e00e      	b.n	d58a8 <__adddf3+0xd0>
   d588a:	f1a5 0520 	sub.w	r5, r5, #32
   d588e:	f10e 0e20 	add.w	lr, lr, #32
   d5892:	2a01      	cmp	r2, #1
   d5894:	fa03 fc0e 	lsl.w	ip, r3, lr
   d5898:	bf28      	it	cs
   d589a:	f04c 0c02 	orrcs.w	ip, ip, #2
   d589e:	fa43 f305 	asr.w	r3, r3, r5
   d58a2:	18c0      	adds	r0, r0, r3
   d58a4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d58a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d58ac:	d507      	bpl.n	d58be <__adddf3+0xe6>
   d58ae:	f04f 0e00 	mov.w	lr, #0
   d58b2:	f1dc 0c00 	rsbs	ip, ip, #0
   d58b6:	eb7e 0000 	sbcs.w	r0, lr, r0
   d58ba:	eb6e 0101 	sbc.w	r1, lr, r1
   d58be:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d58c2:	d31b      	bcc.n	d58fc <__adddf3+0x124>
   d58c4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d58c8:	d30c      	bcc.n	d58e4 <__adddf3+0x10c>
   d58ca:	0849      	lsrs	r1, r1, #1
   d58cc:	ea5f 0030 	movs.w	r0, r0, rrx
   d58d0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d58d4:	f104 0401 	add.w	r4, r4, #1
   d58d8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d58dc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d58e0:	f080 809a 	bcs.w	d5a18 <__adddf3+0x240>
   d58e4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d58e8:	bf08      	it	eq
   d58ea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d58ee:	f150 0000 	adcs.w	r0, r0, #0
   d58f2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d58f6:	ea41 0105 	orr.w	r1, r1, r5
   d58fa:	bd30      	pop	{r4, r5, pc}
   d58fc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5900:	4140      	adcs	r0, r0
   d5902:	eb41 0101 	adc.w	r1, r1, r1
   d5906:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d590a:	f1a4 0401 	sub.w	r4, r4, #1
   d590e:	d1e9      	bne.n	d58e4 <__adddf3+0x10c>
   d5910:	f091 0f00 	teq	r1, #0
   d5914:	bf04      	itt	eq
   d5916:	4601      	moveq	r1, r0
   d5918:	2000      	moveq	r0, #0
   d591a:	fab1 f381 	clz	r3, r1
   d591e:	bf08      	it	eq
   d5920:	3320      	addeq	r3, #32
   d5922:	f1a3 030b 	sub.w	r3, r3, #11
   d5926:	f1b3 0220 	subs.w	r2, r3, #32
   d592a:	da0c      	bge.n	d5946 <__adddf3+0x16e>
   d592c:	320c      	adds	r2, #12
   d592e:	dd08      	ble.n	d5942 <__adddf3+0x16a>
   d5930:	f102 0c14 	add.w	ip, r2, #20
   d5934:	f1c2 020c 	rsb	r2, r2, #12
   d5938:	fa01 f00c 	lsl.w	r0, r1, ip
   d593c:	fa21 f102 	lsr.w	r1, r1, r2
   d5940:	e00c      	b.n	d595c <__adddf3+0x184>
   d5942:	f102 0214 	add.w	r2, r2, #20
   d5946:	bfd8      	it	le
   d5948:	f1c2 0c20 	rsble	ip, r2, #32
   d594c:	fa01 f102 	lsl.w	r1, r1, r2
   d5950:	fa20 fc0c 	lsr.w	ip, r0, ip
   d5954:	bfdc      	itt	le
   d5956:	ea41 010c 	orrle.w	r1, r1, ip
   d595a:	4090      	lslle	r0, r2
   d595c:	1ae4      	subs	r4, r4, r3
   d595e:	bfa2      	ittt	ge
   d5960:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d5964:	4329      	orrge	r1, r5
   d5966:	bd30      	popge	{r4, r5, pc}
   d5968:	ea6f 0404 	mvn.w	r4, r4
   d596c:	3c1f      	subs	r4, #31
   d596e:	da1c      	bge.n	d59aa <__adddf3+0x1d2>
   d5970:	340c      	adds	r4, #12
   d5972:	dc0e      	bgt.n	d5992 <__adddf3+0x1ba>
   d5974:	f104 0414 	add.w	r4, r4, #20
   d5978:	f1c4 0220 	rsb	r2, r4, #32
   d597c:	fa20 f004 	lsr.w	r0, r0, r4
   d5980:	fa01 f302 	lsl.w	r3, r1, r2
   d5984:	ea40 0003 	orr.w	r0, r0, r3
   d5988:	fa21 f304 	lsr.w	r3, r1, r4
   d598c:	ea45 0103 	orr.w	r1, r5, r3
   d5990:	bd30      	pop	{r4, r5, pc}
   d5992:	f1c4 040c 	rsb	r4, r4, #12
   d5996:	f1c4 0220 	rsb	r2, r4, #32
   d599a:	fa20 f002 	lsr.w	r0, r0, r2
   d599e:	fa01 f304 	lsl.w	r3, r1, r4
   d59a2:	ea40 0003 	orr.w	r0, r0, r3
   d59a6:	4629      	mov	r1, r5
   d59a8:	bd30      	pop	{r4, r5, pc}
   d59aa:	fa21 f004 	lsr.w	r0, r1, r4
   d59ae:	4629      	mov	r1, r5
   d59b0:	bd30      	pop	{r4, r5, pc}
   d59b2:	f094 0f00 	teq	r4, #0
   d59b6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d59ba:	bf06      	itte	eq
   d59bc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d59c0:	3401      	addeq	r4, #1
   d59c2:	3d01      	subne	r5, #1
   d59c4:	e74e      	b.n	d5864 <__adddf3+0x8c>
   d59c6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d59ca:	bf18      	it	ne
   d59cc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d59d0:	d029      	beq.n	d5a26 <__adddf3+0x24e>
   d59d2:	ea94 0f05 	teq	r4, r5
   d59d6:	bf08      	it	eq
   d59d8:	ea90 0f02 	teqeq	r0, r2
   d59dc:	d005      	beq.n	d59ea <__adddf3+0x212>
   d59de:	ea54 0c00 	orrs.w	ip, r4, r0
   d59e2:	bf04      	itt	eq
   d59e4:	4619      	moveq	r1, r3
   d59e6:	4610      	moveq	r0, r2
   d59e8:	bd30      	pop	{r4, r5, pc}
   d59ea:	ea91 0f03 	teq	r1, r3
   d59ee:	bf1e      	ittt	ne
   d59f0:	2100      	movne	r1, #0
   d59f2:	2000      	movne	r0, #0
   d59f4:	bd30      	popne	{r4, r5, pc}
   d59f6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d59fa:	d105      	bne.n	d5a08 <__adddf3+0x230>
   d59fc:	0040      	lsls	r0, r0, #1
   d59fe:	4149      	adcs	r1, r1
   d5a00:	bf28      	it	cs
   d5a02:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5a06:	bd30      	pop	{r4, r5, pc}
   d5a08:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5a0c:	bf3c      	itt	cc
   d5a0e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5a12:	bd30      	popcc	{r4, r5, pc}
   d5a14:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a18:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5a1c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5a20:	f04f 0000 	mov.w	r0, #0
   d5a24:	bd30      	pop	{r4, r5, pc}
   d5a26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5a2a:	bf1a      	itte	ne
   d5a2c:	4619      	movne	r1, r3
   d5a2e:	4610      	movne	r0, r2
   d5a30:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5a34:	bf1c      	itt	ne
   d5a36:	460b      	movne	r3, r1
   d5a38:	4602      	movne	r2, r0
   d5a3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5a3e:	bf06      	itte	eq
   d5a40:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5a44:	ea91 0f03 	teqeq	r1, r3
   d5a48:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5a4c:	bd30      	pop	{r4, r5, pc}
   d5a4e:	bf00      	nop

000d5a50 <__aeabi_ui2d>:
   d5a50:	f090 0f00 	teq	r0, #0
   d5a54:	bf04      	itt	eq
   d5a56:	2100      	moveq	r1, #0
   d5a58:	4770      	bxeq	lr
   d5a5a:	b530      	push	{r4, r5, lr}
   d5a5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a60:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a64:	f04f 0500 	mov.w	r5, #0
   d5a68:	f04f 0100 	mov.w	r1, #0
   d5a6c:	e750      	b.n	d5910 <__adddf3+0x138>
   d5a6e:	bf00      	nop

000d5a70 <__aeabi_i2d>:
   d5a70:	f090 0f00 	teq	r0, #0
   d5a74:	bf04      	itt	eq
   d5a76:	2100      	moveq	r1, #0
   d5a78:	4770      	bxeq	lr
   d5a7a:	b530      	push	{r4, r5, lr}
   d5a7c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5a80:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5a84:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5a88:	bf48      	it	mi
   d5a8a:	4240      	negmi	r0, r0
   d5a8c:	f04f 0100 	mov.w	r1, #0
   d5a90:	e73e      	b.n	d5910 <__adddf3+0x138>
   d5a92:	bf00      	nop

000d5a94 <__aeabi_f2d>:
   d5a94:	0042      	lsls	r2, r0, #1
   d5a96:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5a9a:	ea4f 0131 	mov.w	r1, r1, rrx
   d5a9e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5aa2:	bf1f      	itttt	ne
   d5aa4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5aa8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5aac:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5ab0:	4770      	bxne	lr
   d5ab2:	f092 0f00 	teq	r2, #0
   d5ab6:	bf14      	ite	ne
   d5ab8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5abc:	4770      	bxeq	lr
   d5abe:	b530      	push	{r4, r5, lr}
   d5ac0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5ac4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5ac8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5acc:	e720      	b.n	d5910 <__adddf3+0x138>
   d5ace:	bf00      	nop

000d5ad0 <__aeabi_ul2d>:
   d5ad0:	ea50 0201 	orrs.w	r2, r0, r1
   d5ad4:	bf08      	it	eq
   d5ad6:	4770      	bxeq	lr
   d5ad8:	b530      	push	{r4, r5, lr}
   d5ada:	f04f 0500 	mov.w	r5, #0
   d5ade:	e00a      	b.n	d5af6 <__aeabi_l2d+0x16>

000d5ae0 <__aeabi_l2d>:
   d5ae0:	ea50 0201 	orrs.w	r2, r0, r1
   d5ae4:	bf08      	it	eq
   d5ae6:	4770      	bxeq	lr
   d5ae8:	b530      	push	{r4, r5, lr}
   d5aea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5aee:	d502      	bpl.n	d5af6 <__aeabi_l2d+0x16>
   d5af0:	4240      	negs	r0, r0
   d5af2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5af6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5afa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5afe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5b02:	f43f aedc 	beq.w	d58be <__adddf3+0xe6>
   d5b06:	f04f 0203 	mov.w	r2, #3
   d5b0a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b0e:	bf18      	it	ne
   d5b10:	3203      	addne	r2, #3
   d5b12:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b16:	bf18      	it	ne
   d5b18:	3203      	addne	r2, #3
   d5b1a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5b1e:	f1c2 0320 	rsb	r3, r2, #32
   d5b22:	fa00 fc03 	lsl.w	ip, r0, r3
   d5b26:	fa20 f002 	lsr.w	r0, r0, r2
   d5b2a:	fa01 fe03 	lsl.w	lr, r1, r3
   d5b2e:	ea40 000e 	orr.w	r0, r0, lr
   d5b32:	fa21 f102 	lsr.w	r1, r1, r2
   d5b36:	4414      	add	r4, r2
   d5b38:	e6c1      	b.n	d58be <__adddf3+0xe6>
   d5b3a:	bf00      	nop

000d5b3c <__cxa_atexit>:
   d5b3c:	b510      	push	{r4, lr}
   d5b3e:	4c05      	ldr	r4, [pc, #20]	; (d5b54 <__cxa_atexit+0x18>)
   d5b40:	4613      	mov	r3, r2
   d5b42:	b12c      	cbz	r4, d5b50 <__cxa_atexit+0x14>
   d5b44:	460a      	mov	r2, r1
   d5b46:	4601      	mov	r1, r0
   d5b48:	2002      	movs	r0, #2
   d5b4a:	f3af 8000 	nop.w
   d5b4e:	bd10      	pop	{r4, pc}
   d5b50:	4620      	mov	r0, r4
   d5b52:	bd10      	pop	{r4, pc}
   d5b54:	00000000 	.word	0x00000000

000d5b58 <memcpy>:
   d5b58:	b510      	push	{r4, lr}
   d5b5a:	1e43      	subs	r3, r0, #1
   d5b5c:	440a      	add	r2, r1
   d5b5e:	4291      	cmp	r1, r2
   d5b60:	d004      	beq.n	d5b6c <memcpy+0x14>
   d5b62:	f811 4b01 	ldrb.w	r4, [r1], #1
   d5b66:	f803 4f01 	strb.w	r4, [r3, #1]!
   d5b6a:	e7f8      	b.n	d5b5e <memcpy+0x6>
   d5b6c:	bd10      	pop	{r4, pc}

000d5b6e <memset>:
   d5b6e:	4402      	add	r2, r0
   d5b70:	4603      	mov	r3, r0
   d5b72:	4293      	cmp	r3, r2
   d5b74:	d002      	beq.n	d5b7c <memset+0xe>
   d5b76:	f803 1b01 	strb.w	r1, [r3], #1
   d5b7a:	e7fa      	b.n	d5b72 <memset+0x4>
   d5b7c:	4770      	bx	lr
	...

000d5b80 <srand>:
   d5b80:	b538      	push	{r3, r4, r5, lr}
   d5b82:	4b12      	ldr	r3, [pc, #72]	; (d5bcc <srand+0x4c>)
   d5b84:	681c      	ldr	r4, [r3, #0]
   d5b86:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5b88:	4605      	mov	r5, r0
   d5b8a:	b9d3      	cbnz	r3, d5bc2 <srand+0x42>
   d5b8c:	2018      	movs	r0, #24
   d5b8e:	f7fe fcf1 	bl	d4574 <malloc>
   d5b92:	f243 330e 	movw	r3, #13070	; 0x330e
   d5b96:	63a0      	str	r0, [r4, #56]	; 0x38
   d5b98:	8003      	strh	r3, [r0, #0]
   d5b9a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d5b9e:	8043      	strh	r3, [r0, #2]
   d5ba0:	f241 2334 	movw	r3, #4660	; 0x1234
   d5ba4:	8083      	strh	r3, [r0, #4]
   d5ba6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d5baa:	80c3      	strh	r3, [r0, #6]
   d5bac:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d5bb0:	8103      	strh	r3, [r0, #8]
   d5bb2:	2305      	movs	r3, #5
   d5bb4:	8143      	strh	r3, [r0, #10]
   d5bb6:	230b      	movs	r3, #11
   d5bb8:	8183      	strh	r3, [r0, #12]
   d5bba:	2201      	movs	r2, #1
   d5bbc:	2300      	movs	r3, #0
   d5bbe:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d5bc2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d5bc4:	2200      	movs	r2, #0
   d5bc6:	611d      	str	r5, [r3, #16]
   d5bc8:	615a      	str	r2, [r3, #20]
   d5bca:	bd38      	pop	{r3, r4, r5, pc}
   d5bcc:	2003e3c0 	.word	0x2003e3c0

000d5bd0 <strdup>:
   d5bd0:	4b02      	ldr	r3, [pc, #8]	; (d5bdc <strdup+0xc>)
   d5bd2:	4601      	mov	r1, r0
   d5bd4:	6818      	ldr	r0, [r3, #0]
   d5bd6:	f000 b803 	b.w	d5be0 <_strdup_r>
   d5bda:	bf00      	nop
   d5bdc:	2003e3c0 	.word	0x2003e3c0

000d5be0 <_strdup_r>:
   d5be0:	b570      	push	{r4, r5, r6, lr}
   d5be2:	4606      	mov	r6, r0
   d5be4:	4608      	mov	r0, r1
   d5be6:	460c      	mov	r4, r1
   d5be8:	f000 f80d 	bl	d5c06 <strlen>
   d5bec:	1c45      	adds	r5, r0, #1
   d5bee:	4629      	mov	r1, r5
   d5bf0:	4630      	mov	r0, r6
   d5bf2:	f7fe fcdf 	bl	d45b4 <_malloc_r>
   d5bf6:	4606      	mov	r6, r0
   d5bf8:	b118      	cbz	r0, d5c02 <_strdup_r+0x22>
   d5bfa:	462a      	mov	r2, r5
   d5bfc:	4621      	mov	r1, r4
   d5bfe:	f7ff ffab 	bl	d5b58 <memcpy>
   d5c02:	4630      	mov	r0, r6
   d5c04:	bd70      	pop	{r4, r5, r6, pc}

000d5c06 <strlen>:
   d5c06:	4603      	mov	r3, r0
   d5c08:	f813 2b01 	ldrb.w	r2, [r3], #1
   d5c0c:	2a00      	cmp	r2, #0
   d5c0e:	d1fb      	bne.n	d5c08 <strlen+0x2>
   d5c10:	1a18      	subs	r0, r3, r0
   d5c12:	3801      	subs	r0, #1
   d5c14:	4770      	bx	lr

000d5c16 <link_code_end>:
	...

000d5c18 <dynalib_user>:
   d5c18:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d5c28:	0000 0000 5c6e 000d 5c76 000d 5c7a 000d     ....n\..v\..z\..
   d5c38:	5c83 000d 5c8b 000d 5c97 000d 5c9d 000d     .\...\...\...\..
   d5c48:	6142 7474 7265 2079 4f53 3a43 2520 312e     Battery SOC: %.1
   d5c58:	2066 6e61 2064 7453 7461 3a65 2520 0073     f and State: %s.
   d5c68:	7453 7461 0065 6e55 6e6b 776f 006e 6f4e     State.Unknown.No
   d5c78:	2074 6843 7261 6967 676e 4300 6168 6772     t Charging.Charg
   d5c88:	6465 4400 7369 6863 7261 6967 676e 4600     ed.Discharging.F
   d5c98:	7561 746c 4400 6369 6e6f 656e 7463 6465     ault.Diconnected
   d5ca8:	7900 6165 3d72 3025 7832 6d20 6e6f 6874     .year=%02x month
   d5cb8:	253d 3230 2078 6164 4f79 4d66 6e6f 6874     =%02x dayOfMonth
   d5cc8:	253d 3230 2078 6164 4f79 5766 6565 3d6b     =%02x dayOfWeek=
   d5cd8:	3025 7832 6820 756f 3d72 3025 7832 6d20     %02x hour=%02x m
   d5ce8:	6e69 7475 3d65 3025 7832 7320 6365 6e6f     inute=%02x secon
   d5cf8:	3d64 3025 7832 6d20 646f 3d65 6425 6400     d=%02x mode=%d.d
   d5d08:	7665 6369 5265 6165 2064 6166 6c69 6465     eviceRead failed
   d5d18:	7320 6174 3d74 6425 7300 7465 5420 6d69      stat=%d.set Tim
   d5d28:	2065 7266 6d6f 5220 4354 2520 0073 6564     e from RTC %s.de
   d5d38:	6976 6563 7257 7469 2065 6166 6c69 6465     viceWrite failed
   d5d48:	7320 6174 3d74 6425 7300 7465 5220 4354      stat=%d.set RTC
   d5d58:	6620 6f72 206d 6c63 756f 2064 7325 6300      from cloud %s.c
   d5d68:	6f6c 6475 7420 6d69 2065 6f6e 2074 6176     loud time not va
   d5d78:	696c 0064 6564 6976 6563 7257 7469 4565     lid.deviceWriteE
   d5d88:	5045 4f52 204d 6166 6c69 6465 7320 6174     EPROM failed sta
   d5d98:	3d74 6425 6100 7070 722e 6374 0000 0000     t=%d.app.rtc....

000d5da8 <_ZTVN5spark13CellularClassE>:
	...
   d5db0:	46cb 000d 46c1 000d 46b7 000d 466d 000d     .F...F...F..mF..
   d5dc0:	46ab 000d 469f 000d 4693 000d 468b 000d     .F...F...F...F..
   d5dd0:	4681 000d 4677 000d 5011 000d               .F..wF...P..

000d5ddc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d5de4:	4705 000d 470b 000d 4761 000d 4719 000d     .G...G..aG...G..
   d5df4:	4707 000d                                   .G..

000d5df8 <_ZTVN5spark13EthernetClassE>:
	...
   d5e00:	4d1b 000d 4d11 000d 4d07 000d 4cfd 000d     .M...M...M...L..
   d5e10:	4cf1 000d 4ce5 000d 4cd9 000d 4cd1 000d     .L...L...L...L..
   d5e20:	4cc7 000d 4cbd 000d 5011 000d               .L...L...P..

000d5e2c <_ZTV9IPAddress>:
	...
   d5e34:	4d49 000d 4d39 000d 4d3b 000d 6162 6475     IM..9M..;M..baud
   d5e44:	5300 7265 6169 006c 6553 6972 6c61 0031     .Serial.Serial1.
   d5e54:	7974 6570 7000 7261 6d61 6300 646d 6800     type.param.cmd.h
   d5e64:	646e 7300 7274 006d 6966 746c 6c00 6c76     nd.strm.filt.lvl
   d5e74:	6100 6464 6148 646e 656c 0072 6572 6f6d     .addHandler.remo
   d5e84:	6576 6148 646e 656c 0072 6e65 6d75 6148     veHandler.enumHa
   d5e94:	646e 656c 7372 4a00 4f53 534e 7274 6165     ndlers.JSONStrea
   d5ea4:	4c6d 676f 6148 646e 656c 0072 7061 0070     mLogHandler.app.
   d5eb4:	3025 3031 2075 5d00 0020 202c 2800 3a29     %010u .] ., .():
   d5ec4:	0020 5b20 6300 646f 2065 203d 2500 0069      . [.code = .%i.
   d5ed4:	6564 6174 6c69 2073 203d 0d00 000a 0066     details = ....f.
   d5ee4:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
   d5ef4:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
   d5f04:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   d5f14:	6369 6100 6c6c 0000                         ic.all..

000d5f1c <_ZTVN5spark9MeshClassE>:
	...
   d5f24:	4e8b 000d 4e81 000d 4e77 000d 4e6d 000d     .N...N..wN..mN..
   d5f34:	4e61 000d 4e55 000d 4e49 000d 4e41 000d     aN..UN..IN..AN..
   d5f44:	4e37 000d 4e2d 000d 5011 000d               7N..-N...P..

000d5f50 <_ZTVN5spark12NetworkClassE>:
	...
   d5f58:	4fa9 000d 4fb3 000d 4fbd 000d 4fc7 000d     .O...O...O...O..
   d5f68:	4fd1 000d 4fdd 000d 4fe9 000d 4ff5 000d     .O...O...O...O..
   d5f78:	4ffd 000d 5007 000d 5011 000d 005a 2b25     .O...P...P..Z.%+
   d5f88:	3330 3a64 3025 7532 2500 2d59 6d25 252d     03d:%02u.%Y-%m-%
   d5f98:	5464 4825 253a 3a4d 5325 7a25 6100 6373     dT%H:%M:%S%z.asc
   d5fa8:	6974 656d 0000 0000                         time....

000d5fb0 <_ZTV11USARTSerial>:
	...
   d5fb8:	5215 000d 5265 000d 5273 000d 50f1 000d     .R..eR..sR...P..
   d5fc8:	5229 000d 524b 000d 5237 000d 525f 000d     )R..KR..7R.._R..
   d5fd8:	5217 000d 521b 000d                         .R...R..

000d5fe0 <_ZTV9USBSerial>:
	...
   d5fe8:	5315 000d 5365 000d 5373 000d 50f1 000d     .S..eS..sS...P..
   d5ff8:	5351 000d 5317 000d 532d 000d 535f 000d     QS...S..-S.._S..
   d6008:	5343 000d 5311 000d                         CS...S..

000d6010 <__sf_fake_stdin>:
	...

000d6030 <__sf_fake_stdout>:
	...

000d6050 <__sf_fake_stderr>:
	...
   d6070:	0043                                        C.

000d6072 <link_const_variable_data_end>:
	...

000d6074 <link_constructors_location>:
   d6074:	000d425d 	.word	0x000d425d
   d6078:	000d426d 	.word	0x000d426d
   d607c:	000d4645 	.word	0x000d4645
   d6080:	000d46d5 	.word	0x000d46d5
   d6084:	000d4d25 	.word	0x000d4d25
   d6088:	000d4e1d 	.word	0x000d4e1d
   d608c:	000d4f59 	.word	0x000d4f59
   d6090:	000d50dd 	.word	0x000d50dd
   d6094:	000d5191 	.word	0x000d5191
   d6098:	000d51cd 	.word	0x000d51cd
   d609c:	000d5201 	.word	0x000d5201
   d60a0:	000d553d 	.word	0x000d553d
   d60a4:	000d5601 	.word	0x000d5601
   d60a8:	000d5685 	.word	0x000d5685
   d60ac:	000d5709 	.word	0x000d5709
